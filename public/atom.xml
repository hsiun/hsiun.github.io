<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GaoSpot</title>
  <subtitle>————写写生活，聊聊技术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zone.gaospot.com/"/>
  <updated>2016-06-28T04:40:46.544Z</updated>
  <id>http://zone.gaospot.com/</id>
  
  <author>
    <name>Gao Xiong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Spring处理一个RESTful请求</title>
    <link href="http://zone.gaospot.com/2016/06/28/%E4%BD%BF%E7%94%A8Spring%E5%A4%84%E7%90%86%E4%B8%80%E4%B8%AARESTful%E8%AF%B7%E6%B1%82/"/>
    <id>http://zone.gaospot.com/2016/06/28/使用Spring处理一个RESTful请求/</id>
    <published>2016-06-28T04:11:00.000Z</published>
    <updated>2016-06-28T04:40:46.544Z</updated>
    
    <content type="html">&lt;p&gt;这里介绍的是用Spring来发起一个http请求，请求的对方响应一个json数据，这里主要介绍对这个请求的发起和处理的过程。&lt;/p&gt;
&lt;p&gt;环境&lt;br&gt;java1.8&lt;br&gt;Ecplise&lt;br&gt;Maven3&lt;/p&gt;
&lt;p&gt;下面是主要的代码，首先是Maven的配置文件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;#62;&amp;#10;  &amp;#60;modelVersion&amp;#62;4.0.0&amp;#60;/modelVersion&amp;#62;&amp;#10;  &amp;#60;groupId&amp;#62;com.gaospot&amp;#60;/groupId&amp;#62;&amp;#10;  &amp;#60;artifactId&amp;#62;consum&amp;#60;/artifactId&amp;#62;&amp;#10;  &amp;#60;version&amp;#62;0.0.1-SNAPSHOT&amp;#60;/version&amp;#62;&amp;#10;  &amp;#10;  &amp;#60;parent&amp;#62;&amp;#10;    &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;spring-boot-starter-parent&amp;#60;/artifactId&amp;#62;&amp;#10;    &amp;#60;version&amp;#62;1.3.5.RELEASE&amp;#60;/version&amp;#62;&amp;#10;  &amp;#60;/parent&amp;#62;&amp;#10;  &amp;#10;  &amp;#60;properties&amp;#62;&amp;#10;    &amp;#60;java.version&amp;#62;1.8&amp;#60;/java.version&amp;#62;&amp;#10;  &amp;#60;/properties&amp;#62;&amp;#10;  &amp;#10;  &amp;#60;dependencies&amp;#62;&amp;#10;    &amp;#60;dependency&amp;#62;&amp;#10;      &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62;&amp;#10;      &amp;#60;artifactId&amp;#62;spring-boot-starter&amp;#60;/artifactId&amp;#62;&amp;#10;    &amp;#60;/dependency&amp;#62;&amp;#10;    &amp;#10;    &amp;#60;dependency&amp;#62;&amp;#10;      &amp;#60;groupId&amp;#62;org.springframework&amp;#60;/groupId&amp;#62;&amp;#10;      &amp;#60;artifactId&amp;#62;spring-web&amp;#60;/artifactId&amp;#62;&amp;#10;    &amp;#60;/dependency&amp;#62;&amp;#10;    &amp;#10;    &amp;#60;dependency&amp;#62;&amp;#10;      &amp;#60;groupId&amp;#62;com.fasterxml.jackson.core&amp;#60;/groupId&amp;#62;&amp;#10;      &amp;#60;artifactId&amp;#62;jackson-databind&amp;#60;/artifactId&amp;#62;&amp;#10;    &amp;#60;/dependency&amp;#62;&amp;#10;  &amp;#60;/dependencies&amp;#62;&amp;#10;  &amp;#10;  &amp;#60;build&amp;#62;&amp;#10;    &amp;#60;plugins&amp;#62;&amp;#10;      &amp;#60;plugin&amp;#62;&amp;#10;        &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62;&amp;#10;        &amp;#60;artifactId&amp;#62;spring-boot-maven-plugin&amp;#60;/artifactId&amp;#62;&amp;#10;      &amp;#60;/plugin&amp;#62;&amp;#10;    &amp;#60;/plugins&amp;#62;&amp;#10;  &amp;#60;/build&amp;#62;&amp;#10;&amp;#60;/project&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后新建两个bean类，用来响应json请求。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package consum;&amp;#10;&amp;#10;import com.fasterxml.jackson.annotation.JsonIgnoreProperties;&amp;#10;&amp;#10;@JsonIgnoreProperties(ignoreUnknown = true) //&amp;#21482;&amp;#22788;&amp;#29702;json&amp;#26684;&amp;#24335;&amp;#30340;&amp;#65292;&amp;#19981;&amp;#31526;&amp;#21512;&amp;#27492;&amp;#26684;&amp;#24335;&amp;#30340;&amp;#24573;&amp;#30053;&amp;#10;public class Quote &amp;#123;&amp;#10;  &amp;#10;  private String type;&amp;#10;  private Value value;&amp;#10;  &amp;#10;  public Quote() &amp;#123;&amp;#125;&amp;#10;  &amp;#10;  public String getType() &amp;#123;&amp;#10;    return type;&amp;#10;  &amp;#125;&amp;#10;&amp;#10;  public void setType(String type) &amp;#123;&amp;#10;    this.type = type;&amp;#10;  &amp;#125;&amp;#10;  &amp;#10;  public Value getValue() &amp;#123;&amp;#10;    return value;&amp;#10;  &amp;#125;&amp;#10;  &amp;#10;  public void setValue(Value value) &amp;#123;&amp;#10;    this.value = value;&amp;#10;  &amp;#125;&amp;#10;  &amp;#10;  @Override&amp;#10;  public String toString() &amp;#123;&amp;#10;    return &amp;#34;Quote&amp;#123;&amp;#34; +&amp;#10;        &amp;#34;type=&amp;#39;&amp;#34; + type + &amp;#39;\&amp;#39;&amp;#39; +&amp;#10;        &amp;#34;, value=&amp;#34; + value +&amp;#10;        &amp;#39;&amp;#125;&amp;#39;;&amp;#10;  &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package consum;&amp;#10;&amp;#10;import com.fasterxml.jackson.annotation.JsonIgnoreProperties;&amp;#10;&amp;#10;@JsonIgnoreProperties(ignoreUnknown = true)&amp;#10;public class Value &amp;#123;&amp;#10;  &amp;#10;  private Long id;&amp;#10;  private String quote;&amp;#10;  &amp;#10;  public Value() &amp;#123;&amp;#125;&amp;#10;  &amp;#10;  public Long getId() &amp;#123;&amp;#10;    return id;&amp;#10;  &amp;#125;&amp;#10;  &amp;#10;  public String getQuote() &amp;#123;&amp;#10;    return quote;&amp;#10;  &amp;#125;&amp;#10;  &amp;#10;  public void setId(Long id) &amp;#123;&amp;#10;    this.id = id;&amp;#10;  &amp;#125;&amp;#10;  &amp;#10;  public void setQuote(String quote) &amp;#123;&amp;#10;    this.quote = quote;&amp;#10;  &amp;#125;&amp;#10;  &amp;#10;  @Override&amp;#10;  public String toString() &amp;#123;&amp;#10;    return &amp;#34;Value&amp;#123;&amp;#34; +&amp;#10;        &amp;#34;id=&amp;#34; + id +&amp;#10;        &amp;#34;, quote=&amp;#39;&amp;#34; + quote + &amp;#39;\&amp;#39;&amp;#39; +&amp;#10;        &amp;#39;&amp;#125;&amp;#39;;&amp;#10;  &amp;#125;&amp;#10;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在Application类中调用我们的请求类。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package consum;&amp;#10;&amp;#10;import org.slf4j.Logger;&amp;#10;import org.slf4j.LoggerFactory;&amp;#10;import org.springframework.boot.CommandLineRunner;&amp;#10;import org.springframework.boot.SpringApplication;&amp;#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&amp;#10;import org.springframework.web.client.RestTemplate;&amp;#10;&amp;#10;@SpringBootApplication&amp;#10;public class Application implements CommandLineRunner &amp;#123;&amp;#10;  &amp;#10;  private static final Logger log = LoggerFactory.getLogger(Application.class);&amp;#10;  &amp;#10;  public static void main(String args[]) &amp;#123;&amp;#10;    SpringApplication.run(Application.class);&amp;#10;  &amp;#125;&amp;#10;&amp;#10;  @Override&amp;#10;  public void run(String... arg0) throws Exception &amp;#123;&amp;#10;    RestTemplate restTemplate = new RestTemplate();&amp;#10;    Quote quote = restTemplate.getForObject(&amp;#34;http://gturnquist-quoters.cfapps.io/api/random&amp;#34;, &amp;#10;          Quote.class);   //restTemplate&amp;#26041;&amp;#27861;&amp;#20250;&amp;#20351;&amp;#29992;jackson&amp;#30340;json&amp;#24211;&amp;#23558;json&amp;#36716;&amp;#25442;&amp;#20026;quote&amp;#23545;&amp;#35937;&amp;#10;    log.info(quote.toString()); //&amp;#23558;&amp;#36716;&amp;#25442;&amp;#21518;&amp;#30340;&amp;#20869;&amp;#23481;&amp;#35760;&amp;#24405;&amp;#21040;&amp;#26085;&amp;#24535;&amp;#65292;info&amp;#32423;&amp;#21035;&amp;#30340;&amp;#26085;&amp;#24535;&amp;#23558;&amp;#22312;&amp;#25511;&amp;#21046;&amp;#21488;&amp;#36755;&amp;#20986;&amp;#10;    &amp;#10;  &amp;#125;&amp;#10;  &amp;#10;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;这里介绍的是用Spring来发起一个http请求，请求的对方响应一个json数据，这里主要介绍对这个请求的发起和处理的过程。&lt;/p&gt;
&lt;p&gt;环境&lt;br&gt;java1.8&lt;br&gt;Ecplise&lt;br&gt;Maven3&lt;/p&gt;
&lt;p&gt;下面是主要的代码，首先是Maven的配置文件：&lt;/
    
    </summary>
    
    
      <category term="Java开发" scheme="http://zone.gaospot.com/tags/Java%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用Spring构建第一个RESTful服务</title>
    <link href="http://zone.gaospot.com/2016/06/24/%E4%BD%BF%E7%94%A8Spring%E6%9E%84%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AARESTful%E6%9C%8D%E5%8A%A1/"/>
    <id>http://zone.gaospot.com/2016/06/24/使用Spring构建第一个RESTful服务/</id>
    <published>2016-06-24T15:11:00.000Z</published>
    <updated>2016-06-24T15:06:20.110Z</updated>
    
    <content type="html">&lt;p&gt;最近打算重新学学java，突然发现RESTful这个东西好像蛮有趣的，找来资料学习，找到Spring官方网站的一些资料，这里就跟着官方网站的例子试验了下。记录下实践的过程，一则稳固记忆，二则温故知新。&lt;/p&gt;
&lt;p&gt;REST (Representational State Transfer)描述了一个架构样式的网络系统。REST的基本原理就是使用URI来描述资源，每个具体的资源在服务中都对应到一个URI中，数据的传输交流通过json或者是xml来实现，对资源的操作通过http中的方法来实现。RESTful是通过REST造出来的一个形容词，应该说没有具体的定义，他说描述的是一个规范或者说一系列的原则，符合这些规范和原则的我们就把他成为是RESTful。&lt;/p&gt;
&lt;p&gt;下面我们就来构建我们的第一个RESTful的Web服务，下面是开发相关的一些信息：&lt;br&gt;开发环境：Eclipse+Maven插件&lt;br&gt;框架：Spring&lt;br&gt;流程管理：Maven&lt;br&gt;Java版本：JDK1.8+&lt;/p&gt;
&lt;p&gt;最后实现的效果就是当我们访问如&lt;a href=&quot;http://localhost:8080/greeting这样的地址时会返回。如下所示的一个json字符串。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8080/greeting这样的地址时会返回。如下所示的一个json字符串。&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#34;id&amp;#34;:1,&amp;#34;content&amp;#34;:&amp;#34;Hello, World!&amp;#34;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的这个id是一个可以增长计数的一个ID，每一次访问的时候这个ID都会增长。&lt;/p&gt;
&lt;p&gt;1，在Eclipse（要已经安装了Maven插件）中新建一个Maven项目，这里格式选择jar，最好将项目编译为一个jar包，这样可以在其他任意地方使用。其他的随便填。&lt;/p&gt;
&lt;p&gt;2，编写Maven的配置文件poe.xml，文件内容如下。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;#62;&amp;#10;  &amp;#60;modelVersion&amp;#62;4.0.0&amp;#60;/modelVersion&amp;#62;&amp;#10;  &amp;#10;  &amp;#60;groupId&amp;#62;com.gaospot&amp;#60;/groupId&amp;#62;&amp;#10;  &amp;#60;artifactId&amp;#62;hello&amp;#60;/artifactId&amp;#62;&amp;#10;  &amp;#60;version&amp;#62;0.0.1-SNAPSHOT&amp;#60;/version&amp;#62;&amp;#10;  &amp;#10;  &amp;#60;parent&amp;#62;&amp;#10;  &amp;#9;&amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62;&amp;#10;  &amp;#9;&amp;#60;artifactId&amp;#62;spring-boot-starter-parent&amp;#60;/artifactId&amp;#62;&amp;#10;  &amp;#9;&amp;#60;version&amp;#62;1.3.5.RELEASE&amp;#60;/version&amp;#62;&amp;#10;  &amp;#60;/parent&amp;#62;&amp;#10;  &amp;#10;  &amp;#60;dependencies&amp;#62;&amp;#10;  &amp;#9;&amp;#60;dependency&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#60;artifactId&amp;#62;spring-boot-starter-web&amp;#60;/artifactId&amp;#62;&amp;#10;  &amp;#9;&amp;#60;/dependency&amp;#62;&amp;#10;  &amp;#9;&amp;#60;dependency&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#60;artifactId&amp;#62;spring-boot-starter-test&amp;#60;/artifactId&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#60;scope&amp;#62;test&amp;#60;/scope&amp;#62;&amp;#10;  &amp;#9;&amp;#60;/dependency&amp;#62;&amp;#10;  &amp;#9;&amp;#60;dependency&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#60;groupId&amp;#62;com.jayway.jsonpath&amp;#60;/groupId&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#60;artifactId&amp;#62;json-path&amp;#60;/artifactId&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#60;scope&amp;#62;test&amp;#60;/scope&amp;#62;&amp;#10;  &amp;#9;&amp;#60;/dependency&amp;#62;&amp;#10;  &amp;#60;/dependencies&amp;#62;&amp;#10;  &amp;#10;  &amp;#60;build&amp;#62;&amp;#10;  &amp;#9;&amp;#60;plugins&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#60;plugin&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#9;&amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#9;&amp;#60;artifactId&amp;#62;spring-boot-maven-plugin&amp;#60;/artifactId&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#60;/plugin&amp;#62;&amp;#10;  &amp;#9;&amp;#60;/plugins&amp;#62;&amp;#10;  &amp;#60;/build&amp;#62;&amp;#10;  &amp;#10;  &amp;#60;repositories&amp;#62;&amp;#10;  &amp;#9;&amp;#60;repository&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#60;id&amp;#62;spring-releases&amp;#60;/id&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#60;url&amp;#62;https://repo.spring.io/libs-release&amp;#60;/url&amp;#62;&amp;#10;  &amp;#9;&amp;#60;/repository&amp;#62;&amp;#10;  &amp;#60;/repositories&amp;#62;&amp;#10;  &amp;#10;  &amp;#60;pluginRepositories&amp;#62;&amp;#10;  &amp;#9;&amp;#60;pluginRepository&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#60;id&amp;#62;spring-releases&amp;#60;/id&amp;#62;&amp;#10;  &amp;#9;&amp;#9;&amp;#60;url&amp;#62;https://repo.spring.io/libs-release&amp;#60;/url&amp;#62;&amp;#10;  &amp;#9;&amp;#60;/pluginRepository&amp;#62;&amp;#10;  &amp;#60;/pluginRepositories&amp;#62;&amp;#10;  &amp;#10;&amp;#60;/project&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;dependencies引入的是这个项目所需要依耐的软件包。repositories指定这些软件包的下载地址。parent指出的是父模块，没搞明白这里为什么要使用这个参数，这里应该是只需要dependencies中指定了依耐就可以的。&lt;/p&gt;
&lt;p&gt;3、在源代码目录中新建一个包，在包里创建Bean，Control和Application，Application在这里是一个含有主函数的类，可以直接运行这个类来测试我们的应用。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package hello;&amp;#10;&amp;#10;public class Greeting &amp;#123;&amp;#10;&amp;#10;&amp;#9;private final long id;&amp;#10;&amp;#9;private final String content;&amp;#10;&amp;#9;&amp;#10;&amp;#9;public Greeting(long id, String content) &amp;#123;&amp;#10;&amp;#9;&amp;#9;this.id = id;&amp;#10;&amp;#9;&amp;#9;this.content = content;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#10;&amp;#9;public long getId() &amp;#123;&amp;#10;&amp;#9;&amp;#9;return id;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#10;&amp;#9;public String getContent() &amp;#123;&amp;#10;&amp;#9;&amp;#9;return content;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package hello;&amp;#10;&amp;#10;import java.util.concurrent.atomic.AtomicLong;&amp;#10;&amp;#10;import org.springframework.web.bind.annotation.RequestMapping;&amp;#10;import org.springframework.web.bind.annotation.RequestParam;&amp;#10;import org.springframework.web.bind.annotation.RestController;&amp;#10;&amp;#10;@RestController&amp;#10;public class GreetingController &amp;#123;&amp;#10;&amp;#9;&amp;#10;&amp;#9;private static final String template = &amp;#34;Hello, %s!&amp;#34;;&amp;#10;&amp;#9;private final AtomicLong counter = new AtomicLong();&amp;#10;&amp;#9;&amp;#10;&amp;#9;@RequestMapping(&amp;#34;/greeping&amp;#34;)&amp;#10;&amp;#9;public Greeting greeting(@RequestParam(value=&amp;#34;name&amp;#34;, defaultValue=&amp;#34;World&amp;#34;)String name) &amp;#123;&amp;#10;&amp;#9;&amp;#9;return new Greeting(counter.incrementAndGet(),&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;String.format(template, name));&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package hello;&amp;#10;&amp;#10;import org.springframework.boot.SpringApplication;&amp;#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&amp;#10;&amp;#10;@SpringBootApplication&amp;#10;public class Application &amp;#123;&amp;#10;&amp;#10;&amp;#9;public static void main(String[] args) &amp;#123;&amp;#10;&amp;#9;&amp;#9;SpringApplication.run(Application.class, args);&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4、现在源码都已经编写好了，可以测试运用了，运用运行后在浏览器中访问之间的那个地址就可以得到我们想要的结果了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近打算重新学学java，突然发现RESTful这个东西好像蛮有趣的，找来资料学习，找到Spring官方网站的一些资料，这里就跟着官方网站的例子试验了下。记录下实践的过程，一则稳固记忆，二则温故知新。&lt;/p&gt;
&lt;p&gt;REST (Representational State 
    
    </summary>
    
    
      <category term="Java开发" scheme="http://zone.gaospot.com/tags/Java%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>阿里云CDN架构</title>
    <link href="http://zone.gaospot.com/2016/06/13/%E9%98%BF%E9%87%8C%E4%BA%91CDN%E6%9E%B6%E6%9E%84/"/>
    <id>http://zone.gaospot.com/2016/06/13/阿里云CDN架构/</id>
    <published>2016-06-13T07:16:00.000Z</published>
    <updated>2016-06-13T07:22:55.775Z</updated>
    
    <content type="html">&lt;p&gt;最近在学习阿里云的文档，看到阿里的CDN架构图，觉得不错，留着看看。&lt;/p&gt;
&lt;p&gt;LVS做四层均衡负载&lt;br&gt;DR模式&lt;br&gt;双LVS做Active-Active互备&lt;br&gt;负载均衡算法采用wrr&lt;br&gt;Tengine做七层负载均衡：&lt;br&gt;阿里基于Nginx开发的高性能HTTP服务器，已经开源，详细请了解：&lt;a href=&quot;http://tengine.taobao.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tengine.taobao.org&lt;/a&gt;&lt;br&gt;主动健康检查&lt;br&gt;SPDY v3支持&lt;br&gt;Swift做HTTP缓存&lt;br&gt;高性能Cache&lt;br&gt;磁盘（SSD/SATA）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/aliyun-architecture-single.png&quot; alt=&quot;基础架构图&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/aliyun-architecture-001.png&quot; alt=&quot;部署架构图&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习阿里云的文档，看到阿里的CDN架构图，觉得不错，留着看看。&lt;/p&gt;
&lt;p&gt;LVS做四层均衡负载&lt;br&gt;DR模式&lt;br&gt;双LVS做Active-Active互备&lt;br&gt;负载均衡算法采用wrr&lt;br&gt;Tengine做七层负载均衡：&lt;br&gt;阿里基于Nginx开发的高性能
    
    </summary>
    
    
      <category term="产品说明" scheme="http://zone.gaospot.com/tags/%E4%BA%A7%E5%93%81%E8%AF%B4%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>raspberry内核编译和模块开发</title>
    <link href="http://zone.gaospot.com/2016/06/11/raspberry%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E5%92%8C%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/"/>
    <id>http://zone.gaospot.com/2016/06/11/raspberry内核编译和模块开发/</id>
    <published>2016-06-11T14:41:00.000Z</published>
    <updated>2016-06-13T02:04:55.950Z</updated>
    
    <content type="html">&lt;p&gt;因为打算学一学linux驱动编程了，特意买了一块raspberry来作为开发环境。直接通过镜像按照的内核并不能直接用来做模块开发，因为发行版自身是不带内核源码树的，但是模块开发这个是必要的。所有要进行内核模块开发第一步就是要编译内核。具体到不同版本的raspberry，编译方法有细微的差别，这个raspberry官方有一篇文档专门将这个。我这个内核的编译过程主要就是参考这篇 &lt;a href=&quot;https://www.raspberrypi.org/documentation/linux/kernel/building.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KERNEL BUILDING&lt;/a&gt; 文章的。内核编译有两种方法，一种是在raspberry本地编译，另一种是在另外一台机器上编译好然后考到raspberry的内存卡上。直接在raspberry上编译编译比较简单但是比较花时间，我编译花了大概一个多小时，我个人认为这速度还可以：）。另一种是在pc上交叉编译，得益于官方提供的交叉编译工具，raspberry kernel在pc上的编译过程也比较简单。我这里记录下我在raspberry上编译的过程。&lt;/p&gt;
&lt;h3 id=&quot;u5185_u6838_u7F16_u8BD1&quot;&gt;&lt;a href=&quot;#u5185_u6838_u7F16_u8BD1&quot; class=&quot;headerlink&quot; title=&quot;内核编译&quot;&gt;&lt;/a&gt;内核编译&lt;/h3&gt;&lt;p&gt;1、下载linux内核源码，我直接放在用户主目录了，这个在编译模块的时候是会用到的。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone --depth=1 https://github.com/raspberrypi/linux&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2、 安装缺少的依赖。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install bc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3、 内核配置，pi1和pi2,3不一样。我这里的是pi3，所以我只说明pi3的，pi1参考官方文档。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd linux&amp;#10;KERNEL=kernel7&amp;#10;make bcm2709_defconfig&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4、 编译安装内核和模块。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;make -j4 zImage modules dtbs&amp;#10;sudo make modules_install&amp;#10;sudo cp arch/arm/boot/dts/*.dtb /boot/&amp;#10;sudo cp arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/&amp;#10;sudo cp arch/arm/boot/dts/overlays/README /boot/overlays/&amp;#10;sudo scripts/mkknlimg arch/arm/boot/zImage /boot/$KERNEL.img&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5、 reboot或者开机重启下，使用uname看下内核版本是否发生了变化。&lt;/p&gt;
&lt;h3 id=&quot;u6A21_u5757_u5F00_u53D1&quot;&gt;&lt;a href=&quot;#u6A21_u5757_u5F00_u53D1&quot; class=&quot;headerlink&quot; title=&quot;模块开发&quot;&gt;&lt;/a&gt;模块开发&lt;/h3&gt;&lt;p&gt;我这里使用的是《LINUX设备驱动程序》这本书上的例子来做的。下面是一个过程的 记录。&lt;br&gt;1、 使用编辑软件编辑模块源代码，我的是hello.c&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;#60;linux/init.h&amp;#62;&amp;#10;#include &amp;#60;linux/module.h&amp;#62;&amp;#10;&amp;#10;MODULE_LICENSE(&amp;#34;Dual BSD/GPL&amp;#34;);&amp;#10;&amp;#10;static int hello_init(void)&amp;#10;&amp;#123;&amp;#10;    printk(KERN_ALERT &amp;#34;Hello, world\n&amp;#34;);&amp;#10;    return 0;&amp;#10;&amp;#125;&amp;#10;&amp;#10;static void hello_exit(void)&amp;#10;&amp;#123;&amp;#10;    printk(KERN_ALERT &amp;#34;Goodbye, cruel world\n&amp;#34;);&amp;#10;&amp;#125;&amp;#10;&amp;#10;module_init(hello_init);&amp;#10;module_exit(hello_exit);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2、 编辑Makefile文件，我这个比较简单只是用来测试用的。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;obj-m := hello.o&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3、 在命令行中编译模块。-C参数指定内核源码树位置，M为模块源码所在目录。modules没搞明白是干嘛的。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;make -C ~/linux M=/home/pi/workspace modules&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4、 模块的安装卸载及其输出的查看。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;insmod ./hello.ko&amp;#10;rmmod hello&amp;#10;tail -2 /var/log/syslog&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第一个简单的模块就这样编译完了，有了这些准备为我们后面的模块开发做准备。另外一些模块开发环境的配置方法可以参考&lt;a href=&quot;http://stackoverflow.com/questions/20167411/how-to-compile-a-kernel-module-for-raspberry-pi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;因为打算学一学linux驱动编程了，特意买了一块raspberry来作为开发环境。直接通过镜像按照的内核并不能直接用来做模块开发，因为发行版自身是不带内核源码树的，但是模块开发这个是必要的。所有要进行内核模块开发第一步就是要编译内核。具体到不同版本的raspberry，编译
    
    </summary>
    
    
      <category term="linux驱动编程" scheme="http://zone.gaospot.com/tags/linux%E9%A9%B1%E5%8A%A8%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>初次连接到我的树莓派</title>
    <link href="http://zone.gaospot.com/2016/06/03/%E5%88%9D%E6%AC%A1%E8%BF%9E%E6%8E%A5%E6%88%91%E7%9A%84%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    <id>http://zone.gaospot.com/2016/06/03/初次连接我的树莓派/</id>
    <published>2016-06-03T11:35:00.000Z</published>
    <updated>2016-06-08T05:45:27.690Z</updated>
    
    <content type="html">&lt;p&gt;几天前买了一个树莓派3，把一些相关的配件都装了上去之后。昨天有时间就连了下进入系统看了下。树莓派3是自带无线网卡和蓝牙的。然后我是没有显示器的。只能通过网络连接来管理树莓派了。我想到的办法就是先把树莓派通过网线连接到路由器上，然后通过路由器来查看树莓派的密码，然后连接到树莓派，再在树莓派中配置无线网卡信息，让其自动使用无线网卡连接，这样就可以不用一直连着网线了。然后将ip地址设置为静态密码，以后每次启动时，路由器都会自动将这个ip分配给树莓派。&lt;/p&gt;
&lt;p&gt;0、 安装系统，安装系统的过程非常简单的，直接使用Win32 Disk Imager安装下就好了。镜像下载可以在官网上下载。&lt;/p&gt;
&lt;p&gt;1、  将树莓派连接到路由&lt;br&gt;通过有线来连接，因为有线连接的好处是不需要密码，把线接上就可以使用了。接上网卡，接通电源，然后现在就可以连接树莓派了。在此之前第一步是要获取到树莓派的ip，第一次连的时候树莓派的ip地址是路由器随机分配的。进入路由器管理页面就可以看到。&lt;/p&gt;
&lt;p&gt;2、获取到了ip，树莓派的默认用户是pi，密码是raspberry。可以通过上面的信息登录了。具体登录工具通过ssh来登录。在ssh登录工具中输入ip，用户名和密码就可以了。如果是linux系统，可以使用下面的命令来登录。192.168.0.101是我的树莓派分配到的ip，以每个人的情况不同。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh pi@192.168.0.101&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3、登录之后修改网卡信息。修改之前可以先看下网卡信息，使用 &lt;code&gt;$ iftop&lt;/code&gt; 来查看。可以看到一个wlan0就是我的无线网卡了。后面通过vim配置网卡的信息。我的树莓派安装的是Raspbian。基于debian的，所以他的网卡路径和debian一样的。修改/etc/network/interfaces文件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;auto lo&amp;#10;iface lo inet loopback&amp;#10;iface eth0 inet dhcp&amp;#10;allow-hotplug wlan0&amp;#10;iface wlan0 inet static&amp;#10;wpa-ssid  netgear          #&amp;#20320;&amp;#35201;&amp;#36830;&amp;#25509;&amp;#30340;wifi ssid&amp;#10;wpa-psk  1234567890     #&amp;#20320;&amp;#30340;wpa&amp;#36830;&amp;#25509;&amp;#23494;&amp;#30721; &amp;#10;address 192.168.1.110     # &amp;#35774;&amp;#23450;&amp;#30340;&amp;#38745;&amp;#24577;IP&amp;#22320;&amp;#22336;&amp;#10;netmask 255.255.255.0     # &amp;#32593;&amp;#32476;&amp;#25513;&amp;#30721;&amp;#10;gateway 192.168.1.1      # &amp;#32593;&amp;#20851;&amp;#10;network 192.168.1.1      # &amp;#32593;&amp;#32476;&amp;#22320;&amp;#22336;&amp;#10;#wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf       #&amp;#27880;&amp;#37322;&amp;#25481;&amp;#36825;&amp;#19968;&amp;#34892;&amp;#10;iface default inet dhcp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后重启下就可以了，就可以进入到系统了。&lt;/p&gt;
&lt;p&gt;4、修改软件源，在我使用的时候，raspberry默认的官方源基本上没法用，非常的慢的。可以改成国内的源试试。下面的示例将源改为中科大的源。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim /etc/apt/source.list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;添加下面的内容。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deb http://mirrors.ustc.edu.cn/raspbian/raspbian wheezy main contrib non-free rpi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;几天前买了一个树莓派3，把一些相关的配件都装了上去之后。昨天有时间就连了下进入系统看了下。树莓派3是自带无线网卡和蓝牙的。然后我是没有显示器的。只能通过网络连接来管理树莓派了。我想到的办法就是先把树莓派通过网线连接到路由器上，然后通过路由器来查看树莓派的密码，然后连接到树莓
    
    </summary>
    
    
      <category term="智能硬件" scheme="http://zone.gaospot.com/tags/%E6%99%BA%E8%83%BD%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>nginx配合rtmp模块搭建流服务器</title>
    <link href="http://zone.gaospot.com/2016/06/03/nginx%E9%85%8D%E5%90%88rtmp%E6%A8%A1%E5%9D%97%E6%90%AD%E5%BB%BA%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://zone.gaospot.com/2016/06/03/nginx配合rtmp模块搭建流服务器/</id>
    <published>2016-06-03T03:35:00.000Z</published>
    <updated>2016-06-03T03:24:32.062Z</updated>
    
    <content type="html">&lt;p&gt;本篇博客通过介绍使用nginx的rtmp模块来使nginx服务支持rtmp协议，可以完成推流和播放的功能。博客的内容完全出自参考1，参考2比较完整还介绍了除了介绍rtmp还介绍了hls。这篇博客主要介绍rtmp相关的内容。&lt;/p&gt;
&lt;h3 id=&quot;u51C6_u5907&quot;&gt;&lt;a href=&quot;#u51C6_u5907&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;p&gt;首先你需要一台安装了linux系统的主机，无论是云主机啊什么的都可以，甚至是树莓派也没问题。window应该也是可以的，但不是这里使用的环境，如果是想在window下测试，可以再Google下看看。另外这里使用的linux发行版是ubuntu，实际使用的是ubuntu14.04。&lt;/p&gt;
&lt;h3 id=&quot;u5B89_u88C5nginx_u548Crtmp_u6A21_u5757&quot;&gt;&lt;a href=&quot;#u5B89_u88C5nginx_u548Crtmp_u6A21_u5757&quot; class=&quot;headerlink&quot; title=&quot;安装nginx和rtmp模块&quot;&gt;&lt;/a&gt;安装nginx和rtmp模块&lt;/h3&gt;&lt;p&gt;安装必要的库和工具。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于要安装rtmp模块，这里nginx的安装使用源码安装的方式。下面先下载nginx和rtmp模块源码。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ wget http://nginx.org/download/nginx-1.9.15.tar.gz&amp;#10;$ wget https://github.com/arut/nginx-rtmp-module/archive/master.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解压nginx源码和rtmp模块源码，准备编译安装nginx和rtmp模块。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ tar -zxvf nginx-1.9.15.tar.gz&amp;#10;$ unzip master.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进入nginx解压后的目录，指定rtmp模块的路径。编译安装nginx。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cd nginx-1.9.15&amp;#10;$ ./configure --with-http_ssl_module --add-module=../nginx-rtmp-module-master&amp;#10;$ make&amp;#10;$ sudo make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在nginx已经编译安装好了，启动nginx。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo /usr/local/nginx/sbin/nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问下nginx服务器看看，将浏览器地址指向http://&amp;lt; your server ip &amp;gt;/这时候应该可以nginx的欢迎页面。&lt;/p&gt;
&lt;h4 id=&quot;u914D_u7F6Enginx_u4F7F_u7528rtmp_u6A21_u5757&quot;&gt;&lt;a href=&quot;#u914D_u7F6Enginx_u4F7F_u7528rtmp_u6A21_u5757&quot; class=&quot;headerlink&quot; title=&quot;配置nginx使用rtmp模块&quot;&gt;&lt;/a&gt;配置nginx使用rtmp模块&lt;/h4&gt;&lt;p&gt;使用编辑器打开/usr/local/nginx/conf/nginx.conf文件并在最后加上，下面配置内容。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rtmp &amp;#123;&amp;#10;        server &amp;#123;&amp;#10;                listen 1935;&amp;#10;                chunk_size 4096;&amp;#10;&amp;#10;                application live &amp;#123;&amp;#10;                        live on;&amp;#10;                        record off;&amp;#10;                &amp;#125;&amp;#10;        &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;简单说明下这里的意思，这里就是配置了一个rtmp服务器，监听1935端口。接入点的名字叫做live。如果需要使用其他平台来进行拉流加速（播放加速，可以理解为给直播播放过程加个cdn，起到提高并发，加快速度的目的）的时候这个可能用的到。rtmp模块的完整配置说明参考：&lt;a href=&quot;https://github.com/arut/nginx-rtmp-module/wiki/Directives&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最后重启下nginx，让nginx加载新的配置文件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo /usr/local/nginx/sbin/nginx -s stop&amp;#10;$ sudo /usr/local/nginx/sbin/nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后的最后，测试。测试使用的软件还是obs。obs的使用可以参考前面的博客。大概的配置内容如下。&lt;/p&gt;
&lt;p&gt;Streaming Service: Custom&lt;br&gt;Server: rtmp://&amp;lt; your server ip &amp;gt;/live&lt;br&gt;Play Path/Stream Key: test&lt;/p&gt;
&lt;p&gt;这里的流id，test其实是可以随便填的。配置到这里我们自己的rtmp服务器就搭建完成了，这时候，如果需要的话，可以在配置一个拉流加速，配置的过程可以参考前面的博客，之前有一篇介绍推流加速的配置的，过程是类似的。&lt;/p&gt;
&lt;p&gt;参考：&lt;br&gt;&lt;a href=&quot;https://obsproject.com/forum/resources/how-to-set-up-your-own-private-rtmp-server-using-nginx.50/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;br&gt;How to set up your own private RTMP server using nginx&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.chinaunix.net/uid-26000296-id-4335063.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nginx搭建支持http和rtmp协议的流媒体服务器之一 &lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本篇博客通过介绍使用nginx的rtmp模块来使nginx服务支持rtmp协议，可以完成推流和播放的功能。博客的内容完全出自参考1，参考2比较完整还介绍了除了介绍rtmp还介绍了hls。这篇博客主要介绍rtmp相关的内容。&lt;/p&gt;
&lt;h3 id=&quot;u51C6_u5907&quot;&gt;
    
    </summary>
    
    
      <category term="运维相关" scheme="http://zone.gaospot.com/tags/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>GTID模式下主从同步错误解决</title>
    <link href="http://zone.gaospot.com/2016/05/31/GTID%E6%A8%A1%E5%BC%8F%E4%B8%8B%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    <id>http://zone.gaospot.com/2016/05/31/GTID模式下主从同步错误解决/</id>
    <published>2016-05-30T18:35:00.000Z</published>
    <updated>2016-06-03T03:19:35.746Z</updated>
    
    <content type="html">&lt;h3 id=&quot;GTID_u7B80_u4ECB&quot;&gt;&lt;a href=&quot;#GTID_u7B80_u4ECB&quot; class=&quot;headerlink&quot; title=&quot;GTID简介&quot;&gt;&lt;/a&gt;GTID简介&lt;/h3&gt;&lt;h4 id=&quot;u4EC0_u4E48_u662FGTID&quot;&gt;&lt;a href=&quot;#u4EC0_u4E48_u662FGTID&quot; class=&quot;headerlink&quot; title=&quot;什么是GTID&quot;&gt;&lt;/a&gt;什么是GTID&lt;/h4&gt;&lt;p&gt;GTID(Global Transaction ID)是对于一个已提交事务的编号，并且是一个全局唯一的编号。&lt;br&gt;GTID实际上是由UUID+TID组成的。其中UUID是一个MySQL实例的唯一标识。TID代表了该实例上已经提交的事务数量，并且随着事务提交单调递增。下面是一个GTID的具体形式&lt;/p&gt;
&lt;p&gt;3E11FA47-71CA-11E1-9E33-C80AA9429562:23&lt;br&gt;更详细的介绍可以参见：官方文档&lt;/p&gt;
&lt;h3 id=&quot;GTID_u7684_u4F5C_u7528&quot;&gt;&lt;a href=&quot;#GTID_u7684_u4F5C_u7528&quot; class=&quot;headerlink&quot; title=&quot;GTID的作用&quot;&gt;&lt;/a&gt;GTID的作用&lt;/h3&gt;&lt;p&gt;那么GTID功能的目的是什么呢？具体归纳主要有以下两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据GTID可以知道事务最初是在哪个实例上提交的&lt;/li&gt;
&lt;li&gt;GTID的存在方便了Replication的Failover&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于GTID这个的更多说明可以参考网上搜来的这篇文章：&lt;a href=&quot;http://www.cnblogs.com/cenalulu/p/4309009.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/cenalulu/p/4309009.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;u4E3B_u4ECE_u540C_u6B65_u9519_u8BEF_u7684_u4E00_u822C_u5904_u7406_u529E_u6CD5&quot;&gt;&lt;a href=&quot;#u4E3B_u4ECE_u540C_u6B65_u9519_u8BEF_u7684_u4E00_u822C_u5904_u7406_u529E_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;主从同步错误的一般处理办法&quot;&gt;&lt;/a&gt;主从同步错误的一般处理办法&lt;/h3&gt;&lt;p&gt;一般来说遇到主从同步错误都会先执行下 &lt;code&gt;mysql&amp;gt; show slave status\G&lt;/code&gt; 检查下从库上两个IO线程的情况，在判断接下来改如何处理。一般的处理步骤在从库设置sql_slave_skip_counter。&lt;br&gt;1、 停止slave: stop slave;”,&lt;br&gt;2、 设置跳过slave同步语句数： set global sql_slave_skip_counter = 1;”,&lt;br&gt;3、 启动slave： start slave;”,&lt;br&gt;4、 确认同步是否正确： show slave status G 确认”,&lt;/p&gt;
&lt;p&gt;但是当从库开启了GTID时，执行set global sql_slave_skip_counter = 1;时会报错。报错如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR 1858 (HY000): sql_slave_skip_counter can not be set when the server is run&amp;#10;ning with @@GLOBAL.GTID_MODE = ON. Instead, for each transaction that you want t&amp;#10;o skip, generate an empty transaction with the same GTID as the transaction&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个意思是说开启了GTID_MODE不能跳过。&lt;br&gt;在我们执行show slave status\G;时，有下面两行是关于这个GTID的需要注意。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Retrieved_Gtid_Set: a99ac96f-18de-11e6-b507-525400da7a6f:172-1620&amp;#10;Executed_Gtid_Set: 3e5bec07-1ced-11e6-8f7c-525400bf7a4d:1-7,&amp;#10;a99ac96f-18de-11e6-b507-525400da7a6f:1-1581&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这次主从同步在执行a99ac96f-18de-11e6-b507-525400da7a6f:1582这个GTID的事务时候失败。&lt;br&gt;这个事务向数据库里面插了一条记录，而这条记录在从库上已经被插入过了。插入的GTID是：3e5bec07-1ced-11e6-8f7c-525400bf7a4d:3。从库已经从主库拿到172-1620了，但是实际executed的只有到1581，那说明执行卡在1582了&lt;/p&gt;
&lt;p&gt;解决方法是在从库上跳过a99ac96f-18de-11e6-b507-525400da7a6f:1582这个GTID的执行。可以在从库执行如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; STOP SLAVE;&amp;#10;&amp;#10;Query OK, 0 rows affected (0.00 sec)&amp;#10;mysql&amp;#62; SET SESSION GTID_NEXT = &amp;#8217;a99ac96f-18de-11e6-b507-525400da7a6f:1582&amp;#8242;;&amp;#10;Query OK, 0 rows affected (0.00 sec)&amp;#10;mysql&amp;#62; BEGIN; COMMIT;&amp;#10;Query OK, 0 rows affected (0.00 sec)&amp;#10;Query OK, 0 rows affected (0.00 sec)&amp;#10;&amp;#10; &amp;#10;&amp;#10;mysql&amp;#62; SET SESSION GTID_NEXT = AUTOMATIC;&amp;#10;&amp;#10;Query OK, 0 rows affected (0.00 sec)&amp;#10;&amp;#10;mysql&amp;#62; START SLAVE;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后他就会跳过这个事务继续往下执行了&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GTID_u7B80_u4ECB&quot;&gt;&lt;a href=&quot;#GTID_u7B80_u4ECB&quot; class=&quot;headerlink&quot; title=&quot;GTID简介&quot;&gt;&lt;/a&gt;GTID简介&lt;/h3&gt;&lt;h4 id=&quot;u4EC0_u4E48_u662FGTID&quot;&gt;&lt;a hre
    
    </summary>
    
    
      <category term="数据库管理" scheme="http://zone.gaospot.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>UCDN配置过程</title>
    <link href="http://zone.gaospot.com/2016/05/31/UCDN%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B/"/>
    <id>http://zone.gaospot.com/2016/05/31/UCDN配置过程/</id>
    <published>2016-05-30T16:06:00.000Z</published>
    <updated>2016-06-08T05:45:27.658Z</updated>
    
    <content type="html">&lt;h4 id=&quot;u66F4_u65B0&quot;&gt;&lt;a href=&quot;#u66F4_u65B0&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/#1&quot;&gt;2016/6/8 添加CDN排错过程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;原本的需求是这样的，我本来打算给我的博客套一层cdn的，但是不行。我的博客是放在github page上的，原因可能是github有限制。这个以后再来研究下。后来我干脆改变了思路，配置个加速看看，走走这个过程。了解下配置的细节。我这里配置的过程就是一般加速的配置过程，没有什么特殊的。&lt;/p&gt;
&lt;h3 id=&quot;u8FC7_u7A0B_u8BF4_u660E&quot;&gt;&lt;a href=&quot;#u8FC7_u7A0B_u8BF4_u660E&quot; class=&quot;headerlink&quot; title=&quot;过程说明&quot;&gt;&lt;/a&gt;过程说明&lt;/h3&gt;&lt;p&gt;1、控制配置加速域名。一共下面这些框框是要填的，关于各个框中内容的说明参考下面的。提交申请之后大概几十分钟就能配置好，配置好后在在域名供应商那边配置下cname记录就可以通过加速域名访问了。&lt;br&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/CDN%E5%8A%A0%E9%80%9F%E9%85%8D%E7%BD%AE.png&quot; alt=&quot;CDN配置&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;加速域名，指需要使用cdn加速的域名，比如：example.com，不能以http或者https开头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加速区域，目前支持国内和国外加速，默认为国内加速。流量计费模式下，只有购买了国外流量才能选择国外加速区域，带宽计费模式没有限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试url，请输入一个文件的url地址，用于测试网址的连通性和可用性，域名要与前面填写的加速域名一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;源站，指创建加速域名对应的ip。支持多个回源ip或者一个回源域名。如果是多个回源ip是以访问最快策略去调用多个ip，如果是回源域名，cdn会先从回源域名获取访问ip，再回源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、在控制配置好后还需要在域名供应商那边做一次配置。做cname的过程可以参考下面的配置。注意每个加速的cname都是不一样的。请从您的CDN控制复制CDN域名。&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/CDN%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE.png&quot; alt=&quot;CDN配置&quot;&gt;&lt;/p&gt;
&lt;p&gt;3、验证方法就是通过访问上面的测试连接，看http头部是否是hit的来判断。具体参考这里：&lt;a href=&quot;https://docs.ucloud.cn/upd-docs/ucdn/faq.html#id3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.ucloud.cn/upd-docs/ucdn/faq.html#id3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3 id=&quot;1&quot;&gt;CDN排错过程&lt;/h3&gt;&lt;br&gt;使用CDN的时候可能会遇到各种各样的问题，这里不是针对每个特定的问题，或者是特定类型的问题来说的，这里是概述一个大概的过程。&lt;p&gt;&lt;/p&gt;
&lt;p&gt;假设加速域名为www.a.com。&lt;br&gt;1、检查是否使用了CDN加速。ping www.a.com看看解析出来的ip是否为cdn的节点ip。获取到节点ip之后，使用ip查询工具，如ipip.net查询对应的ip是否离访问者近，近不近这个不好具体说。最起码来说不应该出现访问到其他相距较远的省份去。&lt;/p&gt;
&lt;p&gt;2、回源测试。在访问者的电脑上将加速域名绑定到源站ip，在win上是通过修改hosts文件来做的。lin上可以修改host文件，但是不用这么麻烦，可以直接使用curl的命令来实现回源访问。下面两个命令都可以。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -I &amp;#39;http://www.domain.com/&amp;#39; -x 10.10.10.10:80&amp;#10;curl -I &amp;#39;http://10.10.10.10/&amp;#39; -x &amp;#39;Host:www.domain.com&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将浏览器缓存清除并重新打开，再次访问则是回源访问效果，若依然访问异常，说明源站访问异常，请直接排查源站服务。&lt;/p&gt;
&lt;p&gt;3、检查CDN配置，对着产品文档看看具体配置是否有错。&lt;/p&gt;
&lt;p&gt;4、检查源站服务器是否有安全限制。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;u66F4_u65B0&quot;&gt;&lt;a href=&quot;#u66F4_u65B0&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/#1&quot;&gt;2016/6/8 添加CDN排错过程&lt;/a&gt;&lt;/li&gt;
&lt;/ul
    
    </summary>
    
    
      <category term="产品说明" scheme="http://zone.gaospot.com/tags/%E4%BA%A7%E5%93%81%E8%AF%B4%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>直播（ULive）架构</title>
    <link href="http://zone.gaospot.com/2016/05/25/%E7%9B%B4%E6%92%AD%EF%BC%88Ulive%EF%BC%89%E6%9E%B6%E6%9E%84/"/>
    <id>http://zone.gaospot.com/2016/05/25/直播（Ulive）架构/</id>
    <published>2016-05-25T13:29:00.000Z</published>
    <updated>2016-05-25T13:30:11.105Z</updated>
    
    <content type="html">&lt;p&gt;前面有两篇博客介绍了云直播的使用，这篇博客介绍ulive的架构是如何做的，这里主要是通过整理公开资料写的这篇博客。主要内容都引用自UCloud流媒体研发总监曾凯源分享内容。这篇文章在参考中给出了。&lt;/p&gt;
&lt;p&gt;文章首先介绍的是直播的应用场景，根据不同的场景来提出不同的需求，再跟进需求来开发产品我觉得这是一个很重要的思想。直播的架构经历了多次的演变，从简单到复杂，从不可靠到可靠的一个变化过程。这里主要就介绍下最后的架构。最后的架构由oc，区域三通机房和合作cdn共同解决。他们的引入无法为了解决两个问题，降低主播推流的延时和用户播放的延时。同时oc的引入降低了BGP机房的压力。同时区域三通点的引入，为BGP机房做容灾，对于同一区域如都在华东的推流和分发，直接走区域三通机房，BGP机房和三通机房部署多个，故障是只要调整路由即可。下面给出一张图做为说明：&lt;br&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/%E7%9B%B4%E6%92%AD%E6%9E%B6%E6%9E%84&quot; alt=&quot;直播架构&quot;&gt;&lt;br&gt;参考：&lt;br&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxOTAzMDEwMA==&amp;amp;mid=2652499688&amp;amp;idx=1&amp;amp;sn=d8ce74eed7ca7e2e9de0e66a6aef0494&amp;amp;scene=2&amp;amp;srcid=0505OgZbZXhyuaRxdGSNJVon&amp;amp;from=timeline&amp;amp;isappinstalled=0&amp;amp;pass_ticket=YoVPy4HOG/PZEe5kIFWtZK10BedpyT9k7etx3R03J7s=#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;直播云平台架构如何构建？【 有料】&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NDE0MjI4MA==&amp;amp;mid=2656298621&amp;amp;idx=1&amp;amp;sn=5088b182777331106786b55d7f3f657d&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于直播，所有的技术细节都在这里了（一）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NDE0MjI4MA==&amp;amp;mid=2656298657&amp;amp;idx=1&amp;amp;sn=d3e649f5809421b09a97b863809825a1&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于直播，所有的技术细节都在这里了（二）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5NDE0MjI4MA==&amp;amp;mid=2656298664&amp;amp;idx=1&amp;amp;sn=e5844d067c1a04673bcdeb007ad6b05c&amp;amp;scene=1&amp;amp;srcid=0516uvDRnn3CUBHxCGjPPsOK&amp;amp;pass_ticket=YoVPy4HOG/PZEe5kIFWtZK10BedpyT9k7etx3R03J7s=#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于直播，所有的技术细节都在这里了（三）&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前面有两篇博客介绍了云直播的使用，这篇博客介绍ulive的架构是如何做的，这里主要是通过整理公开资料写的这篇博客。主要内容都引用自UCloud流媒体研发总监曾凯源分享内容。这篇文章在参考中给出了。&lt;/p&gt;
&lt;p&gt;文章首先介绍的是直播的应用场景，根据不同的场景来提出不同的需求
    
    </summary>
    
    
      <category term="产品说明" scheme="http://zone.gaospot.com/tags/%E4%BA%A7%E5%93%81%E8%AF%B4%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>云直播（ULive）进阶使用</title>
    <link href="http://zone.gaospot.com/2016/05/24/%E7%9B%B4%E6%92%AD%EF%BC%88ulive%EF%BC%89%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://zone.gaospot.com/2016/05/24/直播（ulive）进阶使用/</id>
    <published>2016-05-24T11:06:00.000Z</published>
    <updated>2016-05-30T16:33:32.593Z</updated>
    
    <content type="html">&lt;h4 id=&quot;u66F4_u65B0&quot;&gt;&lt;a href=&quot;#u66F4_u65B0&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h4&gt;&lt;p&gt;2016年5月30 增加产品功能说明&lt;/p&gt;
&lt;p&gt;之前有一篇博客介绍&lt;a href=&quot;http://zone.gaospot.com/2016/05/09/%E4%BA%91%E7%9B%B4%E6%92%AD%EF%BC%88ULive%EF%BC%89%E5%88%9D%E4%BD%93%E9%AA%8C/&quot;&gt;ulive初次使用&lt;/a&gt;的，文中通过介绍使用ucloud提供的测试推拉流域名来进行直播平台的使用。这篇博客则是完整的介绍从推流域名的创建到播放的完整过程。其中推拉流域名都使用我们自己配置的域名。&lt;/p&gt;
&lt;h3 id=&quot;u62C9_u6D41_u914D_u7F6E&quot;&gt;&lt;a href=&quot;#u62C9_u6D41_u914D_u7F6E&quot; class=&quot;headerlink&quot; title=&quot;拉流配置&quot;&gt;&lt;/a&gt;拉流配置&lt;/h3&gt;&lt;p&gt;首先到ULive条目下，点击创建加速按钮，选择直播推流加速。然后可以按照界面中示例的进行配置。&lt;br&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/%E6%8E%A8%E6%B5%81%E9%85%8D%E7%BD%AE.png&quot; alt=&quot;创建推流&quot;&gt;&lt;br&gt;下面对其中各项做个说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推流域名：指流上传的域名，这个主要是配置在需要上传端的工具中的，如使用sdk推流则在sdk中配置，如使用obs则在obs中配置。&lt;/li&gt;
&lt;li&gt;接入点：这个可以随便填的。相当于是区别用户流的一个点。&lt;/li&gt;
&lt;li&gt;播放域名：这两个域名是用来播放直播的，可以都勾选上。rtmp协议主要用在pc web等等环境中，而hls主要用在移动端，如手机web中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建加速的申请提交之后大概半个小时到一个小时之间应该就能配好。在配置中时，也会提供一个推流域名的cname记录给您配置下这个cname记录，在配置好以后会提供播放的cname记录。配置好的加速大概是这个样子的。&lt;br&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/%E7%9B%B4%E6%92%AD%E8%AF%A6%E6%83%85.png&quot; alt=&quot;直播配置好的样子&quot;&gt;&lt;/p&gt;
&lt;p&gt;直播加申请好以后，获得了上面的cname记录之后就可以进行cname的配置。cname在域名提供商哪里进行配置，下面是我的配置示例。&lt;br&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/cname%E9%85%8D%E7%BD%AE.png&quot; alt=&quot;直播cname配置&quot;&gt;&lt;/p&gt;
&lt;p&gt;进过上面的一系列配置，使用直播过程中在ucloud平台这边的配置也就完成了，下面可以通过配置的推流域名和拉流域名来进行相应的视频上传下播放操作了。&lt;/p&gt;
&lt;h3 id=&quot;u89C6_u9891_u63A8_u6D41_u548C_u64AD_u653E&quot;&gt;&lt;a href=&quot;#u89C6_u9891_u63A8_u6D41_u548C_u64AD_u653E&quot; class=&quot;headerlink&quot; title=&quot;视频推流和播放&quot;&gt;&lt;/a&gt;视频推流和播放&lt;/h3&gt;&lt;p&gt;下面安装推流和播放的顺序来说明在进行相应操作的时候应该使用的工具和具体的场合。&lt;/p&gt;
&lt;h4 id=&quot;u63A8_u6D41&quot;&gt;&lt;a href=&quot;#u63A8_u6D41&quot; class=&quot;headerlink&quot; title=&quot;推流&quot;&gt;&lt;/a&gt;推流&lt;/h4&gt;&lt;p&gt;推流主要是移动端，移动端主要是是sdk来自行开发相应的软件实现直播上传的工作。pc端这里只说有一个obs。&lt;br&gt;pc端：这里主要介绍obs，其他情况不做说明。&lt;br&gt;Android app：&lt;a href=&quot;https://docs.ucloud.cn/upd-docs/ulive/ULive_Android_SDK.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.ucloud.cn/upd-docs/ulive/ULive_Android_SDK.html&lt;/a&gt;&lt;br&gt;ISO app：&lt;a href=&quot;https://docs.ucloud.cn/upd-docs/ulive/ULive_IOS_SDK.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.ucloud.cn/upd-docs/ulive/ULive_IOS_SDK.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;u64AD_u653E&quot;&gt;&lt;a href=&quot;#u64AD_u653E&quot; class=&quot;headerlink&quot; title=&quot;播放&quot;&gt;&lt;/a&gt;播放&lt;/h4&gt;&lt;p&gt;首先如果不愿安装任何软件的话，可以使用web端的rtmp拉流测试工具&lt;a href=&quot;http://www.cutv.com/demo/live_test.swf。或者安装了vlc的话，可以直接使用vlc来播放。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cutv.com/demo/live_test.swf。或者安装了vlc的话，可以直接使用vlc来播放。&lt;/a&gt;&lt;br&gt;pc web：&lt;a href=&quot;https://docs.ucloud.cn/upd-docs/uvideo/web_sdk.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.ucloud.cn/upd-docs/uvideo/web_sdk.html&lt;/a&gt;&lt;br&gt;pc app：任何支持rtmp协议的软件都可以。&lt;br&gt;iso app：&lt;a href=&quot;https://docs.ucloud.cn/upd-docs/ulive/ULive_Player_IOS_SDK.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.ucloud.cn/upd-docs/ulive/ULive_Player_IOS_SDK.html&lt;/a&gt;&lt;br&gt;Android app：&lt;a href=&quot;https://docs.ucloud.cn/upd-docs/ulive/ULive_Player_Android_SDK.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.ucloud.cn/upd-docs/ulive/ULive_Player_Android_SDK.html&lt;/a&gt;&lt;br&gt;iso and Android web：使用html5的video标签来实现，具体参见下面的代码。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://hls.gaospot.com/***（接入点）/1/playlist.m3u8&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;controls&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;controls&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;100%&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;your browser does not support the video tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;u4EA7_u54C1_u529F_u80FD_u8BF4_u660E&quot;&gt;&lt;a href=&quot;#u4EA7_u54C1_u529F_u80FD_u8BF4_u660E&quot; class=&quot;headerlink&quot; title=&quot;产品功能说明&quot;&gt;&lt;/a&gt;产品功能说明&lt;/h4&gt;&lt;p&gt;1、提供了API接口，支持API访问，访问的方法是其他API调用方式相同。需要先进行身份验证。详细说明请参考官方文档。&lt;/p&gt;
&lt;p&gt;2、支持推流鉴权。ULive通过采用对某些字段进行md5加密的方法来检验url是否合法。推流/播放的鉴权都可以做。只不过播放叫防盗链：）。此操作无法在控制完成，需要联系技术支持处理。&lt;/p&gt;
&lt;p&gt;3、支持回调功能。可以通过配置回调功能在推流开始、结束或者出现偶然性断开是通知用户。此操作无法在控制完成，需要联系技术支持处理。&lt;/p&gt;
&lt;p&gt;4、支持直播录制功能。录制好的视频直接保存在UVideo中。此功能直接支持，详细说明可以参考文档说明。&lt;a href=&quot;https://docs.ucloud.cn/upd-docs/ulive/live_stream.html#id5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.ucloud.cn/upd-docs/ulive/live_stream.html#id5&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;u66F4_u65B0&quot;&gt;&lt;a href=&quot;#u66F4_u65B0&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h4&gt;&lt;p&gt;2016年5月30 增加产品功能说明&lt;/p&gt;
&lt;p&gt;之前有一篇博客介绍&lt;a href=&quot;http://z
    
    </summary>
    
    
      <category term="产品说明" scheme="http://zone.gaospot.com/tags/%E4%BA%A7%E5%93%81%E8%AF%B4%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>Mysql备份与恢复</title>
    <link href="http://zone.gaospot.com/2016/05/21/Mysql%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <id>http://zone.gaospot.com/2016/05/21/Mysql备份与恢复/</id>
    <published>2016-05-21T03:35:00.000Z</published>
    <updated>2016-05-21T04:57:00.200Z</updated>
    
    <content type="html">&lt;h3 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;这里主要介绍通过mysqldump来导出数据和通过binlog导入数据的Mysql导入导出问题。&lt;/p&gt;
&lt;h3 id=&quot;u5907_u4EFD&quot;&gt;&lt;a href=&quot;#u5907_u4EFD&quot; class=&quot;headerlink&quot; title=&quot;备份&quot;&gt;&lt;/a&gt;备份&lt;/h3&gt;&lt;p&gt;常用工具：mysqldump,  xtrabackup&lt;/p&gt;
&lt;p&gt;mysqldump: 原生数据导出工具，以sql的形式导出保存&lt;br&gt;xtrabackup: percona团队提供的备份工具，基于文件系统的备份&lt;/p&gt;
&lt;h4 id=&quot;u5907_u4EFD_u5168_u5E93_u2014_u2014_u6700_u7B80_u5355_u7248_u672C&quot;&gt;&lt;a href=&quot;#u5907_u4EFD_u5168_u5E93_u2014_u2014_u6700_u7B80_u5355_u7248_u672C&quot; class=&quot;headerlink&quot; title=&quot;备份全库——最简单版本&quot;&gt;&lt;/a&gt;备份全库——最简单版本&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysqldump -h10.6.29.129 -uroot -p --all-databases &amp;#62; 10.6.29.129.sql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;mysqldump是直接屏幕输出，所以重定向后即可得到对应的备份文件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个备份命令很简单，但存在问题：&lt;/li&gt;
&lt;li&gt;会锁全库，影响业务&lt;/li&gt;
&lt;li&gt;有可能缺失常规表以外的内容，如存储过程&lt;/li&gt;
&lt;li&gt;未记录binlog同步点，不能用于主从同步以及利用binlog增量恢复&lt;br&gt;对于数据集较大的表，可能会吃掉server端大量内存&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;u5907_u4EFD_u5168_u5E93_u2014_u2014_u8FDB_u9636_u7248&quot;&gt;&lt;a href=&quot;#u5907_u4EFD_u5168_u5E93_u2014_u2014_u8FDB_u9636_u7248&quot; class=&quot;headerlink&quot; title=&quot;备份全库——进阶版&quot;&gt;&lt;/a&gt;备份全库——进阶版&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysqldump -h10.6.29.129 -uroot -p --all-databases --master-data=2 --routines --events --quick --single-transaction &amp;#62; 10.6.29.129.sql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;–master-data=2 表示需要记录导出数据当时主库的binlog位置&lt;/li&gt;
&lt;li&gt;–routines 表示导出存储过程（可视实际库表决定是否使用）&lt;/li&gt;
&lt;li&gt;–events 表示导出事件（可根据实际库表决定是否使用）&lt;/li&gt;
&lt;li&gt;–quick 表示让服务端不将结果集一次发送，而是分批发送，可减轻压力。另外，加上–master-data后默认是锁库的，可确保数据一致性，即导出数据和binlog位置的一致。&lt;/li&gt;
&lt;li&gt;–single-transaction 取消锁库并利用Innodb事务特性确保数据一致，但对MyISAM引擎不能确保一致性(即备份期间的写入，仍有可能被导出到备份文件中)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;u5907_u4EFD_u90E8_u5206database&quot;&gt;&lt;a href=&quot;#u5907_u4EFD_u90E8_u5206database&quot; class=&quot;headerlink&quot; title=&quot;备份部分database&quot;&gt;&lt;/a&gt;备份部分database&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysqldump -h10.6.29.129 -uroot -p --master-data=2 --routines &amp;#8211;events --quick --single-transaction --databases db1 db2 db3 &amp;#62; 10.6.29.129.sql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(将需要导出的库名，依次填写在databases参数后)&lt;/p&gt;
&lt;h4 id=&quot;u5907_u4EFD_u6307_u5B9Adatabase_u7684_u90E8_u5206_u8868&quot;&gt;&lt;a href=&quot;#u5907_u4EFD_u6307_u5B9Adatabase_u7684_u90E8_u5206_u8868&quot; class=&quot;headerlink&quot; title=&quot;备份指定database的部分表&quot;&gt;&lt;/a&gt;备份指定database的部分表&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysqldump -h10.6.29.129 -uroot &amp;#8211;p --master-data=2 --routines &amp;#8211;events --quick --single-transaction mydb table1 table2 &amp;#62; 10.6.29.129.sql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(先写明指定的database，然后紧跟需要备份的表名)&lt;/p&gt;
&lt;h3 id=&quot;u6570_u636E_u6062_u590D&quot;&gt;&lt;a href=&quot;#u6570_u636E_u6062_u590D&quot; class=&quot;headerlink&quot; title=&quot;数据恢复&quot;&gt;&lt;/a&gt;数据恢复&lt;/h3&gt;&lt;p&gt;直接利用mysqlclient以及冷备文件进行导入&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql -h10.6.29.129 -uroot -p &amp;#60; 10.6.29.129.sql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（简单易行，但要确保导入的库表，不会同时有业务在写入）&lt;/p&gt;
&lt;h4 id=&quot;u501F_u52A9binlog_u6062_u590D_u6570_u636E_u5E93&quot;&gt;&lt;a href=&quot;#u501F_u52A9binlog_u6062_u590D_u6570_u636E_u5E93&quot; class=&quot;headerlink&quot; title=&quot;借助binlog恢复数据库&quot;&gt;&lt;/a&gt;借助binlog恢复数据库&lt;/h4&gt;&lt;p&gt;在冷备数据的基础上，借助binlog可以恢复到冷备时间点至最新binlog之间的任意时刻。&lt;br&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/binlog%E6%81%A2%E5%A4%8D.png&quot; alt=&quot;利用binlog恢复到任意时间点&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先由于binlog二进制文件，要使用binlog必须先对binlog进行解析，解析的工具就是mysqlbinlog。&lt;br&gt;使用mysqlbinlog工具，对binlog文件进行解析&lt;br&gt;简单用法——&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysqlbinlog mysql.000004 &amp;#62; binlog.000004&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用mysqlbinlog工具，对binlog文件进行解析&lt;br&gt;进阶用法——&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysqlbinlog mysql.000004 --start-position=549212174 --stop-datetime=&amp;#39;2014-9-10 10:00&amp;#39; &amp;#62; binlog.000004.sql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;–start-position 表示从binlog的那个位置开始解析，而这个起始点可以通过备份时的master-data参数得到&lt;br&gt;–stop-datetime 表示只解析到哪个时间点的语句为止，可用于回档到某个指定时间点&lt;/p&gt;
&lt;p&gt;–start-datetime 从那个时间点开始，但通常还是尽量使用start-position，更为准确&lt;br&gt;–verbose, -v 使用方式：-vv, -vvv，常用于ROW模式的详细输出&lt;/p&gt;
&lt;p&gt;恢复的具体操作方法，就是先通过冷备份将数据库还原到备份点，然后在通过binlog生成从冷备点恢复的sql。分别执行下两个sql文件就可以了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;这里主要介绍通过mysqldump来导出数据和通过binlog导入数据的Mysql导入导出问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库管理" scheme="http://zone.gaospot.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Mysql问题分析工具</title>
    <link href="http://zone.gaospot.com/2016/05/19/Mysql%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
    <id>http://zone.gaospot.com/2016/05/19/Mysql问题分析工具/</id>
    <published>2016-05-19T08:55:00.000Z</published>
    <updated>2016-05-19T08:56:24.035Z</updated>
    
    <content type="html">&lt;h3 id=&quot;u5E38_u7528_u5DE5_u5177&quot;&gt;&lt;a href=&quot;#u5E38_u7528_u5DE5_u5177&quot; class=&quot;headerlink&quot; title=&quot;常用工具&quot;&gt;&lt;/a&gt;常用工具&lt;/h3&gt;&lt;p&gt;top、iostat查看CPU/IO情况&lt;br&gt;慢查询日志+explain&lt;br&gt;获取数据库的各种运行状态，如”show  engine innodb status”， 查询information_schema库里的INNODB_TRX、PROCESSLIST等状态表&lt;br&gt;tcpdump&lt;br&gt;strace&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# top -d0.5 -c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以0.5秒频率刷新，查看mysql的CPU使用情况，主要是看下cpu占用率。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# iostat -txm 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;观察磁盘使用情况，util使用率越高，表示磁盘越繁忙&lt;/p&gt;
&lt;h3 id=&quot;u6162_u67E5_u8BE2&quot;&gt;&lt;a href=&quot;#u6162_u67E5_u8BE2&quot; class=&quot;headerlink&quot; title=&quot;慢查询&quot;&gt;&lt;/a&gt;慢查询&lt;/h3&gt;&lt;p&gt;慢查询日志slowlog，使用mysqldumpslow可以统计分析出最消耗时间的TopN。&lt;br&gt;得到具体语句后，使用explain进行分析，进而得到优化方法。&lt;/p&gt;
&lt;h3 id=&quot;u6570_u636E_u5E93_u72B6_u6001&quot;&gt;&lt;a href=&quot;#u6570_u636E_u5E93_u72B6_u6001&quot; class=&quot;headerlink&quot; title=&quot;数据库状态&quot;&gt;&lt;/a&gt;数据库状态&lt;/h3&gt;&lt;p&gt;查看所有连接的运行情况&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; show full processlist;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; select * from information_schema.processlist;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看innodb的实时状态，关注cache命中率、读写次数、有无死锁等&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; show  engine innodb status \G&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看事务运行情况&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; select * from information_schema.innodb_trx;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;u7F51_u7EDC_u53CA_u7CFB_u7EDF_u5206_u6790&quot;&gt;&lt;a href=&quot;#u7F51_u7EDC_u53CA_u7CFB_u7EDF_u5206_u6790&quot; class=&quot;headerlink&quot; title=&quot;网络及系统分析&quot;&gt;&lt;/a&gt;网络及系统分析&lt;/h3&gt;&lt;p&gt;tcpdump —— 抓取相关网络包&lt;br&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# tcpdump host 10.4.12.8 and port 3306 -i eth0 -w 10.4.12.8.pcap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;strace —— 查看进程的系统调用&lt;br&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# strace -p 12345    # 12345&amp;#20026;&amp;#30446;&amp;#26631;&amp;#36827;&amp;#31243;pid&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;u5E38_u7528_u5DE5_u5177&quot;&gt;&lt;a href=&quot;#u5E38_u7528_u5DE5_u5177&quot; class=&quot;headerlink&quot; title=&quot;常用工具&quot;&gt;&lt;/a&gt;常用工具&lt;/h3&gt;&lt;p&gt;top、iostat查看CPU/IO情况&lt;br&gt;
    
    </summary>
    
    
      <category term="数据库管理" scheme="http://zone.gaospot.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Mysql慢查询分析与优化</title>
    <link href="http://zone.gaospot.com/2016/05/18/Mysql%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <id>http://zone.gaospot.com/2016/05/18/Mysql慢查询分析与优化/</id>
    <published>2016-05-18T10:57:00.000Z</published>
    <updated>2016-05-18T10:57:16.554Z</updated>
    
    <content type="html">&lt;h3 id=&quot;u6982_u8FF0_uFF08_u6162_u67E5_u8BE2_u5B9A_u4E49_u4E0E_u5371_u5BB3_uFF09&quot;&gt;&lt;a href=&quot;#u6982_u8FF0_uFF08_u6162_u67E5_u8BE2_u5B9A_u4E49_u4E0E_u5371_u5BB3_uFF09&quot; class=&quot;headerlink&quot; title=&quot;概述（慢查询定义与危害）&quot;&gt;&lt;/a&gt;概述（慢查询定义与危害）&lt;/h3&gt;&lt;p&gt;慢查询——顾名思义，耗时很长、响应很慢的查询&lt;/p&gt;
&lt;p&gt;危害——&lt;br&gt;导致整个数据库响应变慢（过多消耗cpu或者io）&lt;br&gt;短连接场景下还可能引起耗尽连接数&lt;/p&gt;
&lt;h3 id=&quot;u6162_u67E5_u8BE2_u65E5_u5FD7_u76F8_u5173_u53C2_u6570_uFF08_u5F00_u542F_u6162_u67E5_u8BE2_uFF09&quot;&gt;&lt;a href=&quot;#u6162_u67E5_u8BE2_u65E5_u5FD7_u76F8_u5173_u53C2_u6570_uFF08_u5F00_u542F_u6162_u67E5_u8BE2_uFF09&quot; class=&quot;headerlink&quot; title=&quot;慢查询日志相关参数（开启慢查询）&quot;&gt;&lt;/a&gt;慢查询日志相关参数（开启慢查询）&lt;/h3&gt;&lt;p&gt;以下参数均是是在Mysql的配置文件/etc/my.cnf中配置的，配置在[mysqld]下。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数名&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;slow_query_log&lt;/td&gt;
&lt;td&gt;是否开启慢查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long_query_time&lt;/td&gt;
&lt;td&gt;查询消耗超过多少时间认为是慢查询，单位秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log_output&lt;/td&gt;
&lt;td&gt;日志的输出形式(FILE或者TABLE)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;slow-query-log-file&lt;/td&gt;
&lt;td&gt;慢查询的保存文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log-queries-not-using-indexes&lt;/td&gt;
&lt;td&gt;记录没有使用索引的查询&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;示例参数配置&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &amp;#24930;&amp;#26597;&amp;#35810;&amp;#30456;&amp;#20851;&amp;#10;slow_query_log = 1&amp;#10;long_query_time = 1&amp;#10;&amp;#10;# &amp;#26085;&amp;#24535;&amp;#30340;&amp;#36755;&amp;#20986;&amp;#24418;&amp;#24335;&amp;#10;log_output = FILE&amp;#10;slow-query-log-file = /var/log/mysql/mysql-slow.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改参数之后记得重启mysqld服务，可以在mysql命令行验证修改是否生效。命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; show global variables like &amp;#39;slow%&amp;#39; ;&amp;#10;mysql&amp;#62; show global variables like &amp;#39;long%&amp;#39; ;&amp;#10;mysql&amp;#62; show global variables like &amp;#39;log%&amp;#39; ;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;经过上面的配置mysql的慢日志就打开了，然后mysql就会记录各条查询相关信息了，下面是一个人为构造的演示例子。&lt;/p&gt;
&lt;h3 id=&quot;u6F14_u793A_u4F8B_u5B50_uFF08_u81EA_u9020_u6162_u67E5_u8BE2_uFF1A_uFF09&quot;&gt;&lt;a href=&quot;#u6F14_u793A_u4F8B_u5B50_uFF08_u81EA_u9020_u6162_u67E5_u8BE2_uFF1A_uFF09&quot; class=&quot;headerlink&quot; title=&quot;演示例子（自造慢查询：）&quot;&gt;&lt;/a&gt;演示例子（自造慢查询：）&lt;/h3&gt;&lt;p&gt;下面是用来新建测试用的表和查询语句的sql命令。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; use test;&amp;#10;mysql&amp;#62; create table b (id int not null primary key, name varchar(100) not null);&amp;#10;mysql&amp;#62; select sleep(1);&amp;#10;mysql&amp;#62; select * from b where name = &amp;#39;a&amp;#39;;&amp;#10;mysql&amp;#62; select * from b where name = &amp;#39;b&amp;#39;;&amp;#10;mysql&amp;#62; select * from b where name = &amp;#39;c&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以直接看下mysql-slow.log中的内容，cat或vim都行，只是看一眼：）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# cat /var/log/mysql/mysql-slow.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是文件中个参数意义的介绍：&lt;/p&gt;
&lt;p&gt;Querytime: sql的请求执行时间&lt;br&gt;Locktime: sql 等锁的时间&lt;br&gt;Rows_examined: sql处理过程中扫描的行数；通常，该值越大，对cpu/io消耗也就越大&lt;/p&gt;
&lt;h3 id=&quot;u6162_u67E5_u8BE2_u5206_u6790&quot;&gt;&lt;a href=&quot;#u6162_u67E5_u8BE2_u5206_u6790&quot; class=&quot;headerlink&quot; title=&quot;慢查询分析&quot;&gt;&lt;/a&gt;慢查询分析&lt;/h3&gt;&lt;p&gt;首先是慢查询分析工具——mysqldumpslow，示例用法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# mysqldumpslow -t 10 -s t /path/to/slow.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-t：返回前面多少条的数据，即top几；&lt;/li&gt;
&lt;li&gt;-s：排序方式。c , t , l , r 分别表示记录次数、时间、查询时间的多少、返回的记录数排序；ac , at , al , ar 表示相应的倒叙；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TABLE类型慢日志处理&lt;br&gt;直接做工具处理相对比较麻烦，但我们可以变相处理。&lt;br&gt;处理思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将mysql.slow_log表的数据转成日志文件形式&lt;/li&gt;
&lt;li&gt;然后再用mysqldumpslow进行分析&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里提供一个工具(python脚本，需要先安装MySQL-python依赖库)，可以将mysql.slow_log表导出成日志格式&lt;br&gt;&lt;a href=&quot;https://gist.github.com/sennajox/fdff82cc02b161d0141d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/sennajox/fdff82cc02b161d0141d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;例如，要列出2016-5-1至2016-5-18期间的慢查询&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# python slow_log_dump.py 10.6.29.129 3306 root 123456 &amp;#39;2016-5-1&amp;#39; &amp;#39;2016-5-18&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;u4F18_u5316_u5206_u6790&quot;&gt;&lt;a href=&quot;#u4F18_u5316_u5206_u6790&quot; class=&quot;headerlink&quot; title=&quot;优化分析&quot;&gt;&lt;/a&gt;优化分析&lt;/h3&gt;&lt;p&gt;记录slowlog仅仅是第一步，更重要的是找到慢查询的根源。&lt;br&gt;而这里，我们可以利用explain命令，对慢查询sql执行explain得到对应的执行计划进行分析，从而确定如何优化。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; explain select * from b where name = &amp;#39;a&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;各个参数说明&lt;br&gt;关键列名         |          含义&lt;br&gt;——————| ——————-&lt;br&gt;type          |    使用了什么查询方式，由好到差，依次为const &amp;gt; eq_ref &amp;gt; ref &amp;gt; range &amp;gt; index &amp;gt; ALL注意: index表示遍历索引；而ref表示使用非唯一的索引&lt;br&gt;key                 |   最终使用到的索引&lt;br&gt;ref        |      使用了索引的那一列，可能为列名或者const&lt;br&gt;rows  |       扫描的行数&lt;br&gt;extra    |  附加信息，比如”Using Where”、“Using Index”、“Using filesort”、“Using temporary”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/mysql%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%901.png&quot; alt=&quot;explain示例1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/mysql%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%902.png&quot; alt=&quot;explain示例2&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;u4F18_u5316_u8981_u70B9&quot;&gt;&lt;a href=&quot;#u4F18_u5316_u8981_u70B9&quot; class=&quot;headerlink&quot; title=&quot;优化要点&quot;&gt;&lt;/a&gt;优化要点&lt;/h3&gt;&lt;p&gt;1.严禁在MySQL执行复杂的计算，以免过多消耗CPU，把复杂的事情交给程序处理&lt;/p&gt;
&lt;p&gt;2.尽可能少用关联查询，如果不得不使用，最好不超过2个表，以免笛卡尔积过大，一方面增加读取磁盘几率，一方面有可能生成文件临时表，极大影响IO&lt;/p&gt;
&lt;p&gt;3.适当的使用索引，且仅对离散程度比较高的列使用，让索引的效果可以最大化；索引是牺牲了写性能来换取读性能，因此也不能过多&lt;/p&gt;
&lt;p&gt;4.控制单表的数据量，多作分库分表&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;u6982_u8FF0_uFF08_u6162_u67E5_u8BE2_u5B9A_u4E49_u4E0E_u5371_u5BB3_uFF09&quot;&gt;&lt;a href=&quot;#u6982_u8FF0_uFF08_u6162_u67E5_u8BE2_u5B9A_u4E49_u
    
    </summary>
    
    
      <category term="数据库管理" scheme="http://zone.gaospot.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Mysql主从配置</title>
    <link href="http://zone.gaospot.com/2016/05/17/Mysql%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://zone.gaospot.com/2016/05/17/Mysql主从配置/</id>
    <published>2016-05-17T15:36:00.000Z</published>
    <updated>2016-05-18T10:58:38.911Z</updated>
    
    <content type="html">&lt;h3 id=&quot;u5E38_u89C1mysql_u4E3B_u4ECE_u67B6_u6784&quot;&gt;&lt;a href=&quot;#u5E38_u89C1mysql_u4E3B_u4ECE_u67B6_u6784&quot; class=&quot;headerlink&quot; title=&quot;常见mysql主从架构&quot;&gt;&lt;/a&gt;常见mysql主从架构&lt;/h3&gt;&lt;p&gt;1.Master-Slave&lt;br&gt;2.级联&lt;br&gt;3.双Master互为主备&lt;/p&gt;
&lt;h3 id=&quot;u4E3B_u4ECE_u540C_u6B65_u539F_u7406&quot;&gt;&lt;a href=&quot;#u4E3B_u4ECE_u540C_u6B65_u539F_u7406&quot; class=&quot;headerlink&quot; title=&quot;主从同步原理&quot;&gt;&lt;/a&gt;主从同步原理&lt;/h3&gt;&lt;p&gt;下面的图说明了主从库之间是如何进行数据同步的，概括来讲就是主库通过把他的binlog推送给从库，从库通过binlog构建数据库来实现的，下面附上一张原理图：&lt;br&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86.PNG&quot; alt=&quot;主从同步原理&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以要求主库必须要打开binlog&lt;br&gt;集群的所有MySQL必须配置server-id参数，并确保唯一&lt;/p&gt;
&lt;h3 id=&quot;Master-Slave__u914D_u7F6E&quot;&gt;&lt;a href=&quot;#Master-Slave__u914D_u7F6E&quot; class=&quot;headerlink&quot; title=&quot;Master-Slave 配置&quot;&gt;&lt;/a&gt;Master-Slave 配置&lt;/h3&gt;&lt;p&gt;准备要做的就是配置server-id参数，这个参数是在mysql的配置文件中配置的，在这里是/etc/my.cnf。这里假设Master的server-id设置为1，Slave的server-id设置为2。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# vim /etc/my.cnf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先，主库要创建好专门用于同步的账号，例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; grant replication slave, replication client on *.* to  replication@&amp;#39;%&amp;#39; identified by &amp;#39;123456&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后，利用mysqldump从主库导出数据，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# mysqldump -h10.6.29.129 -uroot -p --all-databases --master-data=2 --routines --events --quick&amp;#62; 10.6.29.129.sql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;–master-data=2 表示需要记录导出数据当时主库的binlog位置&lt;br&gt;–routines 表示导出存储过程（可视实际库表决定是否使用）&lt;br&gt;–events 表示导出事件（可根据实际库表决定是否使用）&lt;br&gt;–quick 表示让服务端不将结果集一次发送，而是分批发送，可减轻压力&lt;br&gt;另外，加上–master-data后默认是锁库的，可确保数据一致性，即导出数据和binlog位置的一致。&lt;br&gt;对于Innodb引擎，可增加–single-transaction取消锁库并利用Innodb事务特性确保数据一致&lt;/p&gt;
&lt;p&gt;将备份sql从主库传到从库来，这里也可以直接在主库所在主机上操作，如果不在主库所在主机操作的话，可以使用scp传下。将导出的数据灌入到从库，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# mysql -uroot &amp;#60; 10.6.29.129.sql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从导出的数据文件的开头位置找到同步点&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# vim 10.6.29.129.sql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;找到类似下面的一段内容&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-- CHANGE MASTER TO MASTER_LOG_FILE=&amp;#39;mysql.000003&amp;#39;, MASTER_LOG_POS=600&amp;#65307;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;依据上面的语句构造sql语句，使用有SUPER权限的账号登陆到从库，设置同步信息，例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; CHANGE MASTER TO MASTER_LOG_FILE=&amp;#39;mysql.000003&amp;#39;, MASTER_LOG_POS=600, master_host=&amp;#39;10.6.29.129&amp;#39;, master_port=3306, master_user=&amp;#39;replication&amp;#39;, master_password=&amp;#39;123456&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;mysql&amp;gt; show slave status \G&lt;/code&gt;  检查同步信息是否正确，这里主要是检查Master相关的一些配置，如Master_Host等等，主要是检查我们上面执行命令是否生效。如果配置和我们执行的命令一致，则说明修改生效。&lt;/p&gt;
&lt;p&gt;执行&lt;code&gt;mysql&amp;gt; start slave;&lt;/code&gt; 启动同步，并检查同步状态。我在这里的时候遇到了一个错误，报错内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR 1200 (HY000): The server is not configured as slave; fix in config file or with CHANGE MASTER TO&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;网上搜了下，google到了一篇大神的文章，文章上将出现这个报错的原因一般是server-id的设置有问题，文章总结了解决这个问题的三个步骤：&lt;br&gt;第一，&lt;code&gt;show slave status \G&lt;/code&gt; 检查下从库的状态，对应我们上面的，看看change master to的修改是否生效了。&lt;/p&gt;
&lt;p&gt;第二，&lt;code&gt;SHOW VARIABLES LIKE &amp;#39;server_id&amp;#39;&lt;/code&gt; server_id是否是0或者1，1是默认值，作为从库无效的，改成其他的吧。我在执行这一步得时候就发现我的server_id是1。。。后来想想修改配置之后我们重启mysqld可能是这个导致的，我赶紧重启了下，好了。&lt;/p&gt;
&lt;p&gt;第三，主从都看下server_id的值，看看是否是一样的，是一样的也会导致问题，作者建议将server_id的值改为ip地址的最后几位，这样便于记忆而且不会重复。&lt;/p&gt;
&lt;p&gt;经过排查解决了上面的问题之后在&lt;code&gt;start slave;&lt;/code&gt; 没有报错了。最后在&lt;code&gt;show slave status \G&lt;/code&gt; 。这里主要是检查Slave_IO_Running和Slave_SQL_Running的情况，Slave_IO_Running/Slave_SQL_Running均为Yes，表示同步成功。&lt;/p&gt;
&lt;h3 id=&quot;u7EA7_u8054_u67B6_u6784&quot;&gt;&lt;a href=&quot;#u7EA7_u8054_u67B6_u6784&quot; class=&quot;headerlink&quot; title=&quot;级联架构&quot;&gt;&lt;/a&gt;级联架构&lt;/h3&gt;&lt;p&gt;每个作为Slave的MySQLDB只需要根据其对应主库设置同步信息即可，步骤与上一小节相同。&lt;/p&gt;
&lt;p&gt;但需要注意的是，默认情况下，从库执行relay-log中的SQL语句不会记录到BINLOG。&lt;br&gt;所以，处于中间层的MySQL配置项需要额外开启log_slave_updates=1。&lt;/p&gt;
&lt;p&gt;级联架构的示意图如下：&lt;br&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/%E7%BA%A7%E8%81%94%E5%8E%9F%E7%90%86.PNG&quot; alt=&quot;级联架构图&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Master-Master&quot;&gt;&lt;a href=&quot;#Master-Master&quot; class=&quot;headerlink&quot; title=&quot;Master-Master&quot;&gt;&lt;/a&gt;Master-Master&lt;/h3&gt;&lt;p&gt;首先，按普通的主从配置步骤将MasterB配置成MasterA的从库；然后，确保MasterB没有写入，通过show master status命令在MasterB上得到其同步点，再将MasterA配置成MasterB的从库。&lt;/p&gt;
&lt;p&gt;通常，为了简化逻辑，其中一个Master会设置为只读，正常只通过另外一个Master进行读写。&lt;br&gt;若要两边都写，为了避免自增id冲突，一般会设置奇偶错开，即一台的自增ID均为奇数，另一台均为偶数。这个要在业务中通过设置表属性设置的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;u5E38_u89C1mysql_u4E3B_u4ECE_u67B6_u6784&quot;&gt;&lt;a href=&quot;#u5E38_u89C1mysql_u4E3B_u4ECE_u67B6_u6784&quot; class=&quot;headerlink&quot; title=&quot;常见mysql主从架构&quot;
    
    </summary>
    
    
      <category term="数据库管理" scheme="http://zone.gaospot.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Mysql初始安装与配置</title>
    <link href="http://zone.gaospot.com/2016/05/17/Mysql%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>http://zone.gaospot.com/2016/05/17/Mysql初始安装及配置/</id>
    <published>2016-05-17T14:10:00.000Z</published>
    <updated>2016-05-18T10:58:41.664Z</updated>
    
    <content type="html">&lt;h3 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;这里是同事分享的mysql课程的笔记，中间加入了一些自己网上找来的东西，按照自己的想法弄了这篇博客。&lt;/p&gt;
&lt;h3 id=&quot;u73AF_u5883&quot;&gt;&lt;a href=&quot;#u73AF_u5883&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;p&gt;系统环境：centos6.5 &lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;&lt;span&gt;/etc/centos-relese```&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#25968;&amp;#25454;&amp;#24211;&amp;#29256;&amp;#26412;&amp;#65306;mysql5.5(&amp;#36890;&amp;#36807;remi&amp;#28304;&amp;#23433;&amp;#35013;&amp;#65289;&amp;#10;&amp;#10;### &amp;#23433;&amp;#35013; ###&amp;#10;CentOS6.5(&amp;#35797;&amp;#39564;&amp;#29615;&amp;#22659;&amp;#65289;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;yum install mysql-server –enablerepo=remi&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Ubuntu&amp;#65288;&amp;#40664;&amp;#35748;&amp;#29256;&amp;#26412;&amp;#20026;5.5)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;apt-get install mysql-server&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#28304;&amp;#30721;&amp;#23433;&amp;#35013;&amp;#10;&amp;#23448;&amp;#26041;&amp;#19979;&amp;#36733;&amp;#38142;&amp;#25509;&amp;#10;http://dev.mysql.com/downloads/mysql/5.5.html#downloads&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;./configure  #进入到下载的源文件中，首先要解压缩&lt;br&gt;make &amp;amp;&amp;amp; make install&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#10;### &amp;#20462;&amp;#25913;&amp;#37197;&amp;#32622;&amp;#25991;&amp;#20214; ###&amp;#10;&amp;#40664;&amp;#35748;&amp;#30340;&amp;#37197;&amp;#32622;&amp;#25991;&amp;#20214;&amp;#20301;&amp;#32622;&amp;#22312;/etc/my.cnf&amp;#65292;&amp;#40664;&amp;#35748;&amp;#37197;&amp;#32622;&amp;#25991;&amp;#20214;&amp;#36807;&amp;#20110;&amp;#31616;&amp;#21333;&amp;#22312;&amp;#23454;&amp;#38469;&amp;#20351;&amp;#29992;&amp;#20013;&amp;#20808;&amp;#23545;&amp;#20854;&amp;#36827;&amp;#34892;&amp;#19968;&amp;#23450;&amp;#30340;&amp;#20462;&amp;#25913;&amp;#12290;&amp;#10;&amp;#21442;&amp;#25968;&amp;#21517;                 | &amp;#21547;&amp;#20041;&amp;#10;--------            | ---&amp;#10;bind-address               |&amp;#9; &amp;#30417;&amp;#21548;ip&amp;#10;port&amp;#9;                            |  &amp;#30417;&amp;#21548;&amp;#31471;&amp;#21475;&amp;#10;character_set_server&amp;#9;| &amp;#40664;&amp;#35748;&amp;#23383;&amp;#31526;&amp;#38598;(&amp;#24314;&amp;#35758;utf8)&amp;#10;max_connect_errors&amp;#9;| &amp;#26368;&amp;#22823;&amp;#20801;&amp;#35768;&amp;#38169;&amp;#35823;&amp;#27425;&amp;#25968;(&amp;#24182;&amp;#38750;&amp;#25351;&amp;#23494;&amp;#30721;&amp;#38169;&amp;#35823;&amp;#65292;&amp;#32780;&amp;#26159;&amp;#35775;&amp;#38382;&amp;#21327;&amp;#35758;&amp;#19981;&amp;#27491;&amp;#30830;&amp;#20043;&amp;#31867;&amp;#30340;&amp;#65292;&amp;#22914;&amp;#26524;&amp;#26576;&amp;#20010;IP&amp;#38169;&amp;#35823;&amp;#27425;&amp;#25968;&amp;#36798;&amp;#21040;&amp;#35813;&amp;#38408;&amp;#20540;&amp;#65292;&amp;#21017;&amp;#34987;&amp;#23631;&amp;#34109;)&amp;#10;max_connections&amp;#9;       | &amp;#26368;&amp;#22823;&amp;#36830;&amp;#25509;&amp;#25968;(&amp;#33021;&amp;#21516;&amp;#26102;&amp;#35775;&amp;#38382;server&amp;#30340;&amp;#36830;&amp;#25509;&amp;#20010;&amp;#25968;&amp;#65292;&amp;#22914;&amp;#26524;&amp;#36798;&amp;#21040;&amp;#35813;&amp;#38408;&amp;#20540;&amp;#65292;&amp;#21017;&amp;#19981;&amp;#33021;&amp;#20877;&amp;#36830;&amp;#25509;&amp;#21040;server)&amp;#10;datadir&amp;#9;          | &amp;#25968;&amp;#25454;&amp;#20445;&amp;#23384;&amp;#30446;&amp;#24405;&amp;#10;log-error&amp;#9;&amp;#9;| &amp;#9;&amp;#38169;&amp;#35823;&amp;#26085;&amp;#24535;&amp;#20445;&amp;#23384;&amp;#36335;&amp;#24452;&amp;#10;skip_name_resolve         |&amp;#9;&amp;#36339;&amp;#36807;&amp;#22495;&amp;#21517;&amp;#35299;&amp;#26512;(&amp;#21487;&amp;#21152;&amp;#24555;client&amp;#36830;&amp;#25509;&amp;#36895;&amp;#24230;)&amp;#10;back_log            |&amp;#9;&amp;#21019;&amp;#24314;TCP&amp;#36830;&amp;#25509;&amp;#26102;&amp;#65292;&amp;#20801;&amp;#35768;&amp;#30340;&amp;#26368;&amp;#22823;&amp;#21516;&amp;#26102;&amp;#26410;&amp;#23436;&amp;#25104;&amp;#30340;&amp;#36830;&amp;#25509;&amp;#20010;&amp;#25968;(&amp;#20027;&amp;#35201;&amp;#36866;&amp;#29992;&amp;#20110;&amp;#30701;&amp;#36830;&amp;#25509;&amp;#22330;&amp;#26223;)&amp;#10;log-bin&amp;#9;             | Binlog&amp;#30340;&amp;#20445;&amp;#23384;&amp;#36335;&amp;#24452;&amp;#10;binlog-format&amp;#9;      |Binlog&amp;#20889;&amp;#20837;&amp;#26684;&amp;#24335;&amp;#65292;&amp;#20849;&amp;#26377;ROW/STATEMENT/MIXED&amp;#19977;&amp;#31181;&amp;#21487;&amp;#36873;&amp;#12290;&amp;#19968;&amp;#33324;&amp;#20351;&amp;#29992;MIXED&amp;#12290;&amp;#10;expire_logs_days&amp;#9;    |Binlog&amp;#20445;&amp;#30041;&amp;#26102;&amp;#38388;(&amp;#21333;&amp;#20301;:&amp;#22825;)&amp;#10;&amp;#10;&amp;#10;&amp;#36825;&amp;#37324;&amp;#37319;&amp;#29992;&amp;#30340;&amp;#37197;&amp;#32622;&amp;#25991;&amp;#20214;&amp;#65288;&amp;#22312;mysqld&amp;#19979;&amp;#28155;&amp;#21152;&amp;#22914;&amp;#19979;&amp;#20869;&amp;#23481;&amp;#65289;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;bind-address = 10.19.96.184&lt;br&gt;port = 3306&lt;br&gt;character_set_server = utf8&lt;br&gt;max_connect_errors = 1000000&lt;br&gt;max_connections = 500&lt;br&gt;datadir = /data/mysql&lt;br&gt;log-error = /var/log/mysql/mysql-error.log&lt;br&gt;skip_name_resolve&lt;br&gt;back_log = 2000&lt;br&gt;log-bin = /data/mysql&lt;br&gt;binlog-format = MIXED&lt;br&gt;expire_logs_days = 3&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#22914;&amp;#26524;datadir/log-error/log-bin&amp;#31561;&amp;#23545;&amp;#24212;&amp;#30446;&amp;#24405;&amp;#38656;&amp;#35201;&amp;#30830;&amp;#20445;&amp;#24050;&amp;#21019;&amp;#24314;&amp;#65292;&amp;#24182;&amp;#19988;&amp;#26435;&amp;#38480;&amp;#20026;mysql&amp;#25152;&amp;#26377;&amp;#12290;&amp;#20363;&amp;#22914;&amp;#65292;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;mkdir -p /data/mysql &amp;amp;&amp;amp; chown -R mysql.mysql /data/mysql&lt;br&gt;mkdir -p /var/log/mysql &amp;amp;&amp;amp; chown -R mysql.mysql /var/log/mysql&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#37197;&amp;#32622;&amp;#23436;&amp;#25104;&amp;#65292;&amp;#21551;&amp;#21160;mysql:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;/etc/init.d/mysqld start&lt;br&gt;或者&lt;br&gt;service mysqld start&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#10;### &amp;#26435;&amp;#38480;&amp;#35774;&amp;#32622; ###&amp;#10;&amp;#25191;&amp;#34892;select * from mysql.user; &amp;#21487;&amp;#20197;&amp;#26597;&amp;#30475;&amp;#21040;&amp;#24403;&amp;#21069;&amp;#30340;&amp;#25152;&amp;#26377;&amp;#29992;&amp;#25143;&amp;#12290;&amp;#10;&amp;#10;&amp;#32467;&amp;#26524;&amp;#38598;&amp;#20013;&amp;#30340;&amp;#20960;&amp;#20010;&amp;#20851;&amp;#38190;&amp;#23383;&amp;#27573;&amp;#65306;&amp;#10;Host&amp;#8212;&amp;#8212;&amp;#23545;&amp;#24212;&amp;#30340;&amp;#20801;&amp;#35768;&amp;#35775;&amp;#38382;&amp;#22495;(%&amp;#34920;&amp;#31034;&amp;#20840;&amp;#22495;&amp;#65292;192.168.%.%&amp;#34920;&amp;#31034;&amp;#23545;&amp;#24212;&amp;#36134;&amp;#21495;&amp;#23545;&amp;#35813;&amp;#27573;&amp;#22343;&amp;#21487;&amp;#35775;&amp;#38382;&amp;#65292;192.168.8.100&amp;#34920;&amp;#31034;&amp;#23545;&amp;#24212;&amp;#36134;&amp;#21495;&amp;#20165;&amp;#36825;&amp;#21488;&amp;#26426;&amp;#22120;&amp;#21487;&amp;#35775;&amp;#38382;)&amp;#10;User&amp;#8212;&amp;#8212;&amp;#29992;&amp;#25143;&amp;#21517;&amp;#10;Password&amp;#8212;&amp;#8212;&amp;#23494;&amp;#30721;&amp;#21152;&amp;#23494;&amp;#20018;&amp;#10;xxx_priv&amp;#8212;&amp;#8212;&amp;#21508;&amp;#31181;&amp;#26435;&amp;#38480;&amp;#10;&amp;#10;&amp;#10;&amp;#29992;&amp;#25143;&amp;#26435;&amp;#38480;&amp;#31649;&amp;#29702;&amp;#10;``` bash&amp;#10;mysql -u root -p # 1&amp;#12289;&amp;#20197;&amp;#31649;&amp;#29702;&amp;#21592;&amp;#36523;&amp;#20221;&amp;#30331;&amp;#24405;mysql&amp;#10;&amp;#10;use mysql # 2&amp;#12289;&amp;#36873;&amp;#25321;mysql&amp;#25968;&amp;#25454;&amp;#24211;&amp;#10;&amp;#10;create user &amp;#39;testuser&amp;#39;@&amp;#39;localhost&amp;#39; identified by &amp;#39;testpassword&amp;#39; #3&amp;#12289;&amp;#21019;&amp;#24314;&amp;#29992;&amp;#25143;&amp;#24182;&amp;#35774;&amp;#23450;&amp;#23494;&amp;#30721;&amp;#10;&amp;#10;flush privileges #4&amp;#12289;&amp;#20351;&amp;#25805;&amp;#20316;&amp;#29983;&amp;#25928;&amp;#10;&amp;#10;create database testdb #5&amp;#12289;&amp;#20026;&amp;#29992;&amp;#25143;&amp;#21019;&amp;#24314;&amp;#25968;&amp;#25454;&amp;#24211;&amp;#10;&amp;#10;grant all privileges on testdb.* to test@localhost identified  by &amp;#39;1234&amp;#39; #6&amp;#12289;&amp;#20026;&amp;#29992;&amp;#25143;&amp;#36171;&amp;#20104;&amp;#25805;&amp;#20316;&amp;#25968;&amp;#25454;&amp;#24211;testdb&amp;#30340;&amp;#25152;&amp;#26377;&amp;#26435;&amp;#38480;&amp;#10;&amp;#10;flush privileges #7&amp;#12289;&amp;#20351;&amp;#25805;&amp;#20316;&amp;#29983;&amp;#25928;&amp;#10;&amp;#10;mysql -u test -p #8&amp;#12289;&amp;#29992;&amp;#26032;&amp;#29992;&amp;#25143;&amp;#30331;&amp;#24405;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果当前账号拥有所有权限，可用最简单的新增用户并授权：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;&lt;span&gt;all on *.* to `root`@`%` identified by &#39;123456&#39; with grant option; ```&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#10;&amp;#20854;&amp;#20013;with grant option&amp;#34920;&amp;#31034;&amp;#26032;&amp;#22686;&amp;#30340;&amp;#35813;&amp;#36134;&amp;#21495;&amp;#26159;&amp;#21542;&amp;#26377;grant&amp;#26435;&amp;#38480;&amp;#65292;&amp;#21363;&amp;#26159;&amp;#21542;&amp;#21487;&amp;#20197;&amp;#36890;&amp;#36807;&amp;#20854;&amp;#21019;&amp;#24314;&amp;#26032;&amp;#36134;&amp;#21495;&amp;#12290;&amp;#10;&amp;#38750;&amp;#24120;&amp;#19981;&amp;#24314;&amp;#35758;&amp;#32473;&amp;#29992;&amp;#25143;&amp;#24320;&amp;#25918;&amp;#20840;&amp;#37096;&amp;#26435;&amp;#38480;&amp;#65292;&amp;#26368;&amp;#22909;&amp;#32473;&amp;#26032;&amp;#29992;&amp;#25143;&amp;#20165;&amp;#24320;&amp;#25918;&amp;#25152;&amp;#38656;&amp;#35201;&amp;#30340;&amp;#30456;&amp;#20851;&amp;#26435;&amp;#38480;&amp;#10;&amp;#10;&amp;#10;### &amp;#23548;&amp;#20837;&amp;#27979;&amp;#35797;&amp;#29992;&amp;#25968;&amp;#25454;&amp;#24211; ###&amp;#10;```bash&amp;#10;wget https://launchpadlibrarian.net/24493586/employees_db-full-1.0.6.tar.bz2&amp;#10;&amp;#10;tar -xjf employees_db-full-1.0.6.tar.bz2 &amp;#10;&amp;#10;cd employees_db&amp;#10;&amp;#10;mysql -u root -p &amp;#60; employees.sql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;u7EC3_u4E60&quot;&gt;&lt;a href=&quot;#u7EC3_u4E60&quot; class=&quot;headerlink&quot; title=&quot;练习&quot;&gt;&lt;/a&gt;练习&lt;/h3&gt;&lt;p&gt;设置权限, 要求如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;root账号仅能从本地以及特定机器访问&lt;/li&gt;
&lt;li&gt;创建一个test账号，允许所有机器访问&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;&lt;span&gt;grant all on *.* to `root`@`localhost` identified by &#39;123456&#39; with grant option; ```&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#10;&amp;#10;```mysql&amp;#62; grant all on *.* to `test`@`%` identified by &amp;#39;123456&amp;#39; with grant option;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;这里是同事分享的mysql课程的笔记，中间加入了一些自己网上找来的东西，按照自己的想法弄了这篇博客。&lt;/
    
    </summary>
    
    
      <category term="数据库管理" scheme="http://zone.gaospot.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像创建</title>
    <link href="http://zone.gaospot.com/2016/05/11/Docker%E9%95%9C%E5%83%8F%E5%88%9B%E5%BB%BA/"/>
    <id>http://zone.gaospot.com/2016/05/11/Docker镜像创建/</id>
    <published>2016-05-11T00:29:00.000Z</published>
    <updated>2016-05-11T01:53:23.615Z</updated>
    
    <content type="html">&lt;h3 id=&quot;1_u3001_u521B_u5EFADocker_u955C_u50CF_u7684_u4E00_u4E9B_u8BF4_u660E&quot;&gt;&lt;a href=&quot;#1_u3001_u521B_u5EFADocker_u955C_u50CF_u7684_u4E00_u4E9B_u8BF4_u660E&quot; class=&quot;headerlink&quot; title=&quot;1、创建Docker镜像的一些说明&quot;&gt;&lt;/a&gt;1、创建Docker镜像的一些说明&lt;/h3&gt;&lt;p&gt;这里通过创建一个Shadowsocks的docker镜像来说明创建一个docker镜像的过程，Docker镜像创建是Docker一个非常基础重要的功能，这里介绍的这个例子当然也可以通过一个shell脚本来做，通过shell的问题还是那个老生常谈的话题，环境不好控制，遇到不一样的环境可能出错，docker在创建镜像的时候就自行创建了环境，因此避免了这个问题。下面的是复制的 别人的关于命令的总结（&lt;a href=&quot;http://blog.csdn.net/qinyushuang/article/details/43342553）：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/qinyushuang/article/details/43342553）：&lt;/a&gt;&lt;br&gt;（1）FROM（指定基础image）&lt;br&gt;构建指令，必须指定且需要在Dockerfile其他指令的前面。后续的指令都依赖于该指令指定的image。FROM指令指定的基础image可以是官方远程仓库中的，也可以位于本地仓库。&lt;br&gt;该指令有两种格式：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM &amp;#60;image&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;指定基础image为该image的最后修改的版本。或者：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM &amp;#60;image&amp;#62;:&amp;#60;tag&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;指定基础image为该image的一个tag版本。&lt;/p&gt;
&lt;p&gt;（2）MAINTAINER（用来指定镜像创建者信息）&lt;br&gt;构建指令，用于将image的制作者相关的信息写入到image中。当我们对该image执行docker inspect命令时，输出中有相应的字段记录该信息。&lt;br&gt;格式：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MAINTAINER &amp;#60;name&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;（3）RUN（安装软件用）&lt;br&gt;构建指令，RUN可以运行任何被基础image支持的命令。如基础image选择了ubuntu，那么软件管理部分只能使用ubuntu的命令。&lt;br&gt;该指令有两种格式：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RUN &amp;#60;command&amp;#62; (the command is run in a shell - `/bin/sh -c`)  &amp;#10;RUN [&amp;#34;executable&amp;#34;, &amp;#34;param1&amp;#34;, &amp;#34;param2&amp;#34; ... ]  (exec form)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;（4）CMD（设置container启动时执行的操作）&lt;br&gt;设置指令，用于container启动时指定的操作。该操作可以是执行自定义脚本，也可以是执行系统命令。该指令只能在文件中存在一次，如果有多个，则只执行最后一条。&lt;br&gt;该指令有三种格式：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CMD [&amp;#34;executable&amp;#34;,&amp;#34;param1&amp;#34;,&amp;#34;param2&amp;#34;] (like an exec, this is the preferred form)  &amp;#10;CMD command param1 param2 (as a shell)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当Dockerfile指定了ENTRYPOINT，那么使用下面的格式：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CMD [&amp;#34;param1&amp;#34;,&amp;#34;param2&amp;#34;] (as default parameters to ENTRYPOINT)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ENTRYPOINT指定的是一个可执行的脚本或者程序的路径，该指定的脚本或者程序将会以param1和param2作为参数执行。所以如果CMD指令使用上面的形式，那么Dockerfile中必须要有配套的ENTRYPOINT。&lt;/p&gt;
&lt;p&gt;（5）ENTRYPOINT（设置container启动时执行的操作）&lt;br&gt;设置指令，指定容器启动时执行的命令，可以多次设置，但是只有最后一个有效。&lt;br&gt;两种格式:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ENTRYPOINT [&amp;#34;executable&amp;#34;, &amp;#34;param1&amp;#34;, &amp;#34;param2&amp;#34;] (like an exec, the preferred form)  &amp;#10;&amp;#10;ENTRYPOINT command param1 param2 (as a shell)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该指令的使用分为两种情况，一种是独自使用，另一种和CMD指令配合使用。&lt;br&gt;当独自使用时，如果你还使用了CMD命令且CMD是一个完整的可执行的命令，那么CMD指令和ENTRYPOINT会互相覆盖只有最后一个CMD或者ENTRYPOINT有效。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# CMD&amp;#25351;&amp;#20196;&amp;#23558;&amp;#19981;&amp;#20250;&amp;#34987;&amp;#25191;&amp;#34892;&amp;#65292;&amp;#21482;&amp;#26377;ENTRYPOINT&amp;#25351;&amp;#20196;&amp;#34987;&amp;#25191;&amp;#34892;  &amp;#10;CMD echo &amp;#8220;Hello, World!&amp;#8221;  &amp;#10;ENTRYPOINT ls -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另一种用法和CMD指令配合使用来指定ENTRYPOINT的默认参数，这时CMD指令不是一个完整的可执行命令，仅仅是参数部分；ENTRYPOINT指令只能使用JSON方式指定执行命令，而不能指定参数。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM ubuntu  &amp;#10;CMD [&amp;#34;-l&amp;#34;]  &amp;#10;ENTRYPOINT [&amp;#34;/usr/bin/ls&amp;#34;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;（6）USER（设置container容器的用户）&lt;br&gt;设置指令，设置启动容器的用户，默认是root用户。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &amp;#25351;&amp;#23450;memcached&amp;#30340;&amp;#36816;&amp;#34892;&amp;#29992;&amp;#25143;  &amp;#10;ENTRYPOINT [&amp;#34;memcached&amp;#34;]  &amp;#10;USER daemon  &amp;#10;&amp;#25110;  &amp;#10;ENTRYPOINT [&amp;#34;memcached&amp;#34;, &amp;#34;-u&amp;#34;, &amp;#34;daemon&amp;#34;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;（7）EXPOSE（指定容器需要映射到宿主机器的端口）&lt;br&gt;设置指令，该指令会将容器中的端口映射成宿主机器中的某个端口。当你需要访问容器的时候，可以不是用容器的IP地址而是使用宿主机器的IP地址和映射后的端口。要完成整个操作需要两个步骤，首先在Dockerfile使用EXPOSE设置需要映射的容器端口，然后在运行容器的时候指定-p选项加上EXPOSE设置的端口，这样EXPOSE设置的端口号会被随机映射成宿主机器中的一个端口号。也可以指定需要映射到宿主机器的那个端口，这时要确保宿主机器上的端口号没有被使用。EXPOSE指令可以一次设置多个端口号，相应的运行容器的时候，可以配套的多次使用-p选项。&lt;br&gt;格式:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EXPOSE &amp;#60;port&amp;#62; [&amp;#60;port&amp;#62;...]  &amp;#10;&amp;#10;&amp;#10;# &amp;#26144;&amp;#23556;&amp;#19968;&amp;#20010;&amp;#31471;&amp;#21475;  &amp;#10;EXPOSE port1  &amp;#10;# &amp;#30456;&amp;#24212;&amp;#30340;&amp;#36816;&amp;#34892;&amp;#23481;&amp;#22120;&amp;#20351;&amp;#29992;&amp;#30340;&amp;#21629;&amp;#20196;  &amp;#10;docker run -p port1 image  &amp;#10;  &amp;#10;# &amp;#26144;&amp;#23556;&amp;#22810;&amp;#20010;&amp;#31471;&amp;#21475;  &amp;#10;EXPOSE port1 port2 port3  &amp;#10;# &amp;#30456;&amp;#24212;&amp;#30340;&amp;#36816;&amp;#34892;&amp;#23481;&amp;#22120;&amp;#20351;&amp;#29992;&amp;#30340;&amp;#21629;&amp;#20196;  &amp;#10;docker run -p port1 -p port2 -p port3 image  &amp;#10;# &amp;#36824;&amp;#21487;&amp;#20197;&amp;#25351;&amp;#23450;&amp;#38656;&amp;#35201;&amp;#26144;&amp;#23556;&amp;#21040;&amp;#23487;&amp;#20027;&amp;#26426;&amp;#22120;&amp;#19978;&amp;#30340;&amp;#26576;&amp;#20010;&amp;#31471;&amp;#21475;&amp;#21495;  &amp;#10;docker run -p host_port1:port1 -p host_port2:port2 -p host_port3:port3 image&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;端口映射是docker比较重要的一个功能，原因在于我们每次运行容器的时候容器的IP地址不能指定而是在桥接网卡的地址范围内随机生成的。宿主机器的IP地址是固定的，我们可以将容器的端口的映射到宿主机器上的一个端口，免去每次访问容器中的某个服务时都要查看容器的IP的地址。对于一个运行的容器，可以使用docker port加上容器中需要映射的端口和容器的ID来查看该端口号在宿主机器上的映射端口。&lt;/p&gt;
&lt;p&gt;（8）ENV（用于设置环境变量）&lt;br&gt;构建指令，在image中设置一个环境变量。&lt;br&gt;格式:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ENV &amp;#60;key&amp;#62; &amp;#60;value&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置了后，后续的RUN命令都可以使用，container启动后，可以通过docker inspect查看这个环境变量，也可以通过在docker run –env key=value时设置或修改环境变量。&lt;br&gt;假如你安装了JAVA程序，需要设置JAVA_HOME，那么可以在Dockerfile中这样写：&lt;br&gt;ENV JAVA_HOME /path/to/java/dirent&lt;/p&gt;
&lt;p&gt;（9）ADD（从src复制文件到container的dest路径）&lt;br&gt;构建指令，所有拷贝到container中的文件和文件夹权限为0755，uid和gid为0；如果是一个目录，那么会将该目录下的所有文件添加到container中，不包括目录；如果文件是可识别的压缩格式，则docker会帮忙解压缩（注意压缩格式）；如果&lt;src&gt;是文件且&lt;dest&gt;中不使用斜杠结束，则会将&lt;dest&gt;视为文件，&lt;src&gt;的内容会写入&lt;dest&gt;；如果&lt;src&gt;是文件且&lt;dest&gt;中使用斜杠结束，则会&lt;src&gt;文件拷贝到&lt;dest&gt;目录下。&lt;br&gt;格式:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ADD &amp;#60;src&amp;#62; &amp;#60;dest&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/dest&gt;&lt;/src&gt;&lt;/dest&gt;&lt;/src&gt;&lt;/dest&gt;&lt;/src&gt;&lt;/dest&gt;&lt;/dest&gt;&lt;/src&gt;&lt;/p&gt;
&lt;p&gt;&lt;src&gt; 是相对被构建的源目录的相对路径，可以是文件或目录的路径，也可以是一个远程的文件url;&lt;/src&gt;&lt;/p&gt;
&lt;p&gt;&lt;dest&gt; 是container中的绝对路径&lt;/dest&gt;&lt;/p&gt;
&lt;p&gt;（10）VOLUME（指定挂载点)）&lt;br&gt;设置指令，使容器中的一个目录具有持久化存储数据的功能，该目录可以被容器本身使用，也可以共享给其他容器使用。我们知道容器使用的是AUFS，这种文件系统不能持久化数据，当容器关闭后，所有的更改都会丢失。当容器中的应用有持久化数据的需求时可以在Dockerfile中使用该指令。&lt;br&gt;格式:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;VOLUME [&amp;#34;&amp;#60;mountpoint&amp;#62;&amp;#34;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM base  &amp;#10;VOLUME [&amp;#34;/tmp/data&amp;#34;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行通过该Dockerfile生成image的容器，/tmp/data目录中的数据在容器关闭后，里面的数据还存在。例如另一个容器也有持久化数据的需求，且想使用上面容器共享的/tmp/data目录，那么可以运行下面的命令启动一个容器：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -t -i -rm -volumes-from container1 image2 bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;container1为第一个容器的ID，image2为第二个容器运行image的名字。&lt;/p&gt;
&lt;p&gt;（11）WORKDIR（切换目录）&lt;br&gt;设置指令，可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效。&lt;br&gt;格式:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;WORKDIR /path/to/workdir  &amp;#10;&amp;#10;&amp;#10;# &amp;#22312; /p1/p2 &amp;#19979;&amp;#25191;&amp;#34892; vim a.txt  &amp;#10;WORKDIR /p1 WORKDIR p2 RUN vim a.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;（12）ONBUILD（在子镜像中执行）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ONBUILD &amp;#60;Dockerfile&amp;#20851;&amp;#38190;&amp;#23383;&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ONBUILD 指定的命令在构建镜像时并不执行，而是在它的子镜像中执行。&lt;br&gt;详细资料可参考&lt;a href=&quot;https://www.dockboard.org/docker-quicktip-3-onbuild&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.dockboard.org/docker-quicktip-3-onbuild&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2_u3001_u521B_u5EFADockerfile_uFF0C_u6784_u5EFAshadowsocks_u73AF_u5883&quot;&gt;&lt;a href=&quot;#2_u3001_u521B_u5EFADockerfile_uFF0C_u6784_u5EFAshadowsocks_u73AF_u5883&quot; class=&quot;headerlink&quot; title=&quot;2、创建Dockerfile，构建shadowsocks环境&quot;&gt;&lt;/a&gt;2、创建Dockerfile，构建shadowsocks环境&lt;/h3&gt;&lt;p&gt;Dockerfile文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Version: 0.0.1&amp;#10;&amp;#10;# Pull base image&amp;#10;FROM centos:6&amp;#10;&amp;#10;MAINTAINER Gao Xiong &amp;#34;growdane@gmail.com&amp;#34;&amp;#10;&amp;#10;# Install openssl-devel&amp;#10;RUN yum -y install openssl-devel&amp;#10;&amp;#10;# Install make and another devople tools&amp;#10;RUN yum -y install gcc gcc-c++ automake autoconf libtool make&amp;#10;&amp;#10;# Install git &amp;#10;RUN yum -y install git&amp;#10;&amp;#10;# Pull shadowsocks and install&amp;#10;RUN cd /root &amp;#38;&amp;#38; git clone https://github.com/madeye/shadowsocks-libev.git&amp;#10;RUN cd /root/shadowsocks-libev &amp;#38;&amp;#38; ./configure &amp;#38;&amp;#38; make &amp;#38;&amp;#38; make install&amp;#10;&amp;#10;# Expose ports&amp;#10;EXPOSE 8388&amp;#10;&amp;#10;# Define default command&amp;#10;ENTRYPOINT cd /root/shadowsocks-libev &amp;#38;&amp;#38; ss-server -p 8388 -k fuckgfw10086&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3_u3001_u6784_u5EFA_u955C_u50CF&quot;&gt;&lt;a href=&quot;#3_u3001_u6784_u5EFA_u955C_u50CF&quot; class=&quot;headerlink&quot; title=&quot;3、构建镜像&quot;&gt;&lt;/a&gt;3、构建镜像&lt;/h3&gt;&lt;p&gt;Dockerfile写好了，就可以在宿主的命令行中构建这个镜像了，构建命令如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# docker build -t growdane/shadowsocks .&amp;#10;# docker run -d -p 8388:8388 growdane/shadowsocks&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;执行完上面的命令就可以直接在需要shadowsock的地方连接他了，密码就是ENTRYPOINT中，-k参数设置的。&lt;/p&gt;
&lt;h3 id=&quot;4_u3001_u955C_u50CF_u4E0A_u4F20&quot;&gt;&lt;a href=&quot;#4_u3001_u955C_u50CF_u4E0A_u4F20&quot; class=&quot;headerlink&quot; title=&quot;4、镜像上传&quot;&gt;&lt;/a&gt;4、镜像上传&lt;/h3&gt;&lt;p&gt;镜像上传有多种办法，第一种是通过docker直接在命令行将生成好的镜像上传到 docker.io这种方法会稍微慢一点，还有种方法是将dockerfile上传到github，然后通过自动构建来在docker.io上生成镜像。两种方法的shell命令如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# docker login&amp;#10;# docker push growdane/shadowsocks&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第二种方法&lt;br&gt;这种方法不好用命令来说明，直接在用文字来说吧，现在github上创建一个新得Repository，然后将Dockerfile上传到github上就可以了。上面的这个Dockerfile我已经上传到&lt;a href=&quot;https://github.com/hsiun/dockerfile-shadowsocks。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hsiun/dockerfile-shadowsocks。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;5_u3001_u955C_u50CF_u62C9_u53D6&quot;&gt;&lt;a href=&quot;#5_u3001_u955C_u50CF_u62C9_u53D6&quot; class=&quot;headerlink&quot; title=&quot;5、镜像拉取&quot;&gt;&lt;/a&gt;5、镜像拉取&lt;/h3&gt;&lt;p&gt;现在镜像已经创建成功了，如果需要的话可以通过下面的命令来拉取&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# docker pull growdane/shadowsocks&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1_u3001_u521B_u5EFADocker_u955C_u50CF_u7684_u4E00_u4E9B_u8BF4_u660E&quot;&gt;&lt;a href=&quot;#1_u3001_u521B_u5EFADocker_u955C_u50CF_u7684_u4E00_u4E
    
    </summary>
    
    
      <category term="系统运维" scheme="http://zone.gaospot.com/tags/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>云直播（ULive）初体验</title>
    <link href="http://zone.gaospot.com/2016/05/09/%E4%BA%91%E7%9B%B4%E6%92%AD%EF%BC%88ULive%EF%BC%89%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://zone.gaospot.com/2016/05/09/云直播（ULive）初体验/</id>
    <published>2016-05-09T09:45:00.000Z</published>
    <updated>2016-05-09T09:49:44.250Z</updated>
    
    <content type="html">&lt;p&gt;这篇博客旨在通过一个简单是使用例子来初步说明ULive这个产品的使用方法，产品文档的说明主要是针对产品的，而这篇博客则主要是从用户业务的角度来做说明。&lt;/p&gt;
&lt;h3 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;这里通过obs（一个开源的直播软件）来录视频（产生直播流），当然也可以通过sdk来开发推流客户端。直播流推流到UCloud提供专门用于测试的推流地址，播放是通过支持rtmp协议串流播放的vlc（开源播放器）来做的。有其他更多需求比如说弹幕啊什么的其实是通过在播放客户端中做的，这个可以自行实现。下面通过图示来说明这个过程（图略丑，见谅：）&lt;br&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/%E6%A6%82%E8%BF%B0.png&quot; alt=&quot;推流和拉流过程说明&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;u51C6_u5907_u548C_u524D_u63D0_u6761_u4EF6&quot;&gt;&lt;a href=&quot;#u51C6_u5907_u548C_u524D_u63D0_u6761_u4EF6&quot; class=&quot;headerlink&quot; title=&quot;准备和前提条件&quot;&gt;&lt;/a&gt;准备和前提条件&lt;/h3&gt;&lt;p&gt;推流和播放软件：&lt;br&gt;obs和vlc&lt;/p&gt;
&lt;p&gt;用于测试的推流和播放地址：&lt;br&gt;推流地址：rtmp://publish3.cdn.ucloud.com.cn/ucloud/流id&lt;br&gt;rtmp播放地址：rtmp://vlive3.rtmp.cdn.ucloud.com.cn/ucloud/流id&lt;br&gt;hls播放地址：&lt;a href=&quot;http://vlive3.hls.cdn.ucloud.com.cn/ucloud/流id/playlist.m3u8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://vlive3.hls.cdn.ucloud.com.cn/ucloud/流id/playlist.m3u8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中，流id是您可以任意指定的（仅限于英文字母、数字、下划线），比如aaa、xyz等。因为测试地址是公共的，为了不与其他客户的测试冲突，建议您使用带有自定义前缀（如公司英文名）的流id。&lt;/p&gt;
&lt;h3 id=&quot;u89C6_u9891_u5F55_u5236_u548C_u63A8_u6D41&quot;&gt;&lt;a href=&quot;#u89C6_u9891_u5F55_u5236_u548C_u63A8_u6D41&quot; class=&quot;headerlink&quot; title=&quot;视频录制和推流&quot;&gt;&lt;/a&gt;视频录制和推流&lt;/h3&gt;&lt;p&gt;这里使用的是obs来录制视频并推流，obs的具体使用不做太多的说明，只说明直播服务器相关地方的说明。首先是点设定，弹出设定对话框，然后选择广播设定，设定FMS URL，和播放路径这两项。FMS URL填的测试推流地址：rtmp://publish3.cdn.ucloud.com.cn/ucloud/，播放路径就是Ulive所说的流id，我这里写的是gaospot。具体说明见下面的文档。&lt;br&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/%E6%8E%A8%E6%B5%81.png&quot; alt=&quot;视频录制和推流&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;u64AD_u653E_u548C_u62C9_u6D41&quot;&gt;&lt;a href=&quot;#u64AD_u653E_u548C_u62C9_u6D41&quot; class=&quot;headerlink&quot; title=&quot;播放和拉流&quot;&gt;&lt;/a&gt;播放和拉流&lt;/h3&gt;&lt;p&gt;这里使用vlc来播放我们的直播，媒体-》打开网络串流。就到如下所示的对话框，这个和上面推流地址是相关的，播放地址就是推流地址加流id，我这里具体来说就是rtmp://vlive3.rtmp.cdn.ucloud.com.cn/ucloud/gaospot&lt;br&gt;&lt;img src=&quot;http://7xr7kh.com1.z0.glb.clouddn.com/%E6%8B%89%E6%B5%81.png&quot; alt=&quot;播放和拉流&quot;&gt;&lt;/p&gt;
&lt;p&gt;了解了上面的姿势之后在看官方文档（&lt;a href=&quot;https://docs.ucloud.cn/upd-docs/ulive/index.html）的说明就能完全掌握这个产品的使用了。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.ucloud.cn/upd-docs/ulive/index.html）的说明就能完全掌握这个产品的使用了。&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博客旨在通过一个简单是使用例子来初步说明ULive这个产品的使用方法，产品文档的说明主要是针对产品的，而这篇博客则主要是从用户业务的角度来做说明。&lt;/p&gt;
&lt;h3 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;header
    
    </summary>
    
    
      <category term="产品说明" scheme="http://zone.gaospot.com/tags/%E4%BA%A7%E5%93%81%E8%AF%B4%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>Mysql常见问题排查</title>
    <link href="http://zone.gaospot.com/2016/05/04/Mysql%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%8E%92%E9%94%99/"/>
    <id>http://zone.gaospot.com/2016/05/04/Mysql常见问题排错/</id>
    <published>2016-05-04T03:35:00.000Z</published>
    <updated>2016-05-04T03:40:12.576Z</updated>
    
    <content type="html">&lt;p&gt;解决UDB主从同步不一致&lt;br&gt;1、: “开启super权限：update mysql.user set super_priv = ‘Y’ where user = ‘root’; flush privileges;”,&lt;br&gt;2、: “停止slave: stop slave;”,&lt;br&gt;3、: “设置跳过slave同步语句数： set global sql_slave_skip_counter = 1;”,&lt;br&gt;4、: “启动slave： start slave;”,&lt;br&gt;5、: “确认同步是否正确： show slave status G 确认”,&lt;br&gt;6、: “若同步还是出错重复第2-5步，若同步正确则结束”&lt;/p&gt;
&lt;p&gt;数据库上可以在哪里查询最近执行较慢的sql？&lt;/p&gt;
&lt;p&gt;1、可以通过这个命令查看：select * from mysql.slow_log where start_time &amp;gt;= ‘xxxx-xx-xx’;&lt;br&gt;2、如何查看MySQL数据库的死锁信息&lt;br&gt;3、服务器运行一天后，就开始频繁报错：Deadlock found when trying to get to lock; try restarting transaction.&lt;br&gt;4、使用终端或命令提示符登录到MySQL，输入命令：mysql -h xxxx.xxx.xxx -P 3306 -u username -p password&lt;br&gt;5、在MySQL客户端下输入命令：show engine innodb status \G;&lt;br&gt;6、在打印出来的信息中找到“LATEST DETECTED DEADLOCK”一节内容&lt;br&gt;7、分析其中的内容，我们就可以知道最近导致死锁的事务有哪些.&lt;/p&gt;
&lt;p&gt;Mysql 5.6内存问题&lt;/p&gt;
&lt;p&gt;mysql5.6版本的，内存少于3G的，内存使用率100%一般是正常情况，可以尝试设置performance_schema=0，重启&lt;br&gt;原因：&lt;br&gt;5.6版本本来就比较消耗内存，用户的内存配置又低，可以尝试修改performance_schema=0，并降低缓冲池大小，或建议用户增大内存。&lt;br&gt;5.6的启动内存大约就需要500M，缓冲区内存900M，当缓冲区填满以后内存就肯定在100%了，并且不会再下降 以后如果是mysql5.6，如果它的总内存在2G以内的，数据量超过900M的，都会引起内存使用超过100%并且不会再下降的情况。&lt;/p&gt;
&lt;p&gt;如果是这样，可以：1 减少缓冲池大小 2 禁用performance_schema=0 3 增大内存  &lt;/p&gt;
&lt;p&gt;三种方法 2-3G的内存一般会遇到&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;解决UDB主从同步不一致&lt;br&gt;1、: “开启super权限：update mysql.user set super_priv = ‘Y’ where user = ‘root’; flush privileges;”,&lt;br&gt;2、: “停止slave: stop slav
    
    </summary>
    
    
      <category term="数据库管理" scheme="http://zone.gaospot.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>如何成为一名优秀的技术支持</title>
    <link href="http://zone.gaospot.com/2016/05/03/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E4%BC%98%E7%A7%80%E7%9A%84%E6%8A%80%E6%9C%AF%E6%94%AF%E6%8C%81/"/>
    <id>http://zone.gaospot.com/2016/05/03/如何成为一名优秀的技术支持/</id>
    <published>2016-05-03T15:35:00.000Z</published>
    <updated>2016-05-05T12:13:47.796Z</updated>
    
    <content type="html">&lt;p&gt;我曾经在知乎上搜过这个问题，好像有人问了，却没有人给出好的答案，我自己曾经想过这个问题，倒想回答下这个问题，任何事情做到一定程度就会想从方法论的角度来改进做事方法。按照我一贯的形式方法，这篇文章会写的比较主观，随意，掺杂很多个人主观想法和经历在里面。&lt;br&gt;选择技术支持这一职业其实纯属偶然，一开始并不喜欢这份工作，当然说我现在有多热爱，也是假话，但我想把这件事做好，这就我的行事风格。刚开始经历了一段痛苦期，现在进入到风平浪静的事情，是时候反思下自己的所作所为以此来提升自己。&lt;br&gt;技术支持其实可以分开成为两个词来讲，技术和支持，这两个词，我认为是做好这份工作的两个方面。首先是技术，什么是技术，云计算的背后是云技术在支撑，用户业务的背后是用户程序（代码）和云环境（运行环境）在共同支撑。所以技术支持要学好技术便成了必要因素，在这里技术包含了两个方面，公司产品的技术背景和用户业务的技术背景。首先从公司产品角度来说技术支持，对公司的产品没有足够的了解显然是无法完成这份工作的。在进一步来讲，一个好的技术支持对于本公司所售产品的实现应该是了解的（现在正在学习这方面的知识），不需要熟悉到每一个代码，但对整体设计应该是明白的。在其次是对用户所使用技术的理解，用户可能采用各种各样的解决方案，也许自己并不熟悉，但遇到问题，需要需要我们这边提供支持的时候应该怎么做，这里面又有一个方法论的问题了，虽然并不是每一个问题都是我们所熟悉的，但解决问题的方法是一样的，比如说排除网络问题，有排查网络问题的一个思路和方法。碰到类似问题按照这样的方法来定位就好了，综上来讲技术就两方面，&lt;br&gt;另外一个词是支持，支持是一个动词，强调的是一个动作或过程，它包含有沟通，协助教育等等意思，沟通交流是技术支持的工作方法，工作手段和工具。没有交流，技术支持的工作无法开展，沟通交流是渠道是基础，因此沟通是基础技能。其次是协助，协助是技术支持工作的主意内容，通过独立分析问题，最后协助用户解决问题，协助使技术支持的工作产生价值。最后是教育，是进阶内容，其实是经过上两步认为就完成了一次支持工作，教育不是独立的第三步，其可以认为作为一个指导or something，贯穿在整个过程中，在交流的过程影响用户，这就是教育，大公司都懂得教育用户，通过广告等等方式，比如说某某公司，大家会说它怎么怎么样，它天生就是这样吗？不是的，是它把用户教育成这样认为的，如果它在确实是这样做的，事实上就是这样的，最终用户也就这样认为了，没了。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我曾经在知乎上搜过这个问题，好像有人问了，却没有人给出好的答案，我自己曾经想过这个问题，倒想回答下这个问题，任何事情做到一定程度就会想从方法论的角度来改进做事方法。按照我一贯的形式方法，这篇文章会写的比较主观，随意，掺杂很多个人主观想法和经历在里面。&lt;br&gt;选择技术支持这一
    
    </summary>
    
    
      <category term="个人总结" scheme="http://zone.gaospot.com/tags/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>无EIP云主机访问外网</title>
    <link href="http://zone.gaospot.com/2016/04/25/%E6%97%A0EIP%E4%BA%91%E4%B8%BB%E6%9C%BA%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91/"/>
    <id>http://zone.gaospot.com/2016/04/25/无EIP云主机访问外网/</id>
    <published>2016-04-25T14:23:40.000Z</published>
    <updated>2016-05-04T03:12:37.299Z</updated>
    
    <content type="html">&lt;p&gt;在UCloud平台使用云主机的时候，如果需要访问外网，一种比较直接的方式就是绑定EIP，但是在某些情况下我们并不希望给没给云主机都绑定一个EIP，比如说安装需要从外网下载软件的时候。这个时候我们该如何实现这个需求呢，在这种情况下，我们要求最少需要有一个EIP，这样可以通过一定的设置方式让其他云主机使用这个EIP作为出口，这里介绍两种方法，一种是通过UCloud平台提供的路由器产品（免费），还有一个是使用绑定了EIP的云主机作为网关来实现。&lt;/p&gt;
&lt;h3 id=&quot;u4E00_u3001_u4F7F_u7528_u5177_u6709EIP_u4E91_u4E3B_u673A_u505A_u7F51_u5173_u5B9E_u73B0_u5916_u7F51_u8BBF_u95EE&quot;&gt;&lt;a href=&quot;#u4E00_u3001_u4F7F_u7528_u5177_u6709EIP_u4E91_u4E3B_u673A_u505A_u7F51_u5173_u5B9E_u73B0_u5916_u7F51_u8BBF_u95EE&quot; class=&quot;headerlink&quot; title=&quot;一、使用具有EIP云主机做网关实现外网访问&quot;&gt;&lt;/a&gt;一、使用具有EIP云主机做网关实现外网访问&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;测试环境介绍（两台主机都在北京二可用区C，系统均为centos6.5）：&lt;/strong&gt;&lt;br&gt;云主机A（做网关）：内网IP: 10.10.229.85 外网IP: 123.59.150.107 BGP&lt;br&gt;云主机B：内网IP: 10.10.246.62&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现目标：&lt;/strong&gt;&lt;br&gt;主机A可以访问外网，但是主机B没有EIP也没有做任何设置不可以访问外网。现在要通过修改主机B网关的方式实现主机B访问外网。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤概述：&lt;/strong&gt;&lt;br&gt;1.网关机器打开内核里面的ip forward参数&lt;br&gt;2.网关机器做iptables，完成nat映射&lt;br&gt;3.后端机器修改网关地址&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;具体操作步骤：&lt;/strong&gt;&lt;br&gt;1、打开具备外网IP的云主机A（作为转发路由）的转发功能，编辑/etc/sysctl.conf文件，打开配置  net.ipv4.ip_forward=1。 &lt;/p&gt;
&lt;p&gt;2、执行  sysctl -p 使配置生效&lt;/p&gt;
&lt;p&gt;3、在路由机器云主机A（具备外网IP）设置iptables转发 iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE&lt;/p&gt;
&lt;p&gt;4、修改需要访问外网的内网机器云主机B， 编辑/etc/sysconfig/network-scripts/ifcfg-eth0文件，修改默认路由为路由机器云主机A（具备外网IP）内网IP，例如：gateway 10.10.229.85。&lt;/p&gt;
&lt;p&gt;5、执行 service network restart 使配置生效&lt;/p&gt;
&lt;p&gt;6、通过ping一个外网域名来验证，外网可达性，比如说，ping www.baidu.com&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;副作用及解决（&lt;a href=&quot;https://docs.ucloud.cn/upd-docs/unetwork/faq.html#id27&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用某台云主机做外网网关后, 是否需要添加其他路由&lt;/a&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;会影响云主机和其他产品的内网通信，解决办法是添加静态路由。说明如下：云主机的流量可分为纵向流量: 外网流量以及ULB/UDB/UMem访问流量. 横向流量: 云主机间内网通讯. 默认路由修改到做网关的云主机后, 所有流量都会变为横向流量, 不仅影响纵向流量的效率, 也会导致无法和ULB/UDB/UMem通讯(因为内网IP伪造的安全规则会不通过). 解决方法是添加静态路由.&lt;/p&gt;
&lt;p&gt;Linux添加路由示例&lt;br&gt;华东机房&lt;br&gt;ip ro add 10.255.0.0/16 via 10.4.0.1&lt;br&gt;ip ro add 10.4.0.0/16 via 10.4.0.1&lt;br&gt;echo “ip ro add 10.255.0.0/16 via 10.4.0.1” &amp;gt;&amp;gt; /etc/rc.local&lt;br&gt;echo “ip ro add 10.4.0.0/16 via 10.4.0.1” &amp;gt;&amp;gt; /etc/rc.local&lt;/p&gt;
&lt;p&gt;北京BGP-A机房&lt;br&gt;ip ro add 10.255.0.0/16 via 10.6.0.1&lt;br&gt;ip ro add 10.6.0.0/16 via 10.6.0.1&lt;br&gt;echo “ip ro add 10.255.0.0/16 via 10.6.0.1” &amp;gt;&amp;gt; /etc/rc.local&lt;br&gt;echo “ip ro add 10.6.0.0/16 via 10.6.0.1” &amp;gt;&amp;gt; /etc/rc.local&lt;/p&gt;
&lt;p&gt;Windows添加路由示例&lt;br&gt;华东机房&lt;br&gt;route add 10.255.0.0 mask 255.255.0.0 10.4.0.1 /p&lt;br&gt;route add 10.4.0.0 mask 255.255.0.0 10.4.0.1 /p&lt;/p&gt;
&lt;p&gt;北京BGP-A机房&lt;br&gt;route add 10.255.0.0 mask 255.255.0.0 10.6.0.1 /p&lt;br&gt;route add 10.6.0.0 mask 255.255.0.0 10.6.0.1 /p&lt;/p&gt;
&lt;h3 id=&quot;u4E8C_u3001_u4F7F_u7528_u8DEF_u7531_u5668_u5B9E_u73B0_u5916_u7F51_u8BBF_u95EE&quot;&gt;&lt;a href=&quot;#u4E8C_u3001_u4F7F_u7528_u8DEF_u7531_u5668_u5B9E_u73B0_u5916_u7F51_u8BBF_u95EE&quot; class=&quot;headerlink&quot; title=&quot;二、使用路由器实现外网访问&quot;&gt;&lt;/a&gt;二、使用路由器实现外网访问&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;具体操作步骤：&lt;/strong&gt;&lt;br&gt;1、登录控制台，选择网络Unet下的路由器选项，点击创建路由器； &lt;/p&gt;
&lt;p&gt;2、在弹出的创建路由器页面中输入路由器名称，点击确认完成路由器创建；&lt;/p&gt;
&lt;p&gt;3、申请弹性EIP，将EIP绑定已经创建好的路由器；&lt;/p&gt;
&lt;p&gt;4、此时路由器列表页面中显示了与路由器关联的弹性外网IP和子网信息。如果子网机器需要访问外网，可以根据需要将创建的子网连接到路由器&lt;/p&gt;
&lt;p&gt;5、点击进入路由器的端口转发,添加转发规则。&lt;/p&gt;
&lt;p&gt;说明：采用第二种方法来实现外网访问可能有一点难以理解的地方，一般人可能会认为转发规则不应该是把外部的请求转发到内部主机吗，为什么这个可以实现由内到外的转发呢？其实是这样的，通过配置转发规则，相当于告诉SDN（UCloud的内网架构使用的就是SDN技术）这些流量是要通过路由出外网的，当流量发往默认网关的时候，SDN发现这些流量是要出外网的，于是通过SDN内部机制这些流量发往外网了。在借助路由器的情况下其实还有另外一种实现方式就是通过修改主机内部的网关，直接把流量引向路由，这样也可以实现我们的需求。&lt;/p&gt;
&lt;p&gt;补充：一台uhost能否同时既绑EIP又通过vrouter访问外网？&lt;br&gt;不能，目前主动出外网的方式分为两种，一个是直接绑定eip,通过nat转发,一个是通过vrouter端口转发，走vrouter。由于下一跳是二选一的，所以二者不能兼容。我们的产品策略是直接绑定eip优先级高于端口转发，所以同时做了端口转发和绑定eip,那么端口转发是不生效的。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://www.05do.com/blog/content/190&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解决Ucloud没有弹性IP的内网主机访问外网的问题&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://docs.ucloud.cn/upd-docs/uhost/guide.html#id9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实现外网对大数据机型云主机&amp;amp;物理主机的访问&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在UCloud平台使用云主机的时候，如果需要访问外网，一种比较直接的方式就是绑定EIP，但是在某些情况下我们并不希望给没给云主机都绑定一个EIP，比如说安装需要从外网下载软件的时候。这个时候我们该如何实现这个需求呢，在这种情况下，我们要求最少需要有一个EIP，这样可以通过一
    
    </summary>
    
    
      <category term="系统运维" scheme="http://zone.gaospot.com/tags/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
</feed>
