{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1},{"_id":"themes/icarus/source/vendor/source-code-pro/styles.css","path":"vendor/source-code-pro/styles.css","modified":1},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/styles.css","path":"vendor/open-sans/styles.css","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":1},{"_id":"themes/icarus/source/vendor/jquery/2.1.3/jquery.min.js","path":"vendor/jquery/2.1.3/jquery.min.js","modified":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff2","modified":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendor/font-awesome/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","path":"vendor/font-awesome/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","path":"vendor/font-awesome/fonts/fontawesome-webfont.eot","modified":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/FontAwesome.otf","path":"vendor/font-awesome/fonts/FontAwesome.otf","modified":1},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.min.css","path":"vendor/font-awesome/css/font-awesome.min.css","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/jquery.fancybox.pack.js","path":"vendor/fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/jquery.fancybox.js","path":"vendor/fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/jquery.fancybox.css","path":"vendor/fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","path":"vendor/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","path":"vendor/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-media.js","path":"vendor/fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-buttons.js","path":"vendor/fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-buttons.css","path":"vendor/fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/helpers/fancybox_buttons.png","path":"vendor/fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_sprite@2x.png","path":"vendor/fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_sprite.png","path":"vendor/fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_overlay.png","path":"vendor/fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_loading@2x.gif","path":"vendor/fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_loading.gif","path":"vendor/fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/icarus/source/vendor/fancybox/blank.gif","path":"vendor/fancybox/blank.gif","modified":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":1},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":1}],"Cache":[{"_id":"source/_posts/UCDN配置过程.md","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464624345777},{"_id":"source/404.md","shasum":"fdd40a8c92a8298e02c2bc8d678e485076f54301","modified":1455710103725},{"_id":"source/_posts/C语言中strcpy和memcpy.md","shasum":"2d256a53a99aab74b652e75df94a5bc7e9cdb0dc","modified":1461913411475},{"_id":"source/_posts/Centos6.5安装mysql5.6.md","shasum":"3963172132924b05437f77d231e490d8f03225a4","modified":1461915128535},{"_id":"source/_posts/C语言中的位域.md","shasum":"4290280df45c1c87091b3d3927f465894abe009a","modified":1461912126489},{"_id":"source/_posts/C语言可变参数函数.md","shasum":"29bf49ccf43e385ee76b32154d647d9379c03ab5","modified":1461910641504},{"_id":"source/_posts/Debian一些软件的安装.md","shasum":"cc7302ea8987b4b832a1d46186855cea57339a1a","modified":1461912982638},{"_id":"source/_posts/Docker安装.md","shasum":"6a67ca3bf5741255372a8a39979927a82cc859c2","modified":1461489154862},{"_id":"source/_posts/Docker镜像创建.md","shasum":"60b1550824691ba88e925c4b7154a8ff73ce3ab6","modified":1462931603615},{"_id":"source/_posts/Hello Hexo —— 我的个人博客搭建记录.md","shasum":"cc8587d6fbeaf8bfaf843b61fd2c97c781e1b5c4","modified":1462450471673},{"_id":"source/_posts/Java中的String与StringBuffer.md","shasum":"cfdc5415a863d47b6d89014c2566c256c57ff128","modified":1461920745368},{"_id":"source/_posts/Linux下的局域网小工具.md","shasum":"7239b6512c471566f9ad0de73bd0b746e0db010e","modified":1461914152881},{"_id":"source/_posts/Linux和Android启动过程.md","shasum":"60c8e830ba39c3c3e2f0bb5b4ac4556f8bf6d6f2","modified":1461914895715},{"_id":"source/_posts/Linux学习过程中的问题.md","shasum":"ee2ed3c2a3b1ddcfa7d5dbdbd53a6826b47c21d5","modified":1461911004109},{"_id":"source/_posts/Linux磁盘管理.md","shasum":"dcb80b16ea107410e28f51a06ba82af4d07c9902","modified":1461195152771},{"_id":"source/_posts/Mysql初始安装及配置.md","shasum":"5296e310f93476d1d564d9e1bc395e2bfb01ef17","modified":1463569121664},{"_id":"source/_posts/Mysql主从配置.md","shasum":"c491d03aa454228f7eb1fbfaae4ee411818d825e","modified":1463569118911},{"_id":"source/_posts/Mysql备份与恢复.md","shasum":"f65fc84883044223cf3e5171b6bcf47232817f60","modified":1463806620200},{"_id":"source/_posts/Mysql慢查询分析与优化.md","shasum":"5d27533879b5e9a90b1fa599e3b5e25043af3087","modified":1463569036554},{"_id":"source/_posts/Mysql常见问题排错.md","shasum":"c8bac512dcaca04960622e213d347628b0ed7355","modified":1462333212576},{"_id":"source/_posts/Mysql问题分析工具.md","shasum":"a8b2fd3ce86808e3131e55d38316753a6178f26c","modified":1463648184035},{"_id":"source/_posts/UCDN配置过程","shasum":"fdb86c2ec362fadf69885d106728d15d66caea5a","modified":1464626006981},{"_id":"source/_posts/Redmine介绍.md","shasum":"200c6c1717d335b0967eff6ce3f6622b8b4c346b","modified":1459438701930},{"_id":"source/_posts/UCloud上LNMP小型网站搭建.md","shasum":"368b82927c499a605eadad716579a76601f47251","modified":1459594141426},{"_id":"source/_posts/Win2008搭建Web和FTP服务.md","shasum":"a2574d6f7fb4f640a8945667ca38090568c8bd9c","modified":1460313432812},{"_id":"source/_posts/UCloud上LAMP小型网站搭建与测试.md","shasum":"cb6fb12cca9260d58575e0f3d905a5fd71e894b1","modified":1464622245296},{"_id":"source/_posts/Unix网络编程unp.h问题以及Linux中的库.md","shasum":"ceb8bf287da367026c2e6234d78d8a64663cf97a","modified":1461912786761},{"_id":"source/_posts/Yavide通过vim实现的C C++现代IDE.md","shasum":"4965017b86db73121b069d05f755c5795bd6a968","modified":1461914890246},{"_id":"source/_posts/apache和tomcat的区别.md","shasum":"5eaeea2ab1ee5d69149aa0ad3f4d7b545426e917","modified":1461922682154},{"_id":"source/_posts/gcc编译C程序的过程.md","shasum":"52ec25192dd71aacda3a38e18abd4c8f92e12f2c","modified":1461911746670},{"_id":"source/_posts/jsp中文编码.md","shasum":"959bb8ee8c916302281f66c0161408bc20275b0c","modified":1461921278474},{"_id":"source/_posts/jsp 中定义函数.md","shasum":"117411dc96f163202ba8cb81b5a030ceca49d671","modified":1461920255847},{"_id":"source/_posts/单机Web服务器性能.md","shasum":"0bbf2996ebd76567ba51e161f1bb45363f38e911","modified":1460741881311},{"_id":"source/_posts/使用git上传已有的代码到github上.md","shasum":"1cc4fcbcf4a6f9fcee44ff9d6fb215834395783e","modified":1461913192710},{"_id":"source/_posts/云直播（ULive）初体验.md","shasum":"6035cfae895714f376954a8d0a5f53eed9ed11ac","modified":1462787384250},{"_id":"source/_posts/如何成为一名优秀的技术支持.md","shasum":"649eaf5fcead949620b10a0087e0b6cb8c4bf4ac","modified":1462450427796},{"_id":"source/_posts/无EIP云主机访问外网.md","shasum":"e19c8df052fdb9648af45959c4fba69076d4c7a9","modified":1462331557299},{"_id":"source/_posts/直播（Ulive）架构.md","shasum":"2010b6540e7e2a7c6c526b892a467b593a189b2d","modified":1464183011105},{"_id":"source/_posts/第一个Java Google engine程序.md","shasum":"399304230def2dac5e869535ea2d5a63c2e6e1f8","modified":1461913747327},{"_id":"source/about/index.md","shasum":"76598a5702be2694df4bbd9f91e18578d08ac823","modified":1460313324971},{"_id":"source/_posts/HTML标签总结.md","shasum":"6e6731c405a74eecc3d1fcb495a767eb99375e45","modified":1461922353695},{"_id":"source/_posts/直播（ulive）进阶使用.md","shasum":"aa997bbfc5755141e95c1bebc2fdf8cea5a83f4b","modified":1464626012593},{"_id":"source/favicon.ico","shasum":"5c64775ff2a456656c7be2c8ed501282a0601d0b","modified":1455710103734},{"_id":"themes/icarus/README.md","shasum":"195b0254008bd9f388ae2ab85b7a706e1786665f","modified":1458151948190},{"_id":"themes/icarus/_config.yml","shasum":"b0317804b82afce5e0c371fe2678d7dc48ad616c","modified":1464619231534},{"_id":"themes/icarus/LICENSE","shasum":"73ed09aa00f7bda6319fc7d5b722fb40e0c2017e","modified":1458151948178},{"_id":"themes/icarus/languages/en.yml","shasum":"36885725f74dc693aad7378a06a265e4fc57b3c9","modified":1458151948248},{"_id":"themes/icarus/_source/categories/index.md","shasum":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1458151948217},{"_id":"themes/icarus/_source/tags/index.md","shasum":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1458151948244},{"_id":"themes/icarus/_source/about/index.md","shasum":"0a1f66704011f283f4f90a10d41588f8986f8616","modified":1458151948212},{"_id":"themes/icarus/languages/es.yml","shasum":"023f0fda1de1c3e9c72f262662b464c479b02d80","modified":1458151948252},{"_id":"themes/icarus/languages/id.yml","shasum":"df3186b8f8975dd23cb1b965b3ff5e66308d55d5","modified":1458151948263},{"_id":"themes/icarus/languages/fr.yml","shasum":"e050775371c35d1a8b96d91a7a0e2062e876b50b","modified":1458151948258},{"_id":"themes/icarus/languages/ja.yml","shasum":"385ce32cf9a99515fb9f9c1d0eb6adf9ef62ff1e","modified":1458151948277},{"_id":"themes/icarus/languages/zh-CN.yml","shasum":"972d275d68af1b01ca0da729f489b3799719923d","modified":1458151948295},{"_id":"themes/icarus/languages/ko.yml","shasum":"0af22d8d5015a275594d591b1103e863ed1936cf","modified":1458151948287},{"_id":"themes/icarus/layout/archive.ejs","shasum":"be5ae7f3cf84ff6d5ef9d6d0f1e1af0115adf875","modified":1458151948301},{"_id":"themes/icarus/languages/zh-TW.yml","shasum":"747fa7ad905d807283442186e201e95f5b4434a8","modified":1458151948298},{"_id":"themes/icarus/layout/categories.ejs","shasum":"7be3918bcfb9f04b5213aeda4ad19c952128bee3","modified":1458151948308},{"_id":"themes/icarus/layout/category.ejs","shasum":"18e49d6aa86f90ea27846f3bdba0f22acacd91f7","modified":1458151948311},{"_id":"themes/icarus/layout/comment/counter.ejs","shasum":"2c552aaa6d820043c35f81305863775417efc247","modified":1458151948318},{"_id":"themes/icarus/languages/ru.yml","shasum":"11999356a69c125e48b4e1ceed900e96a6c2cb5f","modified":1458151948291},{"_id":"themes/icarus/layout/comment/index.ejs","shasum":"c36e6b376647ae715d417cb928c2082ef56766a9","modified":1458151948343},{"_id":"themes/icarus/layout/comment/disqus.ejs","shasum":"84988da295ab8c509e24299c2c857d707cf78f77","modified":1458151948327},{"_id":"themes/icarus/layout/comment/youyan.ejs","shasum":"b4c49b97b757d01ba0c4e16f9862a2ec05f37b1f","modified":1458151948386},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","shasum":"adc024b7205e934e64c98a5b912c41117a4425bd","modified":1458151948337},{"_id":"themes/icarus/layout/comment/scripts.ejs","shasum":"8767c30714baf8011bb191b8a1c652ea114a53f2","modified":1458151948353},{"_id":"themes/icarus/layout/common/footer.ejs","shasum":"d1812a87a26a48723c30d32bf4a1f57f3b01908e","modified":1458151948422},{"_id":"themes/icarus/layout/common/article.ejs","shasum":"81996ac9f784ba8da06c2b6df85a60b195e47981","modified":1458151948418},{"_id":"themes/icarus/layout/common/archive.ejs","shasum":"17b24d74e7cdf2a3aae9bd9b8e8d23e1fb895ab6","modified":1458151948406},{"_id":"themes/icarus/layout/common/post/banner.ejs","shasum":"83fbeadc3743fa944bdcab3693912a3e2142b858","modified":1458151948487},{"_id":"themes/icarus/layout/common/post/category.ejs","shasum":"96f999573eb908f7129a1c09e486d46d630c0a7d","modified":1458151948494},{"_id":"themes/icarus/layout/common/post/date.ejs","shasum":"fc90dbfc227563029ece7cff13585083b62935bc","modified":1458151948498},{"_id":"themes/icarus/layout/common/post/gallery.ejs","shasum":"941fbf13acbb39490ee81ffaf4baf4b3f0956407","modified":1458151948506},{"_id":"themes/icarus/layout/common/header.ejs","shasum":"c75d5c3e956f70b0b82552f1e3f5749f0229ddd7","modified":1458151948472},{"_id":"themes/icarus/layout/common/post/tag.ejs","shasum":"7df16851b35da0ea09f7323bdbfb977198823f4c","modified":1458151948515},{"_id":"themes/icarus/layout/common/post/title.ejs","shasum":"3620e4dad9c7f9c31efd4ad6cf5872cfb9d418c2","modified":1458151948519},{"_id":"themes/icarus/layout/common/head.ejs","shasum":"8a38f6030442b66df4516b76bfb739e732c0c825","modified":1458151948440},{"_id":"themes/icarus/layout/common/post/nav.ejs","shasum":"79d15e00ead668bf44a48f4e870ac0cde9dbdee3","modified":1458151948509},{"_id":"themes/icarus/layout/common/scripts.ejs","shasum":"6c39352254c93f1fbedb4e81d2fdc94f34f54c2e","modified":1458151948549},{"_id":"themes/icarus/layout/common/sidebar.ejs","shasum":"017d16d0efb6c7a6280dfa138c10fdaff3256a41","modified":1458151948553},{"_id":"themes/icarus/layout/common/thumbnail.ejs","shasum":"ac85581a5eff43b7bb1bb845c62561cba216abb0","modified":1458151948568},{"_id":"themes/icarus/layout/index.ejs","shasum":"2aeea299bb509ef084c01359a3a0aa3b1b3d920f","modified":1458151948571},{"_id":"themes/icarus/layout/page.ejs","shasum":"50170783bac99946ae8af483920568de9b2d9801","modified":1458151948585},{"_id":"themes/icarus/layout/common/profile.ejs","shasum":"2756f253ab44d0138d1ea238d36d4ef95410aa5d","modified":1458151948544},{"_id":"themes/icarus/layout/layout.ejs","shasum":"2bc1e3071a5ec25096584d01726a3b7c4d53ffaf","modified":1458151948580},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","shasum":"760a8f9ee9b81f6eb27a5f2c8c5159b220a88a74","modified":1458151948623},{"_id":"themes/icarus/layout/post.ejs","shasum":"50170783bac99946ae8af483920568de9b2d9801","modified":1458151948662},{"_id":"themes/icarus/layout/common/summary.ejs","shasum":"b5e23a0ab260de8b1060626128daa6c1dd0d6112","modified":1458151948561},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","shasum":"3218b9f6345aaa537f742ab4781bd27a3f40c378","modified":1458151948614},{"_id":"themes/icarus/layout/search/index-mobile.ejs","shasum":"40a2c0904ba04f754a9fd2582b897d431dd8a032","modified":1458151948725},{"_id":"themes/icarus/layout/search/index.ejs","shasum":"c0d18d3e759cf4f53de591ea49737923f0e14a20","modified":1458151948735},{"_id":"themes/icarus/layout/search/baidu.ejs","shasum":"8cc6f6e601b14d310f20eaf29dc55d6c60ab4ee4","modified":1458151948684},{"_id":"themes/icarus/layout/plugin/scripts.ejs","shasum":"0dd990a8fcc76ccff8c570f603cdf80fef9e7916","modified":1458151948661},{"_id":"themes/icarus/layout/search/swiftype.ejs","shasum":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1458151948741},{"_id":"themes/icarus/layout/share/addtoany.ejs","shasum":"b79f714da69c121729a136df0c94c09a85966d44","modified":1458151948747},{"_id":"themes/icarus/layout/share/index.ejs","shasum":"52c094140d19e7e2fce57fe43968b2bd86aa4ef0","modified":1458151948798},{"_id":"themes/icarus/layout/share/default.ejs","shasum":"8532f15f400dbc7c1e89ab26972fc4e404001849","modified":1458151948772},{"_id":"themes/icarus/layout/share/jiathis.ejs","shasum":"442abbc0fe5cab4171179257d172150f2a789638","modified":1458151948808},{"_id":"themes/icarus/layout/tag.ejs","shasum":"e1b74670842eea8fcbd15943f7d9bc6eeef24c71","modified":1458151948811},{"_id":"themes/icarus/layout/share/bdshare.ejs","shasum":"d2a0826700c51d9edaf21fa6cbb047b5127cec8a","modified":1458151948764},{"_id":"themes/icarus/layout/widget/archive.ejs","shasum":"d6412cd574744f994f16e3a70ce29a71b449133a","modified":1458151948842},{"_id":"themes/icarus/layout/widget/category.ejs","shasum":"81c6c0a3450e1ab56a725bb953a5021a07c0e212","modified":1458151948846},{"_id":"themes/icarus/layout/tags.ejs","shasum":"2a5b11bdf0dbf7300e11eae34bba00490ed77a0f","modified":1458151948833},{"_id":"themes/icarus/layout/widget/tag.ejs","shasum":"cf8a87b0573c9ff11d82ca5edb86267f77e11589","modified":1458151948875},{"_id":"themes/icarus/layout/widget/links.ejs","shasum":"23d637daed63e86ec7c4a12f5a48908905ed7819","modified":1458151948852},{"_id":"themes/icarus/package.json","shasum":"77fb10efa37f0ce36c01cecb44f91629e0fcf7f6","modified":1458151948883},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","shasum":"a4b28996e0e7df2e582387455c02f5c33f691bbd","modified":1458151948880},{"_id":"themes/icarus/scripts/excerpt.js","shasum":"61118ffd53158c6620010f6362752745f8372469","modified":1458151948888},{"_id":"themes/icarus/scripts/fancybox.js","shasum":"c5ccce47ecfa93925c54516f6af85d690f8f6476","modified":1458151948892},{"_id":"themes/icarus/scripts/meta.js","shasum":"2e5ac0cb9c90c072ca4b33e88f1892e954935ab7","modified":1458151948898},{"_id":"themes/icarus/scripts/thumbnail.js","shasum":"c2b6e61d2b67f85855b52aec0a720cfc01aa50a2","modified":1458151948903},{"_id":"themes/icarus/source/css/_extend.styl","shasum":"74dc73324adde45f2635be99e7b44fd8939342e0","modified":1458151948947},{"_id":"themes/icarus/source/css/_highlight/agate.styl","shasum":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1458151948952},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","shasum":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1458151948956},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","shasum":"7767972b9d0cba456f0e0cff1b96b516936414ea","modified":1458151948872},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","shasum":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1458151948971},{"_id":"themes/icarus/source/css/_highlight/arta.styl","shasum":"3bc322455f657aa29f455f91009034af08cdc65c","modified":1458151949251},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","shasum":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1458151949264},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","shasum":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1458151949320},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","shasum":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1458151949314},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","shasum":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1458151949273},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","shasum":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1458151949279},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","shasum":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1458151949327},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","shasum":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1458151949342},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","shasum":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1458151949347},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","shasum":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1458151949354},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","shasum":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1458151949358},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","shasum":"c1db353e8613607580d40b12ddc162d029560576","modified":1458151949364},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","shasum":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1458151949368},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","shasum":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1458151949385},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","shasum":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1458151949388},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","shasum":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1458151949450},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","shasum":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1458151949455},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","shasum":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1458151949464},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","shasum":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1458151949475},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","shasum":"08e2df313c272d5c70c93e713639663c168180d0","modified":1458151949512},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","shasum":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1458151949517},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","shasum":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1458151949551},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","shasum":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1458151949523},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","shasum":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1458151949554},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","shasum":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1458151949558},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","shasum":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1458151949563},{"_id":"themes/icarus/source/css/_highlight/dark.styl","shasum":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1458151949568},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","shasum":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1458151949574},{"_id":"themes/icarus/source/css/_highlight/docco.styl","shasum":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1458151949579},{"_id":"themes/icarus/source/css/_highlight/far.styl","shasum":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1458151949585},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","shasum":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1458151949590},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","shasum":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1458151949595},{"_id":"themes/icarus/source/css/_highlight/github.styl","shasum":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1458151949600},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","shasum":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1458151949605},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","shasum":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1458151949641},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","shasum":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1458151949644},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","shasum":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1458151949647},{"_id":"themes/icarus/source/css/_highlight/index.styl","shasum":"57298fa8ae862ac69f2e368957e2e63bb22bf3b8","modified":1458151949658},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","shasum":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1458151949651},{"_id":"themes/icarus/source/css/_highlight/idea.styl","shasum":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1458151949655},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","shasum":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1458151949661},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","shasum":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1458151949664},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","shasum":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1458151949667},{"_id":"themes/icarus/source/css/_highlight/magula.styl","shasum":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1458151949670},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","shasum":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1458151949673},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","shasum":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1458151949677},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","shasum":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1458151949680},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","shasum":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1458151949682},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","shasum":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1458151949686},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","shasum":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1458151949689},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","shasum":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1458151949692},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","shasum":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1458151949695},{"_id":"themes/icarus/source/css/_highlight/school-book.png","shasum":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1458151949702},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","shasum":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1458151949698},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","shasum":"516c7080d64b12730357358dee2adc42c43c4516","modified":1458151949701},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","shasum":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1458151949705},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","shasum":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1458151949708},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","shasum":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1458151949711},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","shasum":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1458151949714},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","shasum":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1458151949720},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","shasum":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1458151949717},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","shasum":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1458151949727},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","shasum":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1458151949724},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","shasum":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1458151949730},{"_id":"themes/icarus/source/css/_highlight/vs.styl","shasum":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1458151949733},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","shasum":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1458151949740},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","shasum":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1458151949736},{"_id":"themes/icarus/source/css/_partial/comment.styl","shasum":"7fc8a32cf235d0a977d9ff0c49263c0541025222","modified":1458151949750},{"_id":"themes/icarus/source/css/_partial/archive.styl","shasum":"68fdfc3ba48950e63fcebe66ee911376cd7ee389","modified":1458151949744},{"_id":"themes/icarus/source/css/_partial/footer.styl","shasum":"06c2c9029ebfb16880a203c218657048a83a3e4b","modified":1458151949754},{"_id":"themes/icarus/source/css/_partial/article.styl","shasum":"921eb4853dbfbc56bada75b28de04293cd312c5a","modified":1458151949748},{"_id":"themes/icarus/source/css/_partial/header.styl","shasum":"f354d682fb9e088524227649cc92f55ffefca791","modified":1458151949757},{"_id":"themes/icarus/source/css/_partial/profile.styl","shasum":"4d1b049be19513e0f9662d3a884bfba51ba3b927","modified":1458151949781},{"_id":"themes/icarus/source/css/_util/grid.styl","shasum":"866fc18d6368c4131b03601a15af7703a9a42b61","modified":1458151949789},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","shasum":"c06b3fcec86ea7abd46e7f39e7a65b3c4382d0fa","modified":1458151949784},{"_id":"themes/icarus/source/css/_variables.styl","shasum":"6bc82c3de6b6c3924105d717353d099dbd41961f","modified":1458151949799},{"_id":"themes/icarus/source/css/_util/mixin.styl","shasum":"3f8730ec2b1b582ba93b14f0e50a41fbbce52755","modified":1458151949793},{"_id":"themes/icarus/source/css/images/logo.png","shasum":"e606a0584f98268b2fe92303f3254520862ef659","modified":1458151949802},{"_id":"themes/icarus/source/css/images/avatar.png","shasum":"2d237cebf9029989ed487560c89bedc5fc34bf9d","modified":1458154446073},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","shasum":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1458151949804},{"_id":"themes/icarus/source/vendor/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458151949814},{"_id":"themes/icarus/source/css/style.styl","shasum":"c761542b598965feb346d330685a3c299c11e0f4","modified":1458151949806},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1458151949818},{"_id":"themes/icarus/source/js/main.js","shasum":"223bebebd7c310709b7b346e22e9b8c8228b55bd","modified":1458151949812},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458151949817},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458151949819},{"_id":"themes/icarus/source/vendor/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458151949821},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"6394c48092085788a8c0ef72670b0652006231a1","modified":1458151949823},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1458151949829},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1458151949839},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-media.js","shasum":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1458151949837},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1458151949846},{"_id":"themes/icarus/source/vendor/fancybox/jquery.fancybox.css","shasum":"7d6fb89347808ccb2a6b4e4cc28fbf18f179109e","modified":1458151949850},{"_id":"themes/icarus/source/vendor/fancybox/jquery.fancybox.js","shasum":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1458151949860},{"_id":"themes/icarus/source/vendor/fancybox/jquery.fancybox.pack.js","shasum":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1458151949871},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.min.css","shasum":"3e435d5167460aaf367836e1973e90a47039faea","modified":1458151949875},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","shasum":"3e63fc9b3de4580f1f3bec0631436f755b80f167","modified":1458151949958},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","shasum":"1075231650f579955905bb2f6527148a8e2b4b16","modified":1458151950120},{"_id":"themes/icarus/source/vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","shasum":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1458151950167},{"_id":"themes/icarus/source/vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","shasum":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1458151950161},{"_id":"themes/icarus/source/vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","shasum":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1458151950171},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","shasum":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1458151950174},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","shasum":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1458151950192},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","shasum":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1458151950195},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","shasum":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1458151950198},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","shasum":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1458151950202},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","shasum":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1458151950206},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","shasum":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1458151950239},{"_id":"themes/icarus/source/vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","shasum":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1458151950255},{"_id":"themes/icarus/source/vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","shasum":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1458151950259},{"_id":"themes/icarus/source/vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","shasum":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1458151950263},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","shasum":"5067c81462c15422853c94d21a1726865a61634f","modified":1458151950267},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","shasum":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1458151950272},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","shasum":"d22904914469be735490e3c8cb093c7862896dd5","modified":1458151950275},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","shasum":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1458151950298},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","shasum":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1458151950311},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","shasum":"e75607ba1417181397c700775b84303d5a2957b9","modified":1458151950352},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","shasum":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1458151950368},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","shasum":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1458151950372},{"_id":"themes/icarus/source/vendor/open-sans/styles.css","shasum":"08c8c7eeaf34cb2f8c3312a3ce2e96b58ce2b4c0","modified":1458151950375},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","shasum":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1458151950384},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","shasum":"942addaec4d3a60af33947a84a3d85f926015947","modified":1458151950380},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/FontAwesome.otf","shasum":"cde9eb92c8a3ba23d648f76ea3931511f30813f4","modified":1458151949896},{"_id":"themes/icarus/source/vendor/source-code-pro/styles.css","shasum":"6335d719343cca455152ad71a1aaed9868339236","modified":1458151950387},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","shasum":"9088143b19979779b2116cef38b661f72d982e19","modified":1458151950051},{"_id":"themes/icarus/source/vendor/jquery/2.1.3/jquery.min.js","shasum":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1458151950157},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458151949815},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458151949816},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","shasum":"56ce13e71c2150d81bc972940584915181bd6081","modified":1458151950115},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","shasum":"0b42e5ee7daafb72b1237b9d5b7f5ab0775fffc7","modified":1458151950041},{"_id":"public/favicon.ico","modified":1464626521913,"shasum":"5c64775ff2a456656c7be2c8ed501282a0601d0b"},{"_id":"public/vendor/source-code-pro/styles.css","modified":1464626521918,"shasum":"93c308012738728f906cd4c5cfdb34189e0c712b"},{"_id":"public/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1464626521920,"shasum":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310"},{"_id":"public/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1464626521923,"shasum":"942addaec4d3a60af33947a84a3d85f926015947"},{"_id":"public/vendor/open-sans/styles.css","modified":1464626521927,"shasum":"5ca6e111046232bde112d33201a60532aee7d3c4"},{"_id":"public/vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":1464626521927,"shasum":"be365eca44760ce3fc9b377c43d4634958479c69"},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":1464626521927,"shasum":"d0b40a7848703556c6631f24e961a98ca5829255"},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":1464626521927,"shasum":"e75607ba1417181397c700775b84303d5a2957b9"},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":1464626521927,"shasum":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c"},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":1464626521927,"shasum":"ae80fb3cd16339aa7b5da280ab53975523dcaac2"},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":1464626521943,"shasum":"d22904914469be735490e3c8cb093c7862896dd5"},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":1464626521943,"shasum":"b366f2fda2e524eb5ef50058eefff249a3b96e6c"},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":1464626521943,"shasum":"5067c81462c15422853c94d21a1726865a61634f"},{"_id":"public/vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":1464626521943,"shasum":"113978181dcac77baecef6115a9121d8f6e4fc3a"},{"_id":"public/vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":1464626521943,"shasum":"afc44700053c9a28f9ab26f6aec4862ac1d0795d"},{"_id":"public/vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":1464626521958,"shasum":"be201d32a9aa5d186723ebb3c538be691aa8c53a"},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":1464626521958,"shasum":"c5f29fed6632efe0aa83318369f0d8c4061b775b"},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":1464626521958,"shasum":"a0b0c389cf46d63c850e61fed572485ff0b68183"},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":1464626521958,"shasum":"415eee05976ab8b2471602a5ddb78a6c58fc21aa"},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":1464626521974,"shasum":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf"},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":1464626521974,"shasum":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f"},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":1464626521974,"shasum":"63eb74ef040aade256f2274a7f31a914edddb0ea"},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":1464626521974,"shasum":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f"},{"_id":"public/vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":1464626521974,"shasum":"2c5b039b57f62625e88226a938679ec937431ad1"},{"_id":"public/vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":1464626521990,"shasum":"e0350190d720a8fec0557ab47b318ec4e4486448"},{"_id":"public/vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":1464626521990,"shasum":"c4248ea800bd5608344ce163f5658b57e7ef9410"},{"_id":"public/vendor/jquery/2.1.3/jquery.min.js","modified":1464626521990,"shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276"},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.woff2","modified":1464626521990,"shasum":"1075231650f579955905bb2f6527148a8e2b4b16"},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.woff","modified":1464626521990,"shasum":"56ce13e71c2150d81bc972940584915181bd6081"},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.ttf","modified":1464626522006,"shasum":"9088143b19979779b2116cef38b661f72d982e19"},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.svg","modified":1464626522006,"shasum":"0b42e5ee7daafb72b1237b9d5b7f5ab0775fffc7"},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.eot","modified":1464626522006,"shasum":"3e63fc9b3de4580f1f3bec0631436f755b80f167"},{"_id":"public/vendor/font-awesome/fonts/FontAwesome.otf","modified":1464626522021,"shasum":"cde9eb92c8a3ba23d648f76ea3931511f30813f4"},{"_id":"public/vendor/font-awesome/css/font-awesome.min.css","modified":1464626522033,"shasum":"8c15c6bd82c71e9ef1bb11cf24e502fe07518ac5"},{"_id":"public/vendor/fancybox/jquery.fancybox.pack.js","modified":1464626522040,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/vendor/fancybox/jquery.fancybox.js","modified":1464626522057,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/vendor/fancybox/jquery.fancybox.css","modified":1464626522086,"shasum":"9673e160d32c4811bb7e930ba1e20c36b2997fe1"},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1464626522091,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1464626522103,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-media.js","modified":1464626522121,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-buttons.js","modified":1464626522136,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-buttons.css","modified":1464626522139,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/vendor/fancybox/helpers/fancybox_buttons.png","modified":1464626522183,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/vendor/fancybox/fancybox_sprite@2x.png","modified":1464626522189,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/vendor/fancybox/fancybox_sprite.png","modified":1464626522199,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/vendor/fancybox/fancybox_overlay.png","modified":1464626522206,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/vendor/fancybox/fancybox_loading@2x.gif","modified":1464626522221,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/vendor/fancybox/fancybox_loading.gif","modified":1464626522231,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/vendor/fancybox/blank.gif","modified":1464626522242,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/js/main.js","modified":1464626522247,"shasum":"e3f40fd50df9919446aa153253a6b466ab29a9d4"},{"_id":"public/css/style.css","modified":1464626523530,"shasum":"55edd296807a0e5515ddbad551a603fe6d22088d"},{"_id":"public/css/images/thumb-default-small.png","modified":1464626523831,"shasum":"e8403b97ed9251f9f5207765b0ce796c5000b4ba"},{"_id":"public/css/images/logo.png","modified":1464626523831,"shasum":"e606a0584f98268b2fe92303f3254520862ef659"},{"_id":"public/css/images/avatar.png","modified":1464626523831,"shasum":"2d237cebf9029989ed487560c89bedc5fc34bf9d"},{"_id":"public/404.html","modified":1464626523984,"shasum":"559ac7638f97c872057a5e96fc3f1ee092c3d610"},{"_id":"public/about/index.html","modified":1464626524016,"shasum":"d11a976b8c031f2dc7e2e00729e10bd63fd9c0a3"},{"_id":"public/2016/05/31/UCDN配置过程/index.html","modified":1464626524056,"shasum":"27eae7a4accd006a91af348017f6b935890738cc"},{"_id":"public/2016/05/25/直播（Ulive）架构/index.html","modified":1464626524091,"shasum":"9d5cc54d455ed43da3471f38da6d3d0f57d6a8d6"},{"_id":"public/2016/05/24/直播（ulive）进阶使用/index.html","modified":1464626524150,"shasum":"ef6e81bce9f74ee4eea6bfe5eef1b8b26a123809"},{"_id":"public/2016/05/21/Mysql备份与恢复/index.html","modified":1464626524219,"shasum":"ea3ac8ed52c531e186cab820eba9383bbaa97b4e"},{"_id":"public/2016/05/19/Mysql问题分析工具/index.html","modified":1464626524285,"shasum":"6b3caf1d839857cb3ae2eed3a89c2817f5969e71"},{"_id":"public/2016/05/18/Mysql慢查询分析与优化/index.html","modified":1464626524320,"shasum":"5d559bbf87d2a3a63562df421bab3bb2497b7675"},{"_id":"public/2016/05/17/Mysql主从配置/index.html","modified":1464626524336,"shasum":"171c6ef11282337424d2a3e5add78f1f708ea3e2"},{"_id":"public/2016/05/17/Mysql初始安装及配置/index.html","modified":1464626524362,"shasum":"79b44a4e405cd04672abae3127f56ed84d700d41"},{"_id":"public/2016/05/11/Docker镜像创建/index.html","modified":1464626524390,"shasum":"122d069f08d9e1a877bc2fc2a8dfcc316e1c2231"},{"_id":"public/2016/05/09/云直播（ULive）初体验/index.html","modified":1464626524403,"shasum":"06f1268657aa402cbf28e55ab81178d2135b54a9"},{"_id":"public/2016/05/04/Mysql常见问题排错/index.html","modified":1464626524421,"shasum":"a319106ed59b392a43a78a23f612f876bf3d48e2"},{"_id":"public/2016/05/03/如何成为一名优秀的技术支持/index.html","modified":1464626524453,"shasum":"aa7de6143bdb8375fb3b06e4527c3b9ed6d6efa8"},{"_id":"public/2016/04/25/无EIP云主机访问外网/index.html","modified":1464626524470,"shasum":"bddade5537353a57fa08c8b80915dd5cb8f9d01f"},{"_id":"public/2016/04/24/Docker安装/index.html","modified":1464626524487,"shasum":"ebf0935eca71585342b67812426d8c202fe892ed"},{"_id":"public/2016/04/21/Linux磁盘管理/index.html","modified":1464626524515,"shasum":"1488965895b687e43a306d9e14f651c5af446827"},{"_id":"public/2016/04/16/单机Web服务器性能/index.html","modified":1464626524532,"shasum":"419877dbf5e00036d13bf00e54896f5149b5d369"},{"_id":"public/2016/04/11/Win2008搭建Web和FTP服务/index.html","modified":1464626524556,"shasum":"2f10cb2cc6546c91abfd8dff618c2c02dddfeda9"},{"_id":"public/2016/04/01/UCloud上LNMP小型网站搭建/index.html","modified":1464626524577,"shasum":"09c7049a50b34ce7e9f37cab11d4ba84c0eaf1ef"},{"_id":"public/2016/03/30/UCloud上LAMP小型网站搭建与测试/index.html","modified":1464626524593,"shasum":"a92f6733ef61767618766bb4f5c2642bdb41b30f"},{"_id":"public/2016/02/17/Redmine介绍/index.html","modified":1464626524608,"shasum":"fbf5285adea9e4e7fcfaa5c2e66f8fb976a5c0ab"},{"_id":"public/2016/01/15/Hello Hexo —— 我的个人博客搭建记录/index.html","modified":1464626524623,"shasum":"d711991ed752c45a09cd12f31f44de60b4470121"},{"_id":"public/2015/11/19/Centos6.5安装mysql5.6/index.html","modified":1464626524637,"shasum":"35b6fff0b382893c9682e9444fea1c4647760388"},{"_id":"public/2015/10/22/Yavide通过vim实现的C C++现代IDE/index.html","modified":1464626524660,"shasum":"d2963a124a286896cb5e9f3461aed6c74a1009c6"},{"_id":"public/2014/10/15/Linux和Android启动过程/index.html","modified":1464626524679,"shasum":"d808ff94cae7284508ac2cb86cfad99b34e66a30"},{"_id":"public/2014/10/06/Linux下的局域网小工具/index.html","modified":1464626524691,"shasum":"2d0162b9435698382a81d4a078cfb639a347e605"},{"_id":"public/2014/04/29/第一个Java Google engine程序/index.html","modified":1464626524705,"shasum":"bbb5aa5bae20b089f3af68c586e1c8fea602e3bb"},{"_id":"public/2014/04/22/C语言中strcpy和memcpy/index.html","modified":1464626524723,"shasum":"31f82c7e341630ce197194f87ee9a7e797d0dc03"},{"_id":"public/2014/04/14/使用git上传已有的代码到github上/index.html","modified":1464626524736,"shasum":"4b763651d0726c917cc1d74396bda01ab1316137"},{"_id":"public/2014/04/14/Debian一些软件的安装/index.html","modified":1464626524750,"shasum":"6115ac8e2237927d2ca15e6c9c3c828523869fbc"},{"_id":"public/2014/03/17/Unix网络编程unp.h问题以及Linux中的库/index.html","modified":1464626524770,"shasum":"880fa208ac97e286d6416ee624d8204edc48b543"},{"_id":"public/2014/01/29/C语言中的位域/index.html","modified":1464626524796,"shasum":"e12fbfb9b51fe815b6112ec651acb22d6ec69ae4"},{"_id":"public/2014/01/21/gcc编译C程序的过程/index.html","modified":1464626524830,"shasum":"2cfd57099e6d8d288813d21f333c740c3baef1ae"},{"_id":"public/2014/01/11/C语言可变参数函数/index.html","modified":1464626524852,"shasum":"d0615459cfd439aabadef66260c0138bc8b28f50"},{"_id":"public/2014/01/08/Linux学习过程中的问题/index.html","modified":1464626524867,"shasum":"ab431bbeb5c98914728e4e5e5f27cd553c843333"},{"_id":"public/2013/12/27/jsp中文编码/index.html","modified":1464626524882,"shasum":"ae5a944c866c0a972217d376f596db840da85fc8"},{"_id":"public/2013/12/21/apache和tomcat的区别/index.html","modified":1464626524905,"shasum":"335a05c7c3c98a633a5b66c5f77aa5097edd1d1d"},{"_id":"public/2013/12/11/jsp 中定义函数/index.html","modified":1464626524940,"shasum":"d2016813f020904e89e34f5917294bfde2ecfc97"},{"_id":"public/2013/12/11/Java中的String与StringBuffer/index.html","modified":1464626524960,"shasum":"1abb6f7e58c82527d6e988a305b07216af75ee91"},{"_id":"public/2013/11/18/HTML标签总结/index.html","modified":1464626524976,"shasum":"668cec6813ce3ee490310d202137e0004fd29279"},{"_id":"public/archives/index.html","modified":1464626525035,"shasum":"eb06e925292cff55dfdd5ea3a3c3a1c744eadb97"},{"_id":"public/archives/page/2/index.html","modified":1464626525076,"shasum":"237403176cd47fad635a60b54a3009505167493a"},{"_id":"public/archives/page/3/index.html","modified":1464626525116,"shasum":"bacd590322ee274bc29daf55e4b8147fc3386fc9"},{"_id":"public/archives/page/4/index.html","modified":1464626525135,"shasum":"00a37f2e74ea396a44e05e7926a162ed2b4d2a8b"},{"_id":"public/archives/2013/index.html","modified":1464626525166,"shasum":"637c2531326e79336af5175d2cdcab86a8883e48"},{"_id":"public/archives/2013/11/index.html","modified":1464626525182,"shasum":"996d943fc9dfcf35da3ef068e6903be25707b120"},{"_id":"public/archives/2013/12/index.html","modified":1464626525197,"shasum":"0d8a158c7309e32e9bb85dab63a5485f9a5b7075"},{"_id":"public/archives/2014/index.html","modified":1464626525235,"shasum":"4332c1bc99cc986266a111edd2bd182bb62c340f"},{"_id":"public/archives/2014/page/2/index.html","modified":1464626525251,"shasum":"fcf6cbed6ed231cafc8928702e3f1aa5a594a399"},{"_id":"public/archives/2014/01/index.html","modified":1464626525266,"shasum":"3d7edf7a1eeedf6930d5f381cfb1717462c431ee"},{"_id":"public/archives/2014/03/index.html","modified":1464626525286,"shasum":"e360908473491b4ddaa9812d972712233f99fe04"},{"_id":"public/archives/2014/04/index.html","modified":1464626525288,"shasum":"1f7e78f205a740a557388873bfe36cdabaa0cbf7"},{"_id":"public/archives/2014/10/index.html","modified":1464626525303,"shasum":"ac6257be6b51e529dcbd0bced5f9be13cfc7e17f"},{"_id":"public/archives/2015/index.html","modified":1464626525319,"shasum":"533b8d1f115a6d0677cc15859b32377d94714254"},{"_id":"public/archives/2015/10/index.html","modified":1464626525336,"shasum":"a6dbff09679817b0b98d17f8af7f2d6762222140"},{"_id":"public/archives/2015/11/index.html","modified":1464626525336,"shasum":"2e4fb25c977396a710cb698a6760d1168be6431f"},{"_id":"public/archives/2016/index.html","modified":1464626525367,"shasum":"90607da1f6ba51bf9e4d7c594849a8f7d1d891c3"},{"_id":"public/archives/2016/page/2/index.html","modified":1464626525414,"shasum":"0b46f9c940ff6261d916de9d58c8d7c9ec73d683"},{"_id":"public/archives/2016/page/3/index.html","modified":1464626525432,"shasum":"c683b7021310b026feafcd14472dd276e283173e"},{"_id":"public/archives/2016/01/index.html","modified":1464626525436,"shasum":"a0c01731476098747308190f93f7bb31a1aaa41d"},{"_id":"public/archives/2016/02/index.html","modified":1464626525451,"shasum":"fd661d95294b141e55675175605b226bae8966bf"},{"_id":"public/archives/2016/03/index.html","modified":1464626525467,"shasum":"28728aafb2602874b4a203710bf6c4d086b6b3a1"},{"_id":"public/archives/2016/04/index.html","modified":1464626525483,"shasum":"221c4ddf06cbdf21cd0337be48ba4df94214a67e"},{"_id":"public/archives/2016/05/index.html","modified":1464626525514,"shasum":"bb68160ee770cab321647075ad6e6e12aaff80b0"},{"_id":"public/archives/2016/05/page/2/index.html","modified":1464626525514,"shasum":"4715a39867d3bd90320a1c8ade76cca3d85729b6"},{"_id":"public/CNAME","modified":1464626525514,"shasum":"889860d142124c771618cb7c4d54130e6d3b6b72"},{"_id":"public/atom.xml","modified":1464626525532,"shasum":"845cc3a9da6b3d548deb675fe3cb47e003565fd8"},{"_id":"public/index.html","modified":1464626525567,"shasum":"21ed52afa9efddbf5b3911b7aedfe9178c2befb0"},{"_id":"public/page/2/index.html","modified":1464626525599,"shasum":"977bed935f2b0c0b62035ac79a6f45d013221211"},{"_id":"public/page/3/index.html","modified":1464626525636,"shasum":"1b3f11259a666c434240a58cb749445ef616ea86"},{"_id":"public/page/4/index.html","modified":1464626525668,"shasum":"6fce41cc3cfc15cd3f1dfd909b41bc62725af29f"},{"_id":"public/tags/Java编程学习/index.html","modified":1464626525737,"shasum":"6e7d44518aff7e7d118170cec80536bd6558a18e"},{"_id":"public/tags/产品说明/index.html","modified":1464626525783,"shasum":"516c90d8848185a2ecefaa7c185fa0e5d76fe46c"},{"_id":"public/tags/系统运维/index.html","modified":1464626525845,"shasum":"38a1dd5e400aa858eab5f297030ce3e24ec3e5db"},{"_id":"public/tags/个人总结/index.html","modified":1464626525863,"shasum":"183390facd867ed05df924ad29d02cc870dff462"},{"_id":"public/tags/开发工具/index.html","modified":1464626525876,"shasum":"fc09aa619dfa065ea1dfe5b8941b3f6170672dc8"},{"_id":"public/tags/Web基础/index.html","modified":1464626525900,"shasum":"ef7a9b9d504b2a7433f0aa6769085b8a505fcbe6"},{"_id":"public/tags/C语言学习/index.html","modified":1464626525921,"shasum":"aa8a4a18980eb7b0319a5abaf37cfd08842a5445"},{"_id":"public/tags/网络编程/index.html","modified":1464626525933,"shasum":"8d0d6a714e16c380dce96cdca88011ba35dc65f1"},{"_id":"public/tags/数据库管理/index.html","modified":1464626525953,"shasum":"c5d2c2d3d789b0680a4b8a67bc83689f2cb41cfb"},{"_id":"public/tags/Linux学习/index.html","modified":1464626525953,"shasum":"b268f358e9ccaf97dc216fa52d2d2510d3af0aa4"},{"_id":"public/tags/计算机网络/index.html","modified":1464626525968,"shasum":"1693bfbb8de463c27de4cb21809a84df14c27b7a"}],"Category":[],"Data":[],"Page":[{"title":"404","date":"2016-02-13T08:23:51.000Z","_content":"\n## 404 No Found!\n","source":"404.md","raw":"---\ntitle: 404\ndate: 2016-02-13 16:23:51\n---\n\n## 404 No Found!\n","updated":"2016-02-17T11:55:03.725Z","path":"404.html","comments":1,"layout":"page","_id":"ciou8t5ou0000zsko7bcjpofb"},{"title":"关于我","date":"2016-02-13T06:58:33.000Z","_content":"\n抱歉，我还没想好如何定义我。","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-02-13 14:58:33\n---\n\n抱歉，我还没想好如何定义我。","updated":"2016-04-10T18:35:24.971Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciou8t6vf0001zskomkfps9zz"}],"Post":[{"title":"第一个Java Google engine程序","date":"2014-04-29T01:08:00.000Z","_content":"\n1、搭建相应的开发环境，添加Eclipse的google app engine plugin。\n方法1：在线添加，方法如下。（试了多次不行，自己解决不了）\n打开Eclipse，选择Help〉Install new software..在work with中添加站点地址是http://dl.google.com/eclipse/plugin/3.6\n方法2：离线安装，分别下载GAE SDK和Plugin for Eclipse。\n具体的安装方法详见这里。\n \n2、新建一个google web application。\n和创建普通的web工程一样，设置好相应的参数，一个google web application就建好了。\n \n3、部署你的app到Google app engine\n右击 你的应用> Google > Deploy to app engine.输入google帐号名，和密码，点击部署即可。\n\n参考：[如何开发你的第一个Java Google App Engine 程序](http://blog.csdn.net/xiaojianpitt/article/details/4193064)","source":"_posts/第一个Java Google engine程序.md","raw":"---\ntitle: 第一个Java Google engine程序\ndate: 2014-04-29 09:08\ntags: Java编程学习\n---\n\n1、搭建相应的开发环境，添加Eclipse的google app engine plugin。\n方法1：在线添加，方法如下。（试了多次不行，自己解决不了）\n打开Eclipse，选择Help〉Install new software..在work with中添加站点地址是http://dl.google.com/eclipse/plugin/3.6\n方法2：离线安装，分别下载GAE SDK和Plugin for Eclipse。\n具体的安装方法详见这里。\n \n2、新建一个google web application。\n和创建普通的web工程一样，设置好相应的参数，一个google web application就建好了。\n \n3、部署你的app到Google app engine\n右击 你的应用> Google > Deploy to app engine.输入google帐号名，和密码，点击部署即可。\n\n参考：[如何开发你的第一个Java Google App Engine 程序](http://blog.csdn.net/xiaojianpitt/article/details/4193064)","slug":"第一个Java Google engine程序","published":1,"updated":"2016-04-29T07:09:07.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6xc0002zskolbhfgsxh"},{"title":"云直播（ULive）进阶使用","date":"2016-05-24T11:06:00.000Z","_content":"#### 更新 ####\n2016年5月30 增加产品功能说明\n\n之前有一篇博客介绍[ulive初次使用](http://zone.gaospot.com/2016/05/09/%E4%BA%91%E7%9B%B4%E6%92%AD%EF%BC%88ULive%EF%BC%89%E5%88%9D%E4%BD%93%E9%AA%8C/)的，文中通过介绍使用ucloud提供的测试推拉流域名来进行直播平台的使用。这篇博客则是完整的介绍从推流域名的创建到播放的完整过程。其中推拉流域名都使用我们自己配置的域名。\n\n### 拉流配置 ###\n首先到ULive条目下，点击创建加速按钮，选择直播推流加速。然后可以按照界面中示例的进行配置。\n![创建推流](http://7xr7kh.com1.z0.glb.clouddn.com/%E6%8E%A8%E6%B5%81%E9%85%8D%E7%BD%AE.png)\n下面对其中各项做个说明：\n\n-  推流域名：指流上传的域名，这个主要是配置在需要上传端的工具中的，如使用sdk推流则在sdk中配置，如使用obs则在obs中配置。\n-  接入点：这个可以随便填的。相当于是区别用户流的一个点。\n-  播放域名：这两个域名是用来播放直播的，可以都勾选上。rtmp协议主要用在pc web等等环境中，而hls主要用在移动端，如手机web中。\n\n创建加速的申请提交之后大概半个小时到一个小时之间应该就能配好。在配置中时，也会提供一个推流域名的cname记录给您配置下这个cname记录，在配置好以后会提供播放的cname记录。配置好的加速大概是这个样子的。\n![直播配置好的样子](http://7xr7kh.com1.z0.glb.clouddn.com/%E7%9B%B4%E6%92%AD%E8%AF%A6%E6%83%85.png)\n\n直播加申请好以后，获得了上面的cname记录之后就可以进行cname的配置。cname在域名提供商哪里进行配置，下面是我的配置示例。\n![直播cname配置](http://7xr7kh.com1.z0.glb.clouddn.com/cname%E9%85%8D%E7%BD%AE.png)\n\n进过上面的一系列配置，使用直播过程中在ucloud平台这边的配置也就完成了，下面可以通过配置的推流域名和拉流域名来进行相应的视频上传下播放操作了。\n\n\n### 视频推流和播放 ###\n下面安装推流和播放的顺序来说明在进行相应操作的时候应该使用的工具和具体的场合。\n#### 推流 ####\n推流主要是移动端，移动端主要是是sdk来自行开发相应的软件实现直播上传的工作。pc端这里只说有一个obs。\npc端：这里主要介绍obs，其他情况不做说明。\nAndroid app：https://docs.ucloud.cn/upd-docs/ulive/ULive_Android_SDK.html\nISO app：https://docs.ucloud.cn/upd-docs/ulive/ULive_IOS_SDK.html\n\n#### 播放 ####\n首先如果不愿安装任何软件的话，可以使用web端的rtmp拉流测试工具http://www.cutv.com/demo/live_test.swf。或者安装了vlc的话，可以直接使用vlc来播放。\npc web：https://docs.ucloud.cn/upd-docs/uvideo/web_sdk.html\npc app：任何支持rtmp协议的软件都可以。\niso app：https://docs.ucloud.cn/upd-docs/ulive/ULive_Player_IOS_SDK.html\nAndroid app：https://docs.ucloud.cn/upd-docs/ulive/ULive_Player_Android_SDK.html\niso and Android web：使用html5的video标签来实现，具体参见下面的代码。\n\n```html\n<!DOCTYPE HTML>\n<html>\n<body>\n\n<video src=\"http://hls.gaospot.com/***（接入点）/1/playlist.m3u8\" controls=\"controls\" width=\"100%\" height=\"100%\">\nyour browser does not support the video tag\n</video>\n\n</body>\n</html>\n```\n\n#### 产品功能说明 ####\n1、提供了API接口，支持API访问，访问的方法是其他API调用方式相同。需要先进行身份验证。详细说明请参考官方文档。\n\n2、支持推流鉴权。ULive通过采用对某些字段进行md5加密的方法来检验url是否合法。推流/播放的鉴权都可以做。只不过播放叫防盗链：）。此操作无法在控制完成，需要联系技术支持处理。\n\n3、支持回调功能。可以通过配置回调功能在推流开始、结束或者出现偶然性断开是通知用户。此操作无法在控制完成，需要联系技术支持处理。\n\n4、支持直播录制功能。录制好的视频直接保存在UVideo中。此功能直接支持，详细说明可以参考文档说明。https://docs.ucloud.cn/upd-docs/ulive/live_stream.html#id5\n","source":"_posts/直播（ulive）进阶使用.md","raw":"---\ntitle:  云直播（ULive）进阶使用\ndate: 2016-5-24 19:06\ntags: 产品说明\n---\n#### 更新 ####\n2016年5月30 增加产品功能说明\n\n之前有一篇博客介绍[ulive初次使用](http://zone.gaospot.com/2016/05/09/%E4%BA%91%E7%9B%B4%E6%92%AD%EF%BC%88ULive%EF%BC%89%E5%88%9D%E4%BD%93%E9%AA%8C/)的，文中通过介绍使用ucloud提供的测试推拉流域名来进行直播平台的使用。这篇博客则是完整的介绍从推流域名的创建到播放的完整过程。其中推拉流域名都使用我们自己配置的域名。\n\n### 拉流配置 ###\n首先到ULive条目下，点击创建加速按钮，选择直播推流加速。然后可以按照界面中示例的进行配置。\n![创建推流](http://7xr7kh.com1.z0.glb.clouddn.com/%E6%8E%A8%E6%B5%81%E9%85%8D%E7%BD%AE.png)\n下面对其中各项做个说明：\n\n-  推流域名：指流上传的域名，这个主要是配置在需要上传端的工具中的，如使用sdk推流则在sdk中配置，如使用obs则在obs中配置。\n-  接入点：这个可以随便填的。相当于是区别用户流的一个点。\n-  播放域名：这两个域名是用来播放直播的，可以都勾选上。rtmp协议主要用在pc web等等环境中，而hls主要用在移动端，如手机web中。\n\n创建加速的申请提交之后大概半个小时到一个小时之间应该就能配好。在配置中时，也会提供一个推流域名的cname记录给您配置下这个cname记录，在配置好以后会提供播放的cname记录。配置好的加速大概是这个样子的。\n![直播配置好的样子](http://7xr7kh.com1.z0.glb.clouddn.com/%E7%9B%B4%E6%92%AD%E8%AF%A6%E6%83%85.png)\n\n直播加申请好以后，获得了上面的cname记录之后就可以进行cname的配置。cname在域名提供商哪里进行配置，下面是我的配置示例。\n![直播cname配置](http://7xr7kh.com1.z0.glb.clouddn.com/cname%E9%85%8D%E7%BD%AE.png)\n\n进过上面的一系列配置，使用直播过程中在ucloud平台这边的配置也就完成了，下面可以通过配置的推流域名和拉流域名来进行相应的视频上传下播放操作了。\n\n\n### 视频推流和播放 ###\n下面安装推流和播放的顺序来说明在进行相应操作的时候应该使用的工具和具体的场合。\n#### 推流 ####\n推流主要是移动端，移动端主要是是sdk来自行开发相应的软件实现直播上传的工作。pc端这里只说有一个obs。\npc端：这里主要介绍obs，其他情况不做说明。\nAndroid app：https://docs.ucloud.cn/upd-docs/ulive/ULive_Android_SDK.html\nISO app：https://docs.ucloud.cn/upd-docs/ulive/ULive_IOS_SDK.html\n\n#### 播放 ####\n首先如果不愿安装任何软件的话，可以使用web端的rtmp拉流测试工具http://www.cutv.com/demo/live_test.swf。或者安装了vlc的话，可以直接使用vlc来播放。\npc web：https://docs.ucloud.cn/upd-docs/uvideo/web_sdk.html\npc app：任何支持rtmp协议的软件都可以。\niso app：https://docs.ucloud.cn/upd-docs/ulive/ULive_Player_IOS_SDK.html\nAndroid app：https://docs.ucloud.cn/upd-docs/ulive/ULive_Player_Android_SDK.html\niso and Android web：使用html5的video标签来实现，具体参见下面的代码。\n\n```html\n<!DOCTYPE HTML>\n<html>\n<body>\n\n<video src=\"http://hls.gaospot.com/***（接入点）/1/playlist.m3u8\" controls=\"controls\" width=\"100%\" height=\"100%\">\nyour browser does not support the video tag\n</video>\n\n</body>\n</html>\n```\n\n#### 产品功能说明 ####\n1、提供了API接口，支持API访问，访问的方法是其他API调用方式相同。需要先进行身份验证。详细说明请参考官方文档。\n\n2、支持推流鉴权。ULive通过采用对某些字段进行md5加密的方法来检验url是否合法。推流/播放的鉴权都可以做。只不过播放叫防盗链：）。此操作无法在控制完成，需要联系技术支持处理。\n\n3、支持回调功能。可以通过配置回调功能在推流开始、结束或者出现偶然性断开是通知用户。此操作无法在控制完成，需要联系技术支持处理。\n\n4、支持直播录制功能。录制好的视频直接保存在UVideo中。此功能直接支持，详细说明可以参考文档说明。https://docs.ucloud.cn/upd-docs/ulive/live_stream.html#id5\n","slug":"直播（ulive）进阶使用","published":1,"updated":"2016-05-30T16:33:32.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6xr0005zskoqatb4kds"},{"title":"直播（ULive）架构","date":"2016-05-25T13:29:00.000Z","_content":"\n前面有两篇博客介绍了云直播的使用，这篇博客介绍ulive的架构是如何做的，这里主要是通过整理公开资料写的这篇博客。主要内容都引用自UCloud流媒体研发总监曾凯源分享内容。这篇文章在参考中给出了。\n\n文章首先介绍的是直播的应用场景，根据不同的场景来提出不同的需求，再跟进需求来开发产品我觉得这是一个很重要的思想。直播的架构经历了多次的演变，从简单到复杂，从不可靠到可靠的一个变化过程。这里主要就介绍下最后的架构。最后的架构由oc，区域三通机房和合作cdn共同解决。他们的引入无法为了解决两个问题，降低主播推流的延时和用户播放的延时。同时oc的引入降低了BGP机房的压力。同时区域三通点的引入，为BGP机房做容灾，对于同一区域如都在华东的推流和分发，直接走区域三通机房，BGP机房和三通机房部署多个，故障是只要调整路由即可。下面给出一张图做为说明：\n![直播架构](http://7xr7kh.com1.z0.glb.clouddn.com/%E7%9B%B4%E6%92%AD%E6%9E%B6%E6%9E%84)\n参考：\n[直播云平台架构如何构建？【 有料】](https://mp.weixin.qq.com/s?__biz=MzAxOTAzMDEwMA==&mid=2652499688&idx=1&sn=d8ce74eed7ca7e2e9de0e66a6aef0494&scene=2&srcid=0505OgZbZXhyuaRxdGSNJVon&from=timeline&isappinstalled=0&pass_ticket=YoVPy4HOG/PZEe5kIFWtZK10BedpyT9k7etx3R03J7s=#rd)\n[关于直播，所有的技术细节都在这里了（一）](http://mp.weixin.qq.com/s?__biz=MjM5NDE0MjI4MA==&mid=2656298621&idx=1&sn=5088b182777331106786b55d7f3f657d&scene=21#wechat_redirect)\n[关于直播，所有的技术细节都在这里了（二）](http://mp.weixin.qq.com/s?__biz=MjM5NDE0MjI4MA==&mid=2656298657&idx=1&sn=d3e649f5809421b09a97b863809825a1&scene=21#wechat_redirect)\n[关于直播，所有的技术细节都在这里了（三）](https://mp.weixin.qq.com/s?__biz=MjM5NDE0MjI4MA==&mid=2656298664&idx=1&sn=e5844d067c1a04673bcdeb007ad6b05c&scene=1&srcid=0516uvDRnn3CUBHxCGjPPsOK&pass_ticket=YoVPy4HOG/PZEe5kIFWtZK10BedpyT9k7etx3R03J7s=#rd)","source":"_posts/直播（Ulive）架构.md","raw":"---\ntitle:  直播（ULive）架构\ndate: 2016-5-25 21:29\ntags: 产品说明\n---\n\n前面有两篇博客介绍了云直播的使用，这篇博客介绍ulive的架构是如何做的，这里主要是通过整理公开资料写的这篇博客。主要内容都引用自UCloud流媒体研发总监曾凯源分享内容。这篇文章在参考中给出了。\n\n文章首先介绍的是直播的应用场景，根据不同的场景来提出不同的需求，再跟进需求来开发产品我觉得这是一个很重要的思想。直播的架构经历了多次的演变，从简单到复杂，从不可靠到可靠的一个变化过程。这里主要就介绍下最后的架构。最后的架构由oc，区域三通机房和合作cdn共同解决。他们的引入无法为了解决两个问题，降低主播推流的延时和用户播放的延时。同时oc的引入降低了BGP机房的压力。同时区域三通点的引入，为BGP机房做容灾，对于同一区域如都在华东的推流和分发，直接走区域三通机房，BGP机房和三通机房部署多个，故障是只要调整路由即可。下面给出一张图做为说明：\n![直播架构](http://7xr7kh.com1.z0.glb.clouddn.com/%E7%9B%B4%E6%92%AD%E6%9E%B6%E6%9E%84)\n参考：\n[直播云平台架构如何构建？【 有料】](https://mp.weixin.qq.com/s?__biz=MzAxOTAzMDEwMA==&mid=2652499688&idx=1&sn=d8ce74eed7ca7e2e9de0e66a6aef0494&scene=2&srcid=0505OgZbZXhyuaRxdGSNJVon&from=timeline&isappinstalled=0&pass_ticket=YoVPy4HOG/PZEe5kIFWtZK10BedpyT9k7etx3R03J7s=#rd)\n[关于直播，所有的技术细节都在这里了（一）](http://mp.weixin.qq.com/s?__biz=MjM5NDE0MjI4MA==&mid=2656298621&idx=1&sn=5088b182777331106786b55d7f3f657d&scene=21#wechat_redirect)\n[关于直播，所有的技术细节都在这里了（二）](http://mp.weixin.qq.com/s?__biz=MjM5NDE0MjI4MA==&mid=2656298657&idx=1&sn=d3e649f5809421b09a97b863809825a1&scene=21#wechat_redirect)\n[关于直播，所有的技术细节都在这里了（三）](https://mp.weixin.qq.com/s?__biz=MjM5NDE0MjI4MA==&mid=2656298664&idx=1&sn=e5844d067c1a04673bcdeb007ad6b05c&scene=1&srcid=0516uvDRnn3CUBHxCGjPPsOK&pass_ticket=YoVPy4HOG/PZEe5kIFWtZK10BedpyT9k7etx3R03J7s=#rd)","slug":"直播（Ulive）架构","published":1,"updated":"2016-05-25T13:30:11.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6y70008zskogz8ejapu"},{"title":"无EIP云主机访问外网","date":"2016-04-25T14:23:40.000Z","_content":"\n在UCloud平台使用云主机的时候，如果需要访问外网，一种比较直接的方式就是绑定EIP，但是在某些情况下我们并不希望给没给云主机都绑定一个EIP，比如说安装需要从外网下载软件的时候。这个时候我们该如何实现这个需求呢，在这种情况下，我们要求最少需要有一个EIP，这样可以通过一定的设置方式让其他云主机使用这个EIP作为出口，这里介绍两种方法，一种是通过UCloud平台提供的路由器产品（免费），还有一个是使用绑定了EIP的云主机作为网关来实现。\n\n### 一、使用具有EIP云主机做网关实现外网访问 ###\n**测试环境介绍（两台主机都在北京二可用区C，系统均为centos6.5）：**\n云主机A（做网关）：内网IP: 10.10.229.85 外网IP: 123.59.150.107 BGP\n云主机B：内网IP: 10.10.246.62\n\n**实现目标：**\n主机A可以访问外网，但是主机B没有EIP也没有做任何设置不可以访问外网。现在要通过修改主机B网关的方式实现主机B访问外网。\n\n**步骤概述：**\n1.网关机器打开内核里面的ip forward参数\n2.网关机器做iptables，完成nat映射\n3.后端机器修改网关地址\n\n**具体操作步骤：**\n1、打开具备外网IP的云主机A（作为转发路由）的转发功能，编辑/etc/sysctl.conf文件，打开配置  net.ipv4.ip_forward=1。 \n\n2、执行  sysctl -p 使配置生效\n\n3、在路由机器云主机A（具备外网IP）设置iptables转发 iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n\n4、修改需要访问外网的内网机器云主机B， 编辑/etc/sysconfig/network-scripts/ifcfg-eth0文件，修改默认路由为路由机器云主机A（具备外网IP）内网IP，例如：gateway 10.10.229.85。\n\n5、执行 service network restart 使配置生效\n\n6、通过ping一个外网域名来验证，外网可达性，比如说，ping www.baidu.com\n\n **副作用及解决（[使用某台云主机做外网网关后, 是否需要添加其他路由](https://docs.ucloud.cn/upd-docs/unetwork/faq.html#id27)）**\n\n会影响云主机和其他产品的内网通信，解决办法是添加静态路由。说明如下：云主机的流量可分为纵向流量: 外网流量以及ULB/UDB/UMem访问流量. 横向流量: 云主机间内网通讯. 默认路由修改到做网关的云主机后, 所有流量都会变为横向流量, 不仅影响纵向流量的效率, 也会导致无法和ULB/UDB/UMem通讯(因为内网IP伪造的安全规则会不通过). 解决方法是添加静态路由.\n\nLinux添加路由示例\n华东机房\nip ro add 10.255.0.0/16 via 10.4.0.1\nip ro add 10.4.0.0/16 via 10.4.0.1\necho \"ip ro add 10.255.0.0/16 via 10.4.0.1\" >> /etc/rc.local\necho \"ip ro add 10.4.0.0/16 via 10.4.0.1\" >> /etc/rc.local\n\n北京BGP-A机房\nip ro add 10.255.0.0/16 via 10.6.0.1\nip ro add 10.6.0.0/16 via 10.6.0.1\necho \"ip ro add 10.255.0.0/16 via 10.6.0.1\" >> /etc/rc.local\necho \"ip ro add 10.6.0.0/16 via 10.6.0.1\" >> /etc/rc.local\n\nWindows添加路由示例\n华东机房\nroute add 10.255.0.0 mask 255.255.0.0 10.4.0.1 /p\nroute add 10.4.0.0 mask 255.255.0.0 10.4.0.1 /p\n\n北京BGP-A机房\nroute add 10.255.0.0 mask 255.255.0.0 10.6.0.1 /p\nroute add 10.6.0.0 mask 255.255.0.0 10.6.0.1 /p\n\n### 二、使用路由器实现外网访问 ###\n\n**具体操作步骤：**\n1、登录控制台，选择网络Unet下的路由器选项，点击创建路由器； \n\n2、在弹出的创建路由器页面中输入路由器名称，点击确认完成路由器创建；\n\n3、申请弹性EIP，将EIP绑定已经创建好的路由器；\n\n4、此时路由器列表页面中显示了与路由器关联的弹性外网IP和子网信息。如果子网机器需要访问外网，可以根据需要将创建的子网连接到路由器\n\n5、点击进入路由器的端口转发,添加转发规则。\n\n说明：采用第二种方法来实现外网访问可能有一点难以理解的地方，一般人可能会认为转发规则不应该是把外部的请求转发到内部主机吗，为什么这个可以实现由内到外的转发呢？其实是这样的，通过配置转发规则，相当于告诉SDN（UCloud的内网架构使用的就是SDN技术）这些流量是要通过路由出外网的，当流量发往默认网关的时候，SDN发现这些流量是要出外网的，于是通过SDN内部机制这些流量发往外网了。在借助路由器的情况下其实还有另外一种实现方式就是通过修改主机内部的网关，直接把流量引向路由，这样也可以实现我们的需求。\n\n补充：一台uhost能否同时既绑EIP又通过vrouter访问外网？\n不能，目前主动出外网的方式分为两种，一个是直接绑定eip,通过nat转发,一个是通过vrouter端口转发，走vrouter。由于下一跳是二选一的，所以二者不能兼容。我们的产品策略是直接绑定eip优先级高于端口转发，所以同时做了端口转发和绑定eip,那么端口转发是不生效的。\n\n参考：[解决Ucloud没有弹性IP的内网主机访问外网的问题](http://www.05do.com/blog/content/190)\n[实现外网对大数据机型云主机&物理主机的访问](https://docs.ucloud.cn/upd-docs/uhost/guide.html#id9)\n","source":"_posts/无EIP云主机访问外网.md","raw":"---\ntitle: 无EIP云主机访问外网\ndate: 2016-04-25 22:23:40\ntags: 系统运维\n---\n\n在UCloud平台使用云主机的时候，如果需要访问外网，一种比较直接的方式就是绑定EIP，但是在某些情况下我们并不希望给没给云主机都绑定一个EIP，比如说安装需要从外网下载软件的时候。这个时候我们该如何实现这个需求呢，在这种情况下，我们要求最少需要有一个EIP，这样可以通过一定的设置方式让其他云主机使用这个EIP作为出口，这里介绍两种方法，一种是通过UCloud平台提供的路由器产品（免费），还有一个是使用绑定了EIP的云主机作为网关来实现。\n\n### 一、使用具有EIP云主机做网关实现外网访问 ###\n**测试环境介绍（两台主机都在北京二可用区C，系统均为centos6.5）：**\n云主机A（做网关）：内网IP: 10.10.229.85 外网IP: 123.59.150.107 BGP\n云主机B：内网IP: 10.10.246.62\n\n**实现目标：**\n主机A可以访问外网，但是主机B没有EIP也没有做任何设置不可以访问外网。现在要通过修改主机B网关的方式实现主机B访问外网。\n\n**步骤概述：**\n1.网关机器打开内核里面的ip forward参数\n2.网关机器做iptables，完成nat映射\n3.后端机器修改网关地址\n\n**具体操作步骤：**\n1、打开具备外网IP的云主机A（作为转发路由）的转发功能，编辑/etc/sysctl.conf文件，打开配置  net.ipv4.ip_forward=1。 \n\n2、执行  sysctl -p 使配置生效\n\n3、在路由机器云主机A（具备外网IP）设置iptables转发 iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n\n4、修改需要访问外网的内网机器云主机B， 编辑/etc/sysconfig/network-scripts/ifcfg-eth0文件，修改默认路由为路由机器云主机A（具备外网IP）内网IP，例如：gateway 10.10.229.85。\n\n5、执行 service network restart 使配置生效\n\n6、通过ping一个外网域名来验证，外网可达性，比如说，ping www.baidu.com\n\n **副作用及解决（[使用某台云主机做外网网关后, 是否需要添加其他路由](https://docs.ucloud.cn/upd-docs/unetwork/faq.html#id27)）**\n\n会影响云主机和其他产品的内网通信，解决办法是添加静态路由。说明如下：云主机的流量可分为纵向流量: 外网流量以及ULB/UDB/UMem访问流量. 横向流量: 云主机间内网通讯. 默认路由修改到做网关的云主机后, 所有流量都会变为横向流量, 不仅影响纵向流量的效率, 也会导致无法和ULB/UDB/UMem通讯(因为内网IP伪造的安全规则会不通过). 解决方法是添加静态路由.\n\nLinux添加路由示例\n华东机房\nip ro add 10.255.0.0/16 via 10.4.0.1\nip ro add 10.4.0.0/16 via 10.4.0.1\necho \"ip ro add 10.255.0.0/16 via 10.4.0.1\" >> /etc/rc.local\necho \"ip ro add 10.4.0.0/16 via 10.4.0.1\" >> /etc/rc.local\n\n北京BGP-A机房\nip ro add 10.255.0.0/16 via 10.6.0.1\nip ro add 10.6.0.0/16 via 10.6.0.1\necho \"ip ro add 10.255.0.0/16 via 10.6.0.1\" >> /etc/rc.local\necho \"ip ro add 10.6.0.0/16 via 10.6.0.1\" >> /etc/rc.local\n\nWindows添加路由示例\n华东机房\nroute add 10.255.0.0 mask 255.255.0.0 10.4.0.1 /p\nroute add 10.4.0.0 mask 255.255.0.0 10.4.0.1 /p\n\n北京BGP-A机房\nroute add 10.255.0.0 mask 255.255.0.0 10.6.0.1 /p\nroute add 10.6.0.0 mask 255.255.0.0 10.6.0.1 /p\n\n### 二、使用路由器实现外网访问 ###\n\n**具体操作步骤：**\n1、登录控制台，选择网络Unet下的路由器选项，点击创建路由器； \n\n2、在弹出的创建路由器页面中输入路由器名称，点击确认完成路由器创建；\n\n3、申请弹性EIP，将EIP绑定已经创建好的路由器；\n\n4、此时路由器列表页面中显示了与路由器关联的弹性外网IP和子网信息。如果子网机器需要访问外网，可以根据需要将创建的子网连接到路由器\n\n5、点击进入路由器的端口转发,添加转发规则。\n\n说明：采用第二种方法来实现外网访问可能有一点难以理解的地方，一般人可能会认为转发规则不应该是把外部的请求转发到内部主机吗，为什么这个可以实现由内到外的转发呢？其实是这样的，通过配置转发规则，相当于告诉SDN（UCloud的内网架构使用的就是SDN技术）这些流量是要通过路由出外网的，当流量发往默认网关的时候，SDN发现这些流量是要出外网的，于是通过SDN内部机制这些流量发往外网了。在借助路由器的情况下其实还有另外一种实现方式就是通过修改主机内部的网关，直接把流量引向路由，这样也可以实现我们的需求。\n\n补充：一台uhost能否同时既绑EIP又通过vrouter访问外网？\n不能，目前主动出外网的方式分为两种，一个是直接绑定eip,通过nat转发,一个是通过vrouter端口转发，走vrouter。由于下一跳是二选一的，所以二者不能兼容。我们的产品策略是直接绑定eip优先级高于端口转发，所以同时做了端口转发和绑定eip,那么端口转发是不生效的。\n\n参考：[解决Ucloud没有弹性IP的内网主机访问外网的问题](http://www.05do.com/blog/content/190)\n[实现外网对大数据机型云主机&物理主机的访问](https://docs.ucloud.cn/upd-docs/uhost/guide.html#id9)\n","slug":"无EIP云主机访问外网","published":1,"updated":"2016-05-04T03:12:37.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6y7000azskoq5flcaet"},{"title":"如何成为一名优秀的技术支持","date":"2016-05-03T15:35:00.000Z","_content":"\n我曾经在知乎上搜过这个问题，好像有人问了，却没有人给出好的答案，我自己曾经想过这个问题，倒想回答下这个问题，任何事情做到一定程度就会想从方法论的角度来改进做事方法。按照我一贯的形式方法，这篇文章会写的比较主观，随意，掺杂很多个人主观想法和经历在里面。\n选择技术支持这一职业其实纯属偶然，一开始并不喜欢这份工作，当然说我现在有多热爱，也是假话，但我想把这件事做好，这就我的行事风格。刚开始经历了一段痛苦期，现在进入到风平浪静的事情，是时候反思下自己的所作所为以此来提升自己。\n技术支持其实可以分开成为两个词来讲，技术和支持，这两个词，我认为是做好这份工作的两个方面。首先是技术，什么是技术，云计算的背后是云技术在支撑，用户业务的背后是用户程序（代码）和云环境（运行环境）在共同支撑。所以技术支持要学好技术便成了必要因素，在这里技术包含了两个方面，公司产品的技术背景和用户业务的技术背景。首先从公司产品角度来说技术支持，对公司的产品没有足够的了解显然是无法完成这份工作的。在进一步来讲，一个好的技术支持对于本公司所售产品的实现应该是了解的（现在正在学习这方面的知识），不需要熟悉到每一个代码，但对整体设计应该是明白的。在其次是对用户所使用技术的理解，用户可能采用各种各样的解决方案，也许自己并不熟悉，但遇到问题，需要需要我们这边提供支持的时候应该怎么做，这里面又有一个方法论的问题了，虽然并不是每一个问题都是我们所熟悉的，但解决问题的方法是一样的，比如说排除网络问题，有排查网络问题的一个思路和方法。碰到类似问题按照这样的方法来定位就好了，综上来讲技术就两方面，\n另外一个词是支持，支持是一个动词，强调的是一个动作或过程，它包含有沟通，协助教育等等意思，沟通交流是技术支持的工作方法，工作手段和工具。没有交流，技术支持的工作无法开展，沟通交流是渠道是基础，因此沟通是基础技能。其次是协助，协助是技术支持工作的主意内容，通过独立分析问题，最后协助用户解决问题，协助使技术支持的工作产生价值。最后是教育，是进阶内容，其实是经过上两步认为就完成了一次支持工作，教育不是独立的第三步，其可以认为作为一个指导or something，贯穿在整个过程中，在交流的过程影响用户，这就是教育，大公司都懂得教育用户，通过广告等等方式，比如说某某公司，大家会说它怎么怎么样，它天生就是这样吗？不是的，是它把用户教育成这样认为的，如果它在确实是这样做的，事实上就是这样的，最终用户也就这样认为了，没了。。","source":"_posts/如何成为一名优秀的技术支持.md","raw":"---\ntitle:  如何成为一名优秀的技术支持\ndate: 2016-5-3 23:35\ntags: 个人总结\n---\n\n我曾经在知乎上搜过这个问题，好像有人问了，却没有人给出好的答案，我自己曾经想过这个问题，倒想回答下这个问题，任何事情做到一定程度就会想从方法论的角度来改进做事方法。按照我一贯的形式方法，这篇文章会写的比较主观，随意，掺杂很多个人主观想法和经历在里面。\n选择技术支持这一职业其实纯属偶然，一开始并不喜欢这份工作，当然说我现在有多热爱，也是假话，但我想把这件事做好，这就我的行事风格。刚开始经历了一段痛苦期，现在进入到风平浪静的事情，是时候反思下自己的所作所为以此来提升自己。\n技术支持其实可以分开成为两个词来讲，技术和支持，这两个词，我认为是做好这份工作的两个方面。首先是技术，什么是技术，云计算的背后是云技术在支撑，用户业务的背后是用户程序（代码）和云环境（运行环境）在共同支撑。所以技术支持要学好技术便成了必要因素，在这里技术包含了两个方面，公司产品的技术背景和用户业务的技术背景。首先从公司产品角度来说技术支持，对公司的产品没有足够的了解显然是无法完成这份工作的。在进一步来讲，一个好的技术支持对于本公司所售产品的实现应该是了解的（现在正在学习这方面的知识），不需要熟悉到每一个代码，但对整体设计应该是明白的。在其次是对用户所使用技术的理解，用户可能采用各种各样的解决方案，也许自己并不熟悉，但遇到问题，需要需要我们这边提供支持的时候应该怎么做，这里面又有一个方法论的问题了，虽然并不是每一个问题都是我们所熟悉的，但解决问题的方法是一样的，比如说排除网络问题，有排查网络问题的一个思路和方法。碰到类似问题按照这样的方法来定位就好了，综上来讲技术就两方面，\n另外一个词是支持，支持是一个动词，强调的是一个动作或过程，它包含有沟通，协助教育等等意思，沟通交流是技术支持的工作方法，工作手段和工具。没有交流，技术支持的工作无法开展，沟通交流是渠道是基础，因此沟通是基础技能。其次是协助，协助是技术支持工作的主意内容，通过独立分析问题，最后协助用户解决问题，协助使技术支持的工作产生价值。最后是教育，是进阶内容，其实是经过上两步认为就完成了一次支持工作，教育不是独立的第三步，其可以认为作为一个指导or something，贯穿在整个过程中，在交流的过程影响用户，这就是教育，大公司都懂得教育用户，通过广告等等方式，比如说某某公司，大家会说它怎么怎么样，它天生就是这样吗？不是的，是它把用户教育成这样认为的，如果它在确实是这样做的，事实上就是这样的，最终用户也就这样认为了，没了。。","slug":"如何成为一名优秀的技术支持","published":1,"updated":"2016-05-05T12:13:47.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6y7000dzskok5qtqv9u"},{"title":"单机Web服务器性能","date":"2016-04-15T17:37:23.000Z","_content":"\n当网站部署好之后，开始上线运行的时候。一开始可能一切都是正常的，慢慢的随着时间和访问量的增加，可能会出现一些比较明显的性能问题。一旦出现这样的问题，轻则影响用户访问速度，重则可能整个网站就瘫痪了，比如说有后端的应用，数据出现死锁等等情况是，这时一般整个网站一般都是不可用的。\n\n###1、 影响Web应用访问速度的因素 ###\n\n 1. 网络延时\n任何Web应用的使用者都要通过网络来访问应用，那么网络延时就成为了一个会影响Web应用访问速度的重要因素。从Web应用服务器到用户之间涉及到两端网络的情况，用户和服务器的网络不理想都会影响最终的访问速度，这里用户和服务器的网络情况主要指的就是用户和服务器网络带宽问题，检查的工具一般是ping。一般来说如果用户端网络有问题，那么用户访问任何网站都是卡的，验证方法是通过ping大型网站来测试，比如说百度，一般这样的网站都是使用了cdn技术的，如果ping延迟非常大，比如说上百毫秒，基本上可以认为是本地网络有问题了。而服务器网络问题的检测可以通过17ce这样的测试网站的分布式ping来实现，因为需要测试是否是服务端问题，我们一般希望能有较多访问点来进行测试，如果全国各地的访问都是慢的，我们可以认为是服务器的网络有问题（首先要排除服务器处理速度没有问题）。当然也有服务器网络和用户网络都是正常的情况。这时我们认为是服务器和用户之间存在单点网络故障。单点网络问题多出在运营商之间，由于国内各运营商互联互通问题导致的单点问题时有发生。检查这样问题的工具一般来说是使用mtr或者traceroute这样的网络链路检查的工具。当然以上一切问题的定位都可以借助神器tcpdump来实现，抓包一般来说对应定位网络问题非常有利。\n \n 2. 请求处理时间\n 这里涉及的就是服务器端的问题，我们假设网络都是正常的，且所有用户访问都会出现卡慢的现象。这里还假设主机是正常的，没有发生如oom，卡死等状况，只是单纯的由于服务器处理时间长导致的卡慢。由于一个web请求过来一般来说不是由于某个单纯的部分来完成这个请求的，而是会涉及到各个组件之间的一个相互配合问题。一般来说定位问题和解决的办法是分析各个组件日志来定位问题。针对服务器问题我们提出下面的解决方法。\n\n\n### 提升服务器性能方法 ###\n 1. 使用缓存系统\n 使用如Redis等等key/value内存数据库可以有效的提升应用的性能。\n \n 2. 使用高性能数据库架构\n 常见的高性能数据库架构如主从复制和读写分离，以及对数据库进行水平和垂直划分等等。\n \n 3. 使用高性能的Web组件\n 这里推荐的是Nginx搭配php-fpm的组合，Nginx的特点就是轻量级，可以维护更多的http长连接。至于这两个软件的安装既可以采用源码安装，也可以使用系统的软件包管理器安装，这个取决于个人需要。这里推荐的测试工具是ab，是Apache自带的一个测试工具。\n\n### 监控服务器的各项指标 ###\n这里主要是介绍几个Linux下面常用的，用于监控服务器性能的几个工具。\ntop 宏观的获取服务器性能信息\nvmstat和sar 服务器磁盘读写情况展现\nnetstat 查看网络服务，一般用来查看特点端口是否有监听\n\n\n注：这篇博客是根据《微信公众平台应用开发实践》这边书籍的第11章内容写成的，可以认为是一篇笔记","source":"_posts/单机Web服务器性能.md","raw":"---\ntitle: 单机Web服务器性能\ndate: 2016-04-16 01:37:23\ntags: 系统运维\n---\n\n当网站部署好之后，开始上线运行的时候。一开始可能一切都是正常的，慢慢的随着时间和访问量的增加，可能会出现一些比较明显的性能问题。一旦出现这样的问题，轻则影响用户访问速度，重则可能整个网站就瘫痪了，比如说有后端的应用，数据出现死锁等等情况是，这时一般整个网站一般都是不可用的。\n\n###1、 影响Web应用访问速度的因素 ###\n\n 1. 网络延时\n任何Web应用的使用者都要通过网络来访问应用，那么网络延时就成为了一个会影响Web应用访问速度的重要因素。从Web应用服务器到用户之间涉及到两端网络的情况，用户和服务器的网络不理想都会影响最终的访问速度，这里用户和服务器的网络情况主要指的就是用户和服务器网络带宽问题，检查的工具一般是ping。一般来说如果用户端网络有问题，那么用户访问任何网站都是卡的，验证方法是通过ping大型网站来测试，比如说百度，一般这样的网站都是使用了cdn技术的，如果ping延迟非常大，比如说上百毫秒，基本上可以认为是本地网络有问题了。而服务器网络问题的检测可以通过17ce这样的测试网站的分布式ping来实现，因为需要测试是否是服务端问题，我们一般希望能有较多访问点来进行测试，如果全国各地的访问都是慢的，我们可以认为是服务器的网络有问题（首先要排除服务器处理速度没有问题）。当然也有服务器网络和用户网络都是正常的情况。这时我们认为是服务器和用户之间存在单点网络故障。单点网络问题多出在运营商之间，由于国内各运营商互联互通问题导致的单点问题时有发生。检查这样问题的工具一般来说是使用mtr或者traceroute这样的网络链路检查的工具。当然以上一切问题的定位都可以借助神器tcpdump来实现，抓包一般来说对应定位网络问题非常有利。\n \n 2. 请求处理时间\n 这里涉及的就是服务器端的问题，我们假设网络都是正常的，且所有用户访问都会出现卡慢的现象。这里还假设主机是正常的，没有发生如oom，卡死等状况，只是单纯的由于服务器处理时间长导致的卡慢。由于一个web请求过来一般来说不是由于某个单纯的部分来完成这个请求的，而是会涉及到各个组件之间的一个相互配合问题。一般来说定位问题和解决的办法是分析各个组件日志来定位问题。针对服务器问题我们提出下面的解决方法。\n\n\n### 提升服务器性能方法 ###\n 1. 使用缓存系统\n 使用如Redis等等key/value内存数据库可以有效的提升应用的性能。\n \n 2. 使用高性能数据库架构\n 常见的高性能数据库架构如主从复制和读写分离，以及对数据库进行水平和垂直划分等等。\n \n 3. 使用高性能的Web组件\n 这里推荐的是Nginx搭配php-fpm的组合，Nginx的特点就是轻量级，可以维护更多的http长连接。至于这两个软件的安装既可以采用源码安装，也可以使用系统的软件包管理器安装，这个取决于个人需要。这里推荐的测试工具是ab，是Apache自带的一个测试工具。\n\n### 监控服务器的各项指标 ###\n这里主要是介绍几个Linux下面常用的，用于监控服务器性能的几个工具。\ntop 宏观的获取服务器性能信息\nvmstat和sar 服务器磁盘读写情况展现\nnetstat 查看网络服务，一般用来查看特点端口是否有监听\n\n\n注：这篇博客是根据《微信公众平台应用开发实践》这边书籍的第11章内容写成的，可以认为是一篇笔记","slug":"单机Web服务器性能","published":1,"updated":"2016-04-15T17:38:01.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6y7000gzskox5b3gdfn"},{"title":"使用git上传已有的代码到github上","date":"2014-04-14T14:42:00.000Z","_content":"\n1、使用已有的github账户，在上面创建一个项目。进入github官网后在右下角，有一个名为New repository的绿色按钮，点击便可创建一个github项目。\n\n\n2、然后就是填写一些相关的信息了。按照自己的想法填就是了。\n\n3、创建SSH密匙\n在shell下，输入以下命令。\n```\nssh-keygen -C 'your@email.address' -t rsa  \n```\n确认使用默认路径，然后输入两次你要是用的密码就行（一般直接敲几个回车不使用密码）\n\n4、提交密匙\n现在又要回到github的页面上，在右上方工具栏里找到Account Settings。在这个页面上有一个SSH Keys标签，选择Add SSH key。Title随便取，Key就是开始生成的一段东西。找到id_rsa.pub文件（一般是在用户的主目录下），把它打开可以看到一堆文字，拷贝下来黏贴到github页面key的空白处。然后Apply，就好了。\n\n可以使用以下命令测试连接\n```\nssh -v git@github.com  \n```\n\n5、上传代码\n最后就是上传你的代码了~ bash切换到你的项目目录下，输入以下命令。\n```\ngit remote add origin git@github.com:你的github用户名/你的github项目名.git  \ngit push origin master  \n```\n现在再去http://github.com/你的github用户名/你的github项目 就可以看到你的项目了~ Good luck\n当然这是从无到有，如果你有一个Git的repo，想添加到github上，那就直接使用第8步的命令就可以了（不要忘记密匙的相关工作）。话说很多初学者应该会和我一样，在初期搞不清git和github的关系，git是和CVS,SVN并列的一个概念，而github是和Google Code, sourceforge并列的一个概念，在具体点说，git是一个代码管理工具，而github是一个代码托管平台，这样说就明白了吧。所以，git的学习的话，参见这里。\n","source":"_posts/使用git上传已有的代码到github上.md","raw":"---\ntitle: 使用git上传已有的代码到github上\ndate: 2014-04-14 22:42\ntags: 开发工具\n---\n\n1、使用已有的github账户，在上面创建一个项目。进入github官网后在右下角，有一个名为New repository的绿色按钮，点击便可创建一个github项目。\n\n\n2、然后就是填写一些相关的信息了。按照自己的想法填就是了。\n\n3、创建SSH密匙\n在shell下，输入以下命令。\n```\nssh-keygen -C 'your@email.address' -t rsa  \n```\n确认使用默认路径，然后输入两次你要是用的密码就行（一般直接敲几个回车不使用密码）\n\n4、提交密匙\n现在又要回到github的页面上，在右上方工具栏里找到Account Settings。在这个页面上有一个SSH Keys标签，选择Add SSH key。Title随便取，Key就是开始生成的一段东西。找到id_rsa.pub文件（一般是在用户的主目录下），把它打开可以看到一堆文字，拷贝下来黏贴到github页面key的空白处。然后Apply，就好了。\n\n可以使用以下命令测试连接\n```\nssh -v git@github.com  \n```\n\n5、上传代码\n最后就是上传你的代码了~ bash切换到你的项目目录下，输入以下命令。\n```\ngit remote add origin git@github.com:你的github用户名/你的github项目名.git  \ngit push origin master  \n```\n现在再去http://github.com/你的github用户名/你的github项目 就可以看到你的项目了~ Good luck\n当然这是从无到有，如果你有一个Git的repo，想添加到github上，那就直接使用第8步的命令就可以了（不要忘记密匙的相关工作）。话说很多初学者应该会和我一样，在初期搞不清git和github的关系，git是和CVS,SVN并列的一个概念，而github是和Google Code, sourceforge并列的一个概念，在具体点说，git是一个代码管理工具，而github是一个代码托管平台，这样说就明白了吧。所以，git的学习的话，参见这里。\n","slug":"使用git上传已有的代码到github上","published":1,"updated":"2016-04-29T06:59:52.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6y7000izskodfdnu14x"},{"title":"云直播（ULive）初体验","date":"2016-05-09T09:45:00.000Z","_content":"\n这篇博客旨在通过一个简单是使用例子来初步说明ULive这个产品的使用方法，产品文档的说明主要是针对产品的，而这篇博客则主要是从用户业务的角度来做说明。\n\n### 概述 ###\n这里通过obs（一个开源的直播软件）来录视频（产生直播流），当然也可以通过sdk来开发推流客户端。直播流推流到UCloud提供专门用于测试的推流地址，播放是通过支持rtmp协议串流播放的vlc（开源播放器）来做的。有其他更多需求比如说弹幕啊什么的其实是通过在播放客户端中做的，这个可以自行实现。下面通过图示来说明这个过程（图略丑，见谅：）\n![推流和拉流过程说明](http://7xr7kh.com1.z0.glb.clouddn.com/%E6%A6%82%E8%BF%B0.png)\n\n### 准备和前提条件 ###\n推流和播放软件：\nobs和vlc\n\n用于测试的推流和播放地址：\n推流地址：rtmp://publish3.cdn.ucloud.com.cn/ucloud/流id\nrtmp播放地址：rtmp://vlive3.rtmp.cdn.ucloud.com.cn/ucloud/流id\nhls播放地址：http://vlive3.hls.cdn.ucloud.com.cn/ucloud/流id/playlist.m3u8\n\n其中，流id是您可以任意指定的（仅限于英文字母、数字、下划线），比如aaa、xyz等。因为测试地址是公共的，为了不与其他客户的测试冲突，建议您使用带有自定义前缀（如公司英文名）的流id。\n\n### 视频录制和推流 ###\n这里使用的是obs来录制视频并推流，obs的具体使用不做太多的说明，只说明直播服务器相关地方的说明。首先是点设定，弹出设定对话框，然后选择广播设定，设定FMS URL，和播放路径这两项。FMS URL填的测试推流地址：rtmp://publish3.cdn.ucloud.com.cn/ucloud/，播放路径就是Ulive所说的流id，我这里写的是gaospot。具体说明见下面的文档。\n![视频录制和推流](http://7xr7kh.com1.z0.glb.clouddn.com/%E6%8E%A8%E6%B5%81.png)\n\n### 播放和拉流 ###\n这里使用vlc来播放我们的直播，媒体-》打开网络串流。就到如下所示的对话框，这个和上面推流地址是相关的，播放地址就是推流地址加流id，我这里具体来说就是rtmp://vlive3.rtmp.cdn.ucloud.com.cn/ucloud/gaospot\n![播放和拉流](http://7xr7kh.com1.z0.glb.clouddn.com/%E6%8B%89%E6%B5%81.png)\n\n了解了上面的姿势之后在看官方文档（https://docs.ucloud.cn/upd-docs/ulive/index.html）的说明就能完全掌握这个产品的使用了。","source":"_posts/云直播（ULive）初体验.md","raw":"---\ntitle:  云直播（ULive）初体验\ndate: 2016-5-9 17:45\ntags: 产品说明\n---\n\n这篇博客旨在通过一个简单是使用例子来初步说明ULive这个产品的使用方法，产品文档的说明主要是针对产品的，而这篇博客则主要是从用户业务的角度来做说明。\n\n### 概述 ###\n这里通过obs（一个开源的直播软件）来录视频（产生直播流），当然也可以通过sdk来开发推流客户端。直播流推流到UCloud提供专门用于测试的推流地址，播放是通过支持rtmp协议串流播放的vlc（开源播放器）来做的。有其他更多需求比如说弹幕啊什么的其实是通过在播放客户端中做的，这个可以自行实现。下面通过图示来说明这个过程（图略丑，见谅：）\n![推流和拉流过程说明](http://7xr7kh.com1.z0.glb.clouddn.com/%E6%A6%82%E8%BF%B0.png)\n\n### 准备和前提条件 ###\n推流和播放软件：\nobs和vlc\n\n用于测试的推流和播放地址：\n推流地址：rtmp://publish3.cdn.ucloud.com.cn/ucloud/流id\nrtmp播放地址：rtmp://vlive3.rtmp.cdn.ucloud.com.cn/ucloud/流id\nhls播放地址：http://vlive3.hls.cdn.ucloud.com.cn/ucloud/流id/playlist.m3u8\n\n其中，流id是您可以任意指定的（仅限于英文字母、数字、下划线），比如aaa、xyz等。因为测试地址是公共的，为了不与其他客户的测试冲突，建议您使用带有自定义前缀（如公司英文名）的流id。\n\n### 视频录制和推流 ###\n这里使用的是obs来录制视频并推流，obs的具体使用不做太多的说明，只说明直播服务器相关地方的说明。首先是点设定，弹出设定对话框，然后选择广播设定，设定FMS URL，和播放路径这两项。FMS URL填的测试推流地址：rtmp://publish3.cdn.ucloud.com.cn/ucloud/，播放路径就是Ulive所说的流id，我这里写的是gaospot。具体说明见下面的文档。\n![视频录制和推流](http://7xr7kh.com1.z0.glb.clouddn.com/%E6%8E%A8%E6%B5%81.png)\n\n### 播放和拉流 ###\n这里使用vlc来播放我们的直播，媒体-》打开网络串流。就到如下所示的对话框，这个和上面推流地址是相关的，播放地址就是推流地址加流id，我这里具体来说就是rtmp://vlive3.rtmp.cdn.ucloud.com.cn/ucloud/gaospot\n![播放和拉流](http://7xr7kh.com1.z0.glb.clouddn.com/%E6%8B%89%E6%B5%81.png)\n\n了解了上面的姿势之后在看官方文档（https://docs.ucloud.cn/upd-docs/ulive/index.html）的说明就能完全掌握这个产品的使用了。","slug":"云直播（ULive）初体验","published":1,"updated":"2016-05-09T09:49:44.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6y7000lzsko9n80jrav"},{"title":"jsp中文编码","date":"2013-12-27T13:11:00.000Z","_content":"\n字符编码\n       计算机中的信息包括数据信息和控制信息，数据信息又可分为数值和非数值信息。非数值信息和控制信息包括了字母、各种控制符号、图形符号等，它们都以二进制编码方式存入计算机并得以处理，这种对字母和符号进行编码的二进制代码称为字符代码（Character Code）。计算机中常用的字符编码有ASCII码和EBCDIC码（扩展的BCD交换码）。\n \n字符集\nASCII码：于1961年提出，用于在不同计算机硬件和软件系统中实现数据传输标准化，在大多数的小型机和全部的PC都使用此码。ASCII码划分为两个集合：128个字符的标准ASCII码和附加的128个字符的扩充和ASCII码。比较EBCDIC。其中95个字符可以显示。另外33个不可以显示。 标准ASCII码为7位，扩充为8位。\n \nGB2312 ：是ANSI编码里的一种，对ANSI编码最初始的ASCII进行扩充，为了满足国内在计算机中使用汉字的需要，中国国家标准总局发布了一系列的汉字字符集国家标准编码，统称为GB码，或国标码。其中最有影响的是于1980年发布的《信息交换用汉字编码字符集基本集》，标准号为GB 2312-1980,因其使用非常普遍，也常被通称为国标码。GB2312编码通行于我国内地；新加坡等地也采用此编码。几乎所有的中文系统和国际化的软件都支持GB 2312。\n \nGBK：汉字内码扩展规范，K为扩展的汉语拼音中“扩”字的声母。英文全称Chinese Internal Code Specification。GBK编码标准兼容GB2312，共收录汉字21003个、符号883个，并提供1894个造字码位，简、繁体字融于一库。GB2312码是中华人民共和国国家汉字信息交换用编码，全称《信息交换用汉字编码字符集——基本集》，1980年由国家标准总局发布。基本集共收入汉字6763个和非汉字图形字符682个，通行于中国大陆。新加坡等地也使用此编码。\n \nUTF-8：为了提高Unicode的编码效率，于是就出现了UTF-8编码。UTF-8可以根据不同的符号自动选择编码的长短。比如英文字母可以只用1个字节就够了。\n \n用来解决中文字符乱码的几条语句\n<%@ page contentType=\"text/html; charset=gb2312\" language=\"java\" %>\n编码格式为jsp文件的存储格式。保存的jsp文件将以这种编码方式保存。这条语句可以用来解决jsp页面显示的乱码问题。\n \nString s=new String(request.getParameter(\"name\").getBytes(\"ISO-8859-1\"),\"gb2312\") ;\n如果使用该方法的话，每一个参数都必须这样进行转码。很麻烦。但确实可以拿到汉字。而且在使用?name=value将值传到这个页面的时候时候产生的乱码可能别的方法都不行，但这个特别有用。我觉得可能的原因是因为在jsp将这些值传到下一个页面的时候有进行了另外的编码，采用了其他的编码方式，但是传到目的页面时又采用其他的编码方式来解码，最终编码方式和解码方式不一致当然会产生乱码了。\n \nrequest.seCharacterEncoding (\"gb2312\")\n在所有的请求前面加上这句话，就可以对请求进行统一编码，就可以获取从上一个页面传过来的中文值，实现了中文的正常显示。\n \njsp乱码问题确实是新手比较容易遇到的问题，但网上也有很多很好的关于jsp乱码的博文可以参考。这里我只是做一个个人的总结，作为学习的笔记。一则便于以后查阅，再则也是今后总结的依据。","source":"_posts/jsp中文编码.md","raw":"---\ntitle:  jsp中文编码\ndate: 2013-12-27 21:11\ntags: Web基础\n---\n\n字符编码\n       计算机中的信息包括数据信息和控制信息，数据信息又可分为数值和非数值信息。非数值信息和控制信息包括了字母、各种控制符号、图形符号等，它们都以二进制编码方式存入计算机并得以处理，这种对字母和符号进行编码的二进制代码称为字符代码（Character Code）。计算机中常用的字符编码有ASCII码和EBCDIC码（扩展的BCD交换码）。\n \n字符集\nASCII码：于1961年提出，用于在不同计算机硬件和软件系统中实现数据传输标准化，在大多数的小型机和全部的PC都使用此码。ASCII码划分为两个集合：128个字符的标准ASCII码和附加的128个字符的扩充和ASCII码。比较EBCDIC。其中95个字符可以显示。另外33个不可以显示。 标准ASCII码为7位，扩充为8位。\n \nGB2312 ：是ANSI编码里的一种，对ANSI编码最初始的ASCII进行扩充，为了满足国内在计算机中使用汉字的需要，中国国家标准总局发布了一系列的汉字字符集国家标准编码，统称为GB码，或国标码。其中最有影响的是于1980年发布的《信息交换用汉字编码字符集基本集》，标准号为GB 2312-1980,因其使用非常普遍，也常被通称为国标码。GB2312编码通行于我国内地；新加坡等地也采用此编码。几乎所有的中文系统和国际化的软件都支持GB 2312。\n \nGBK：汉字内码扩展规范，K为扩展的汉语拼音中“扩”字的声母。英文全称Chinese Internal Code Specification。GBK编码标准兼容GB2312，共收录汉字21003个、符号883个，并提供1894个造字码位，简、繁体字融于一库。GB2312码是中华人民共和国国家汉字信息交换用编码，全称《信息交换用汉字编码字符集——基本集》，1980年由国家标准总局发布。基本集共收入汉字6763个和非汉字图形字符682个，通行于中国大陆。新加坡等地也使用此编码。\n \nUTF-8：为了提高Unicode的编码效率，于是就出现了UTF-8编码。UTF-8可以根据不同的符号自动选择编码的长短。比如英文字母可以只用1个字节就够了。\n \n用来解决中文字符乱码的几条语句\n<%@ page contentType=\"text/html; charset=gb2312\" language=\"java\" %>\n编码格式为jsp文件的存储格式。保存的jsp文件将以这种编码方式保存。这条语句可以用来解决jsp页面显示的乱码问题。\n \nString s=new String(request.getParameter(\"name\").getBytes(\"ISO-8859-1\"),\"gb2312\") ;\n如果使用该方法的话，每一个参数都必须这样进行转码。很麻烦。但确实可以拿到汉字。而且在使用?name=value将值传到这个页面的时候时候产生的乱码可能别的方法都不行，但这个特别有用。我觉得可能的原因是因为在jsp将这些值传到下一个页面的时候有进行了另外的编码，采用了其他的编码方式，但是传到目的页面时又采用其他的编码方式来解码，最终编码方式和解码方式不一致当然会产生乱码了。\n \nrequest.seCharacterEncoding (\"gb2312\")\n在所有的请求前面加上这句话，就可以对请求进行统一编码，就可以获取从上一个页面传过来的中文值，实现了中文的正常显示。\n \njsp乱码问题确实是新手比较容易遇到的问题，但网上也有很多很好的关于jsp乱码的博文可以参考。这里我只是做一个个人的总结，作为学习的笔记。一则便于以后查阅，再则也是今后总结的依据。","slug":"jsp中文编码","published":1,"updated":"2016-04-29T09:14:38.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6y7000nzsko93at7ayf"},{"title":"jsp 中定义函数","date":"2013-12-11T15:16:00.000Z","_content":"\njsp 中定义函数\n\n在一个jsp文件中定义一个java函数的方法，我知道的是有两种的。\n方法一\n第一种是使用<%! %>。即在普通jsp标记之中使用一个另外的<%! %>便可以了。\n```jsp\n<% !\n   public String function(){\n   return \"true\";\n  }\n%>\n```\n方法二\n第二种是定义一个类,在类里定义方法,再调用方法就可以了。其实这样相当于是定义了外部的类再引用外部的类中的方法而已。\n结构如下,不过这些代码最好还是写在.java的文件里,写在jsp中不好\n```jsp\n<%\nclass test{\n   public String a(){\n   return \"true\";\n   }\n}\n%>\n \n<%\ntest t = new test();\nString a = t.a();\n%>\n<%=a%>\n\n```\n这两种方法我只用过第一种，第二种没用过，但总结一下记一下，以后学到或用到在来看。","source":"_posts/jsp 中定义函数.md","raw":"---\ntitle: jsp 中定义函数\ndate: 2013-12-11 23:16\ntags: Web基础\n---\n\njsp 中定义函数\n\n在一个jsp文件中定义一个java函数的方法，我知道的是有两种的。\n方法一\n第一种是使用<%! %>。即在普通jsp标记之中使用一个另外的<%! %>便可以了。\n```jsp\n<% !\n   public String function(){\n   return \"true\";\n  }\n%>\n```\n方法二\n第二种是定义一个类,在类里定义方法,再调用方法就可以了。其实这样相当于是定义了外部的类再引用外部的类中的方法而已。\n结构如下,不过这些代码最好还是写在.java的文件里,写在jsp中不好\n```jsp\n<%\nclass test{\n   public String a(){\n   return \"true\";\n   }\n}\n%>\n \n<%\ntest t = new test();\nString a = t.a();\n%>\n<%=a%>\n\n```\n这两种方法我只用过第一种，第二种没用过，但总结一下记一下，以后学到或用到在来看。","slug":"jsp 中定义函数","published":1,"updated":"2016-04-29T08:57:35.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6ym000qzskog0i3f6gc"},{"title":"gcc编译C程序的过程","date":"2014-01-21T15:50:00.000Z","_content":"\n我们在编译c程序的时候其过程一般点击一个图标，或者执行一个命令就完成了。但实际的过程可不是这么简单的。在使用gcc编译程序时，它就把这个过程分成了四布来完成。实际上gcc是一个编译环境包含这四步的工具，这四步分别是：\n(1)预处理：（Pre-Processing）\n(2)编译：（Compiling）\n(3)汇编：（Assembling）\n(4)链接：（Linking)\n       使用gcc，我们可以根据需要让程序的编译停在任何的阶段。以便检查或使用编译器在该阶段输出的信息，或者对最后生成的文件进行控制，以便通过加入不同数量或种类的调试代码为今后的调试做准备。\n\n用一个最简单的程序编译程来观察编译器工作。下面是实验的源程序hello.c。\n```C\n#include <stdio.h>  \n  \nint main()  \n{  \n    printf(\"Hello,world!\");  \n    return 0;  \n}  \n```\n\n (1)在预处理阶段，预处理器（cpp）处理。输入的是C语言的源文件。这个阶段主要处理文件中的预处理语句，也就是通常由#开头的语句，如#include，#define，#ifdef等。这个过程会生成一个中间文件，但一般不会专门生成这种文件，所以在我们编译程序的时候不会看到类似的文件。如果必须要生成这样的文件，可以使用下面的Shell命令。\n\n```shell\ngcc -E hello.c -o hello.i  \n```\n\n使用这个命令生成的是一个仍然可以用vim察看的文件，只不过由一个只有7行代码的程序变成了一个有800多行代码的程序，原因是应为在生成的hello.i文件中把include进的库的相关代码导入了。\n\n（2)在编译阶段，编译器（ccl）处理。编译器将中间文件hello.i，编译后生成汇编语言文件*.s，使用的Shell命令是。\n```shell\ngcc -S hello.i -o hello.s  \n```\n\n在这个过程生成的hello.s文件依然可以用vim或其他任何的文本编辑器打开。hello.s的内容如下：\n```\n    .file   \"hello.c\"  \n    .section    .rodata  \n.LC0:  \n    .string \"Hello,world!\"  \n    .text  \n    .globl  main  \n    .type   main, @function  \nmain:  \n.LFB0:  \n    .cfi_startproc  \n    pushl   %ebp  \n    .cfi_def_cfa_offset 8  \n    .cfi_offset 5, -8  \n    movl    %esp, %ebp  \n    .cfi_def_cfa_register 5  \n    andl    $-16, %esp  \n    subl    $16, %esp  \n    movl    $.LC0, (%esp)  \n    call    printf  \n    movl    $0, %eax  \n    leave  \n    .cfi_restore 5  \n    .cfi_def_cfa 4, 4  \n    ret  \n    .cfi_endproc  \n.LFE0:  \n    .size   main, .-main  \n    .ident  \"GCC: (Debian 4.7.2-5) 4.7.2\"  \n    .section    .note.GNU-stack,\"\",@progbits \n\n``` \n（3)在汇编阶段，汇编器（as）将输入的hello.s转换成二进制机器代码文件*.o。这个阶段所使用的命令是。\n```shell\ngcc -c hello.s -o hello.o  \n```\n这个阶段会生成一个二进制的文件hello.o，现在已经不可以使用vim察看了，但是还可以使用od来察看，可以看到文件内容是如下一些的数字。\n```\n0000000 042577 043114 000401 000001 000000 000000 000000 000000  \n0000020 000001 000003 000001 000000 000000 000000 000000 000000  \n0000040 000424 000000 000000 000000 000064 000000 000000 000050  \n0000060 000015 000012 104525 101745 170344 166203 143420 022004  \n0000100 000000 000000 176350 177777 134377 000000 000000 141711  \n0000120 062510 066154 026157 067567 066162 020544 000000 041507  \n0000140 035103 024040 062504 064542 067141 032040 033456 031056  \n0000160 032455 020051 027064 027067 000062 000000 000024 000000  \n0000200 000000 000000 075001 000122 076001 000410 006033 002004  \n0000220 000610 000000 000034 000000 000034 000000 000000 000000  \n0000240 000034 000000 040400 004016 001205 006502 054005 006305  \n0000260 002004 000000 027000 074563 072155 061141 027000 072163  \n0000300 072162 061141 027000 064163 072163 072162 061141 027000  \n0000320 062562 027154 062564 072170 027000 060544 060564 027000  \n0000340 071542 000163 071056 062157 072141 000141 061456 066557  \n0000360 062555 072156 027000 067556 062564 043456 052516 071455  \n0000400 060564 065543 027000 062562 027154 064145 063137 060562  \n0000420 062555 000000 000000 000000 000000 000000 000000 000000  \n0000440 000000 000000 000000 000000 000000 000000 000000 000000  \n0000460 000000 000000 000000 000000 000000 000000 000037 000000  \n0000500 000001 000000 000006 000000 000000 000000 000064 000000  \n0000520 000034 000000 000000 000000 000000 000000 000004 000000  \n0000540 000000 000000 000033 000000 000011 000000 000000 000000  \n0000560 000000 000000 001744 000000 000020 000000 000013 000000  \n0000600 000001 000000 000004 000000 000010 000000 000045 000000  \n0000620 000001 000000 000003 000000 000000 000000 000120 000000  \n0000640 000000 000000 000000 000000 000000 000000 000004 000000  \n0000660 000000 000000 000053 000000 000010 000000 000003 000000  \n0000700 000000 000000 000120 000000 000000 000000 000000 000000  \n0000720 000000 000000 000004 000000 000000 000000 000060 000000  \n0000740 000001 000000 000002 000000 000000 000000 000120 000000  \n0000760 000015 000000 000000 000000 000000 000000 000001 000000  \n0001000 000000 000000 000070 000000 000001 000000 000060 000000  \n0001020 000000 000000 000135 000000 000035 000000 000000 000000  \n0001040 000000 000000 000001 000000 000001 000000 000101 000000  \n0001060 000001 000000 000000 000000 000000 000000 000172 000000  \n0001100 000000 000000 000000 000000 000000 000000 000001 000000  \n0001120 000000 000000 000125 000000 000001 000000 000002 000000  \n0001140 000000 000000 000174 000000 000070 000000 000000 000000  \n0001160 000000 000000 000004 000000 000000 000000 000121 000000  \n0001200 000011 000000 000000 000000 000000 000000 001764 000000  \n0001220 000010 000000 000013 000000 000010 000000 000004 000000  \n0001240 000010 000000 000021 000000 000003 000000 000000 000000  \n0001260 000000 000000 000264 000000 000137 000000 000000 000000  \n0001300 000000 000000 000001 000000 000000 000000 000001 000000  \n0001320 000002 000000 000000 000000 000000 000000 001434 000000  \n0001340 000260 000000 000014 000000 000011 000000 000004 000000  \n0001360 000020 000000 000011 000000 000003 000000 000000 000000  \n0001400 000000 000000 001714 000000 000025 000000 000000 000000  \n0001420 000000 000000 000001 000000 000000 000000 000000 000000  \n0001440 000000 000000 000000 000000 000000 000000 000001 000000  \n0001460 000000 000000 000000 000000 000004 177761 000000 000000  \n0001500 000000 000000 000000 000000 000003 000001 000000 000000  \n0001520 000000 000000 000000 000000 000003 000003 000000 000000  \n0001540 000000 000000 000000 000000 000003 000004 000000 000000  \n0001560 000000 000000 000000 000000 000003 000005 000000 000000  \n0001600 000000 000000 000000 000000 000003 000007 000000 000000  \n0001620 000000 000000 000000 000000 000003 000010 000000 000000  \n0001640 000000 000000 000000 000000 000003 000006 000011 000000  \n0001660 000000 000000 000034 000000 000022 000001 000016 000000  \n0001700 000000 000000 000000 000000 000020 000000 064000 066145  \n0001720 067554 061456 066400 064541 000156 071160 067151 063164  \n0001740 000000 000000 000014 000000 002401 000000 000021 000000  \n0001760 005002 000000 000040 000000 001002 000000  \n0001774  \n```\n(4)最后，连接器（ld）在链接阶段将输入的二进制机器代码文件*.o汇集成一个可执行的二进制代码文件。使用如下的代码。\n```shell\ngcc hello.o -o hello \n```\n\n\n最后在来使用od命令察看最后生成的hello文件，会发现它要比hello.o文件更大一些，原因在与，在最后一步的时候，把其他的二进制代码也链接进来了，如库文件等。","source":"_posts/gcc编译C程序的过程.md","raw":"---\ntitle: gcc编译C程序的过程\ndate: 2014-01-21 23:50\ntags: C语言学习\n---\n\n我们在编译c程序的时候其过程一般点击一个图标，或者执行一个命令就完成了。但实际的过程可不是这么简单的。在使用gcc编译程序时，它就把这个过程分成了四布来完成。实际上gcc是一个编译环境包含这四步的工具，这四步分别是：\n(1)预处理：（Pre-Processing）\n(2)编译：（Compiling）\n(3)汇编：（Assembling）\n(4)链接：（Linking)\n       使用gcc，我们可以根据需要让程序的编译停在任何的阶段。以便检查或使用编译器在该阶段输出的信息，或者对最后生成的文件进行控制，以便通过加入不同数量或种类的调试代码为今后的调试做准备。\n\n用一个最简单的程序编译程来观察编译器工作。下面是实验的源程序hello.c。\n```C\n#include <stdio.h>  \n  \nint main()  \n{  \n    printf(\"Hello,world!\");  \n    return 0;  \n}  \n```\n\n (1)在预处理阶段，预处理器（cpp）处理。输入的是C语言的源文件。这个阶段主要处理文件中的预处理语句，也就是通常由#开头的语句，如#include，#define，#ifdef等。这个过程会生成一个中间文件，但一般不会专门生成这种文件，所以在我们编译程序的时候不会看到类似的文件。如果必须要生成这样的文件，可以使用下面的Shell命令。\n\n```shell\ngcc -E hello.c -o hello.i  \n```\n\n使用这个命令生成的是一个仍然可以用vim察看的文件，只不过由一个只有7行代码的程序变成了一个有800多行代码的程序，原因是应为在生成的hello.i文件中把include进的库的相关代码导入了。\n\n（2)在编译阶段，编译器（ccl）处理。编译器将中间文件hello.i，编译后生成汇编语言文件*.s，使用的Shell命令是。\n```shell\ngcc -S hello.i -o hello.s  \n```\n\n在这个过程生成的hello.s文件依然可以用vim或其他任何的文本编辑器打开。hello.s的内容如下：\n```\n    .file   \"hello.c\"  \n    .section    .rodata  \n.LC0:  \n    .string \"Hello,world!\"  \n    .text  \n    .globl  main  \n    .type   main, @function  \nmain:  \n.LFB0:  \n    .cfi_startproc  \n    pushl   %ebp  \n    .cfi_def_cfa_offset 8  \n    .cfi_offset 5, -8  \n    movl    %esp, %ebp  \n    .cfi_def_cfa_register 5  \n    andl    $-16, %esp  \n    subl    $16, %esp  \n    movl    $.LC0, (%esp)  \n    call    printf  \n    movl    $0, %eax  \n    leave  \n    .cfi_restore 5  \n    .cfi_def_cfa 4, 4  \n    ret  \n    .cfi_endproc  \n.LFE0:  \n    .size   main, .-main  \n    .ident  \"GCC: (Debian 4.7.2-5) 4.7.2\"  \n    .section    .note.GNU-stack,\"\",@progbits \n\n``` \n（3)在汇编阶段，汇编器（as）将输入的hello.s转换成二进制机器代码文件*.o。这个阶段所使用的命令是。\n```shell\ngcc -c hello.s -o hello.o  \n```\n这个阶段会生成一个二进制的文件hello.o，现在已经不可以使用vim察看了，但是还可以使用od来察看，可以看到文件内容是如下一些的数字。\n```\n0000000 042577 043114 000401 000001 000000 000000 000000 000000  \n0000020 000001 000003 000001 000000 000000 000000 000000 000000  \n0000040 000424 000000 000000 000000 000064 000000 000000 000050  \n0000060 000015 000012 104525 101745 170344 166203 143420 022004  \n0000100 000000 000000 176350 177777 134377 000000 000000 141711  \n0000120 062510 066154 026157 067567 066162 020544 000000 041507  \n0000140 035103 024040 062504 064542 067141 032040 033456 031056  \n0000160 032455 020051 027064 027067 000062 000000 000024 000000  \n0000200 000000 000000 075001 000122 076001 000410 006033 002004  \n0000220 000610 000000 000034 000000 000034 000000 000000 000000  \n0000240 000034 000000 040400 004016 001205 006502 054005 006305  \n0000260 002004 000000 027000 074563 072155 061141 027000 072163  \n0000300 072162 061141 027000 064163 072163 072162 061141 027000  \n0000320 062562 027154 062564 072170 027000 060544 060564 027000  \n0000340 071542 000163 071056 062157 072141 000141 061456 066557  \n0000360 062555 072156 027000 067556 062564 043456 052516 071455  \n0000400 060564 065543 027000 062562 027154 064145 063137 060562  \n0000420 062555 000000 000000 000000 000000 000000 000000 000000  \n0000440 000000 000000 000000 000000 000000 000000 000000 000000  \n0000460 000000 000000 000000 000000 000000 000000 000037 000000  \n0000500 000001 000000 000006 000000 000000 000000 000064 000000  \n0000520 000034 000000 000000 000000 000000 000000 000004 000000  \n0000540 000000 000000 000033 000000 000011 000000 000000 000000  \n0000560 000000 000000 001744 000000 000020 000000 000013 000000  \n0000600 000001 000000 000004 000000 000010 000000 000045 000000  \n0000620 000001 000000 000003 000000 000000 000000 000120 000000  \n0000640 000000 000000 000000 000000 000000 000000 000004 000000  \n0000660 000000 000000 000053 000000 000010 000000 000003 000000  \n0000700 000000 000000 000120 000000 000000 000000 000000 000000  \n0000720 000000 000000 000004 000000 000000 000000 000060 000000  \n0000740 000001 000000 000002 000000 000000 000000 000120 000000  \n0000760 000015 000000 000000 000000 000000 000000 000001 000000  \n0001000 000000 000000 000070 000000 000001 000000 000060 000000  \n0001020 000000 000000 000135 000000 000035 000000 000000 000000  \n0001040 000000 000000 000001 000000 000001 000000 000101 000000  \n0001060 000001 000000 000000 000000 000000 000000 000172 000000  \n0001100 000000 000000 000000 000000 000000 000000 000001 000000  \n0001120 000000 000000 000125 000000 000001 000000 000002 000000  \n0001140 000000 000000 000174 000000 000070 000000 000000 000000  \n0001160 000000 000000 000004 000000 000000 000000 000121 000000  \n0001200 000011 000000 000000 000000 000000 000000 001764 000000  \n0001220 000010 000000 000013 000000 000010 000000 000004 000000  \n0001240 000010 000000 000021 000000 000003 000000 000000 000000  \n0001260 000000 000000 000264 000000 000137 000000 000000 000000  \n0001300 000000 000000 000001 000000 000000 000000 000001 000000  \n0001320 000002 000000 000000 000000 000000 000000 001434 000000  \n0001340 000260 000000 000014 000000 000011 000000 000004 000000  \n0001360 000020 000000 000011 000000 000003 000000 000000 000000  \n0001400 000000 000000 001714 000000 000025 000000 000000 000000  \n0001420 000000 000000 000001 000000 000000 000000 000000 000000  \n0001440 000000 000000 000000 000000 000000 000000 000001 000000  \n0001460 000000 000000 000000 000000 000004 177761 000000 000000  \n0001500 000000 000000 000000 000000 000003 000001 000000 000000  \n0001520 000000 000000 000000 000000 000003 000003 000000 000000  \n0001540 000000 000000 000000 000000 000003 000004 000000 000000  \n0001560 000000 000000 000000 000000 000003 000005 000000 000000  \n0001600 000000 000000 000000 000000 000003 000007 000000 000000  \n0001620 000000 000000 000000 000000 000003 000010 000000 000000  \n0001640 000000 000000 000000 000000 000003 000006 000011 000000  \n0001660 000000 000000 000034 000000 000022 000001 000016 000000  \n0001700 000000 000000 000000 000000 000020 000000 064000 066145  \n0001720 067554 061456 066400 064541 000156 071160 067151 063164  \n0001740 000000 000000 000014 000000 002401 000000 000021 000000  \n0001760 005002 000000 000040 000000 001002 000000  \n0001774  \n```\n(4)最后，连接器（ld）在链接阶段将输入的二进制机器代码文件*.o汇集成一个可执行的二进制代码文件。使用如下的代码。\n```shell\ngcc hello.o -o hello \n```\n\n\n最后在来使用od命令察看最后生成的hello文件，会发现它要比hello.o文件更大一些，原因在与，在最后一步的时候，把其他的二进制代码也链接进来了，如库文件等。","slug":"gcc编译C程序的过程","published":1,"updated":"2016-04-29T06:35:46.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6ym000szskooawtpoyj"},{"title":"apache和tomcat的区别","date":"2013-12-21T13:11:00.000Z","_content":"\n### 前言 ###\n曾经有人问我，Apache和Tomcat的区别，其实我也想过这个问题，但是没有仔细想，只觉得他们的不同大概在于可以执行的脚本语言不同。曾经安装过Apache是用来解释PHP所以我想都没有仔细想就回答说Apache是用来解释PHP的而Tomcat是用来解释jsp的。今天又突然有了这个疑问，终于想搞清这个问题了，于是在网上找了一下这个问题，发现这还真是一个问题，网上有很多关于这个问题的内容。于是把网上的内容总结一下，顺带加入一点自己的理解，作一个记录。\n### 概述 ###\n首先从一个Web应用说起，Web应用包括的东西可不只是购物车、退出交易页面和那些引人注目的图形，大多数的电子商务应用都使用3层结构。所以当谈论“应用”时，实际上我们指的是一个或多个服务器。这是摘抄一本书上关于Web应用的一段话，我觉得这段话带出了很多问题。下面再摘抄一下他关于构成Web应用的“一个或多个服务器”的分类，这里分了下面三类。\n \nweb服务器：这一部分为用户浏览浏览器提供web页面。最常见的例子就是apache和iis。\n \n应用服务器：这一部分替用户操作、解释、提供数据。应用服务器可以是web服务器的一部分，例如PHP和Apache，或是ASP.NET就是这样。另一方面，应用服务器可以是物理上独立的服务器，例如Tomcat servlet引擎。\n \n数据库：这一部分存储应用所需的全部数据。尽管用户能够与Web和应用服务器交互，但他们通常不能直接访问数据库服务器。大多数情况下，应用服务器代理用户和数据库之间的数据，并格式化数据使之正确存储。\n \n依据我对上面的理解，Apache是Web服务器，Tomcat是应用服务器。那Web服务器和应用服务器的区别在哪里呢，依据我的理解在于他们专注的方向不同，Web服务器专注于和客户交互，通信。将HTML页面返回给用户。而应用服务器则专注于处理服务器上的一些处理，例如将jsp转化为servlet，然后服务器在根据请求执行生成的java类文件动态生成HTML并将这个页面返回给用户。下面是从网上找来的两者的不同。\n \n### 不同 ###\n \n1、APACHE是WEB服务器，Web服务器传送(serves)页面使浏览器可以浏览，Web服务器专门处理HTTP请求(request)，但是应用程序服务器是通过很多协议来为应用程序提供 (serves)商业逻辑(business logic)。\nTOMCAT是运行在APACHE上的应用服务器，应用程序服务器提供的是客户端应用程序可以调用(call)的方法 (methods)。它只是一个servlet(jsp也翻译成servlet)容器，可以认为是apache的扩展，但是可以独立于apache运行。\n\n2、Apache是普通服务器，本身只支持html即普通网页。不过可以通过插件支持PHP,还可以与Tomcat连通(单向Apache连接Tomcat,就是说通过Apache可以访问Tomcat资源。反之不然)，\n\nTomcat是jsp/servlet容器,同时也支持html,和CGI. CGI需要一些手动调试，不过很容易的。\n\n3、apache:侧重于http server，但tomcat:侧重于servlet引擎，如果以standalone方式运行，功能上与apache等效，支持JSP，但对静态网页不太理想。\n\n4、apache可以运行一年不重启, 稳定性非常好, 而 tomcat 则不见得。\n\n5、 首选 web服务器是 apache,但有 apache解析不了的 jsp,servlet才用 tomcat。\n\n6、apache是很最开始的页面解析服务， tomcat是后研发出来的 ，从本质上来说，tomcat的功能完全可以替代apache，但apache毕竟是tomcat的前辈级人物，并且市场上也有不少人还在用apache，所以apache还会继续存在，不会被取代， apache不能解析java的东西，但解析html速度快。\n\n### 例子 ###\napache是一辆车，上面可以装一些东西如html等。但是不能装水，要装水必须要有容器（桶），而这个桶也可以不放在卡车上。那这个桶就是TOMCAT。\n \n再举个我自己想的例子\n \nApache就像是一家公司，公司给客户提供服务，而Tomcat就像是这家公司的一名技术人员，在公司给客户提供的服务中有这名员工的工作成果。这名员工可以为公司服务，通过公司和客户打交道，当然他也可以不再公司里出来自己混。那么他就要自己和客户打交道。也可以给用户提供服务。这就是我对Apache和Tomcat区别的理解。\n \n初学Web，有错在所难免，欢迎知道的兄台不吝赐教。在下谢过了。","source":"_posts/apache和tomcat的区别.md","raw":"---\ntitle:  apache和tomcat的区别\ndate: 2013-12-21 21:11\ntags: Web基础\n---\n\n### 前言 ###\n曾经有人问我，Apache和Tomcat的区别，其实我也想过这个问题，但是没有仔细想，只觉得他们的不同大概在于可以执行的脚本语言不同。曾经安装过Apache是用来解释PHP所以我想都没有仔细想就回答说Apache是用来解释PHP的而Tomcat是用来解释jsp的。今天又突然有了这个疑问，终于想搞清这个问题了，于是在网上找了一下这个问题，发现这还真是一个问题，网上有很多关于这个问题的内容。于是把网上的内容总结一下，顺带加入一点自己的理解，作一个记录。\n### 概述 ###\n首先从一个Web应用说起，Web应用包括的东西可不只是购物车、退出交易页面和那些引人注目的图形，大多数的电子商务应用都使用3层结构。所以当谈论“应用”时，实际上我们指的是一个或多个服务器。这是摘抄一本书上关于Web应用的一段话，我觉得这段话带出了很多问题。下面再摘抄一下他关于构成Web应用的“一个或多个服务器”的分类，这里分了下面三类。\n \nweb服务器：这一部分为用户浏览浏览器提供web页面。最常见的例子就是apache和iis。\n \n应用服务器：这一部分替用户操作、解释、提供数据。应用服务器可以是web服务器的一部分，例如PHP和Apache，或是ASP.NET就是这样。另一方面，应用服务器可以是物理上独立的服务器，例如Tomcat servlet引擎。\n \n数据库：这一部分存储应用所需的全部数据。尽管用户能够与Web和应用服务器交互，但他们通常不能直接访问数据库服务器。大多数情况下，应用服务器代理用户和数据库之间的数据，并格式化数据使之正确存储。\n \n依据我对上面的理解，Apache是Web服务器，Tomcat是应用服务器。那Web服务器和应用服务器的区别在哪里呢，依据我的理解在于他们专注的方向不同，Web服务器专注于和客户交互，通信。将HTML页面返回给用户。而应用服务器则专注于处理服务器上的一些处理，例如将jsp转化为servlet，然后服务器在根据请求执行生成的java类文件动态生成HTML并将这个页面返回给用户。下面是从网上找来的两者的不同。\n \n### 不同 ###\n \n1、APACHE是WEB服务器，Web服务器传送(serves)页面使浏览器可以浏览，Web服务器专门处理HTTP请求(request)，但是应用程序服务器是通过很多协议来为应用程序提供 (serves)商业逻辑(business logic)。\nTOMCAT是运行在APACHE上的应用服务器，应用程序服务器提供的是客户端应用程序可以调用(call)的方法 (methods)。它只是一个servlet(jsp也翻译成servlet)容器，可以认为是apache的扩展，但是可以独立于apache运行。\n\n2、Apache是普通服务器，本身只支持html即普通网页。不过可以通过插件支持PHP,还可以与Tomcat连通(单向Apache连接Tomcat,就是说通过Apache可以访问Tomcat资源。反之不然)，\n\nTomcat是jsp/servlet容器,同时也支持html,和CGI. CGI需要一些手动调试，不过很容易的。\n\n3、apache:侧重于http server，但tomcat:侧重于servlet引擎，如果以standalone方式运行，功能上与apache等效，支持JSP，但对静态网页不太理想。\n\n4、apache可以运行一年不重启, 稳定性非常好, 而 tomcat 则不见得。\n\n5、 首选 web服务器是 apache,但有 apache解析不了的 jsp,servlet才用 tomcat。\n\n6、apache是很最开始的页面解析服务， tomcat是后研发出来的 ，从本质上来说，tomcat的功能完全可以替代apache，但apache毕竟是tomcat的前辈级人物，并且市场上也有不少人还在用apache，所以apache还会继续存在，不会被取代， apache不能解析java的东西，但解析html速度快。\n\n### 例子 ###\napache是一辆车，上面可以装一些东西如html等。但是不能装水，要装水必须要有容器（桶），而这个桶也可以不放在卡车上。那这个桶就是TOMCAT。\n \n再举个我自己想的例子\n \nApache就像是一家公司，公司给客户提供服务，而Tomcat就像是这家公司的一名技术人员，在公司给客户提供的服务中有这名员工的工作成果。这名员工可以为公司服务，通过公司和客户打交道，当然他也可以不再公司里出来自己混。那么他就要自己和客户打交道。也可以给用户提供服务。这就是我对Apache和Tomcat区别的理解。\n \n初学Web，有错在所难免，欢迎知道的兄台不吝赐教。在下谢过了。","slug":"apache和tomcat的区别","published":1,"updated":"2016-04-29T09:38:02.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6ym000vzskorw0z6dpf"},{"title":"Linux学习过程中的问题","date":"2015-10-22T15:42:00.000Z","_content":"\nvim有大量为了开发者的插件，并且当他们整合在一起vim就变得比除此以外任何IDE都要强大。另外的优点就是资源消费少，和Eclipse或者NetBeans比较是它是最低的。这也使得基于vim的IDE的主意适合远程编程。Yavide是一个认真使用vim插件的新项目，并且尝试把所有的事情打包到一起。它也致力于提供一些在其他IDE不可用的功能。它现在的状态（在这篇文章写作时），Yavide看起来像是spf13-vim的下一步。Yavide仍然是在开发阶段并且还没看到他的第一个版本。然而，作者正致力于缺失和被要求的功能。\n功能：\n对C/C++做了捆绑和调整（计划支持Python和Java）\n项目管理和项目浏览\n当前单元定义的类符的概览（如，宏，结构体，类，方法，命名空间，等）\n源码自动补全（后端有真实的C/C++编译器检查正确性）\n源码导航（全自动后端标签系统保证最好的UI体验）\n源码静态分析\n版本控制集成（集成git）\n构建工具（集成make）\n为不同的操作定制快捷键\n其他特性：\n                语法高亮\n                高亮当前行\n                括号自动补全\n                基于上下文的自动补全\n                多文本编辑支持\n                模板代码补全\n                grep支持\n                bash集成\n                彩色主题支持\n\n插件\n下面vim插件是在编写本文时已经集成了插件：\nA\nClang_complete\nNERDTree\nNERDCommenter\nSuerTab\nTagbar\nvim-airline\nUltiSnips\nvim-autoclose\nvim-fugitive\nvim-gitgutter\nvim-multiple-cursors\nvim-pathogen\n\n安装\n在基于Ubuntu的系统上安装Yavide，运行：\n```\n$ sudo apt-get install build-essential vim-gnome python2.7 git libclang-dev python-dev \n``` \n\n运行下面的命令从git仓库克隆yavide并安装它：\n```\n$ cd ~/ && git clone https://github.com/JBakamovic/yavide.git  \n$ cd yavide && ./install.sh  \n```\n\n修改你想要安装yavide的位置。默认是/opt。yavide将创建它自己的目录并且安装文件在里面。\n\n在GitHub上：Yavide\n\n本文翻译自：YAVIDE: MODERN C C++ IDE OVER VIM\n\n为什么要弄这么一篇文章呢，因为我也想写一个包含各种我需要的插件的vim的IDE，按照我的想法来构建，遵守我的使用习惯，并且在我需要的任何时候我都可以快速的从github上clone下来，完成个性化ide的搭建。this all.","source":"_posts/Yavide通过vim实现的C C++现代IDE.md","raw":"---\ntitle: Linux学习过程中的问题\ndate: 2015-10-22 23:42\ntags: 开发工具\n---\n\nvim有大量为了开发者的插件，并且当他们整合在一起vim就变得比除此以外任何IDE都要强大。另外的优点就是资源消费少，和Eclipse或者NetBeans比较是它是最低的。这也使得基于vim的IDE的主意适合远程编程。Yavide是一个认真使用vim插件的新项目，并且尝试把所有的事情打包到一起。它也致力于提供一些在其他IDE不可用的功能。它现在的状态（在这篇文章写作时），Yavide看起来像是spf13-vim的下一步。Yavide仍然是在开发阶段并且还没看到他的第一个版本。然而，作者正致力于缺失和被要求的功能。\n功能：\n对C/C++做了捆绑和调整（计划支持Python和Java）\n项目管理和项目浏览\n当前单元定义的类符的概览（如，宏，结构体，类，方法，命名空间，等）\n源码自动补全（后端有真实的C/C++编译器检查正确性）\n源码导航（全自动后端标签系统保证最好的UI体验）\n源码静态分析\n版本控制集成（集成git）\n构建工具（集成make）\n为不同的操作定制快捷键\n其他特性：\n                语法高亮\n                高亮当前行\n                括号自动补全\n                基于上下文的自动补全\n                多文本编辑支持\n                模板代码补全\n                grep支持\n                bash集成\n                彩色主题支持\n\n插件\n下面vim插件是在编写本文时已经集成了插件：\nA\nClang_complete\nNERDTree\nNERDCommenter\nSuerTab\nTagbar\nvim-airline\nUltiSnips\nvim-autoclose\nvim-fugitive\nvim-gitgutter\nvim-multiple-cursors\nvim-pathogen\n\n安装\n在基于Ubuntu的系统上安装Yavide，运行：\n```\n$ sudo apt-get install build-essential vim-gnome python2.7 git libclang-dev python-dev \n``` \n\n运行下面的命令从git仓库克隆yavide并安装它：\n```\n$ cd ~/ && git clone https://github.com/JBakamovic/yavide.git  \n$ cd yavide && ./install.sh  \n```\n\n修改你想要安装yavide的位置。默认是/opt。yavide将创建它自己的目录并且安装文件在里面。\n\n在GitHub上：Yavide\n\n本文翻译自：YAVIDE: MODERN C C++ IDE OVER VIM\n\n为什么要弄这么一篇文章呢，因为我也想写一个包含各种我需要的插件的vim的IDE，按照我的想法来构建，遵守我的使用习惯，并且在我需要的任何时候我都可以快速的从github上clone下来，完成个性化ide的搭建。this all.","slug":"Yavide通过vim实现的C C++现代IDE","published":1,"updated":"2016-04-29T07:28:10.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6ym000xzsko2ov6kol0"},{"title":"Win2008搭建Web和FTP服务","date":"2016-04-10T18:32:55.000Z","_content":"\n### 介绍\n本篇博客介绍的是在UCloud的云主机上通过IIS搭建Web和FTP服务器的过程，这里的Web服务器只支持最简单的html页面，如果需要其他支持，请自行安装所需软件。\n\n###创建和连接主机\n**1、创建win2008的主机**\n在UCloud平台上创建win2008主机的过程和创建其他系统主机过程一样，但是要注意的是，默认的镜像不是Windows系统的，所以在安装过程中需要注意选择下Windows系统的镜像。这里使用的是Win2008 R2 64bit的一个镜像系统。\n![Win2008搭建Web和FTP服务](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A1.png)\n\n**2、使用mstsc连接管理主机**\nUCloud平台提供了Web连接主机的方式，这种连接方式并不推荐用来管理主机，而比较适合在应急的情况下登录，检查主机状况，由于控制登录与主机网络状态是无关的，这种登录方式在主机网络异常的情况下，可以非常方便的通过其登录主机检查主机的网络设置。在正常情况下我们还是使用mstsc（远程桌面连接）来管理主机。首先打开远程桌面软件，通过按下win key + r，然后输入mstsc就可以了。\n![Win2008搭建Web和FTP服务](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A11.png)\n\n打开远程连接界面后，下面有个小三角形，点击打开更大选项，输入相关参数。输入示例如下：\n![Win2008搭建Web和FTP服务](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A12.png)\n\n输入都正确以后，会弹出一个关于正式的对话框，点是忽略这个证书问题就可以了，然后就能顺利的连接上主机。\n\n###创建Web和ftp服务器\n1、服务器登录上去之后会自动打开服务器管理界面。第一件事先添加一个角色。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A13.png)\n\n2、点击下一步，勾选Web服务器（IIS）这一项，然后点击下一步。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A14.png)\n\n3、由于这里还要安装ftp服务，把ftp相关的勾选上。在点击下一步就会开始安装了，安装过程很快，大概一两分钟的样子。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A15.png)\n\n4、添加完角色之后就可以添加站点了，右键点击箭头标出的地方，然后选择新建站点就可以了。其实这个时候就可以直接访问了，可以访问到默认站点。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A16.png)\n\n5、站点的设置。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A17.png)\n\n6、本地访问测试默认站点。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A18.png)\n\n7、下面的步骤介绍的是建立ftp服务器的过程，首先新建一个ftp站点。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A19.png)\n\n8、ftp站点的基本设置，站点名和站点（物理）路径。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A110.png)\n\n9、ssl设置，由于我没有证书，没办法使用https模式。所以ssl这个选无。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A111.png)\n\n10、访问和授权设置。这里不限制用户访问，给所有访问这个ftp站点的用户读取站点文件的权限。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A112.png)\n\n11、在外网测试ftp服务器，这里假设防火墙端口已经打开。在UCloud平台上，Windows内部的防火墙默认是关闭了的，但是平台提供的防火墙是开着的，而且默认防火墙21端口是没有打开的。如果不清楚防火墙打开过程可以参考下面的说明。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A113.png)\n\n\n###打开外网防火墙\n打开外网防火墙的说明在之前博客中有介绍，这里就不在赘述，过程都是一样的，具体参考前面的博客[UCloud上LAMP小型网站搭建与测试](http://zone.gaospot.com/2016/03/30/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%95/)。\n\n\n\n*参考：[Windows server 2008 r2搭建FTP服务器](http://ce.sysu.edu.cn/hope/Item/91192.aspx)*\n\n\n\n\n","source":"_posts/Win2008搭建Web和FTP服务.md","raw":"---\ntitle: Win2008搭建Web和FTP服务\ndate: 2016-04-11 02:32:55\ntags: 系统运维\n---\n\n### 介绍\n本篇博客介绍的是在UCloud的云主机上通过IIS搭建Web和FTP服务器的过程，这里的Web服务器只支持最简单的html页面，如果需要其他支持，请自行安装所需软件。\n\n###创建和连接主机\n**1、创建win2008的主机**\n在UCloud平台上创建win2008主机的过程和创建其他系统主机过程一样，但是要注意的是，默认的镜像不是Windows系统的，所以在安装过程中需要注意选择下Windows系统的镜像。这里使用的是Win2008 R2 64bit的一个镜像系统。\n![Win2008搭建Web和FTP服务](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A1.png)\n\n**2、使用mstsc连接管理主机**\nUCloud平台提供了Web连接主机的方式，这种连接方式并不推荐用来管理主机，而比较适合在应急的情况下登录，检查主机状况，由于控制登录与主机网络状态是无关的，这种登录方式在主机网络异常的情况下，可以非常方便的通过其登录主机检查主机的网络设置。在正常情况下我们还是使用mstsc（远程桌面连接）来管理主机。首先打开远程桌面软件，通过按下win key + r，然后输入mstsc就可以了。\n![Win2008搭建Web和FTP服务](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A11.png)\n\n打开远程连接界面后，下面有个小三角形，点击打开更大选项，输入相关参数。输入示例如下：\n![Win2008搭建Web和FTP服务](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A12.png)\n\n输入都正确以后，会弹出一个关于正式的对话框，点是忽略这个证书问题就可以了，然后就能顺利的连接上主机。\n\n###创建Web和ftp服务器\n1、服务器登录上去之后会自动打开服务器管理界面。第一件事先添加一个角色。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A13.png)\n\n2、点击下一步，勾选Web服务器（IIS）这一项，然后点击下一步。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A14.png)\n\n3、由于这里还要安装ftp服务，把ftp相关的勾选上。在点击下一步就会开始安装了，安装过程很快，大概一两分钟的样子。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A15.png)\n\n4、添加完角色之后就可以添加站点了，右键点击箭头标出的地方，然后选择新建站点就可以了。其实这个时候就可以直接访问了，可以访问到默认站点。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A16.png)\n\n5、站点的设置。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A17.png)\n\n6、本地访问测试默认站点。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A18.png)\n\n7、下面的步骤介绍的是建立ftp服务器的过程，首先新建一个ftp站点。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A19.png)\n\n8、ftp站点的基本设置，站点名和站点（物理）路径。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A110.png)\n\n9、ssl设置，由于我没有证书，没办法使用https模式。所以ssl这个选无。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A111.png)\n\n10、访问和授权设置。这里不限制用户访问，给所有访问这个ftp站点的用户读取站点文件的权限。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A112.png)\n\n11、在外网测试ftp服务器，这里假设防火墙端口已经打开。在UCloud平台上，Windows内部的防火墙默认是关闭了的，但是平台提供的防火墙是开着的，而且默认防火墙21端口是没有打开的。如果不清楚防火墙打开过程可以参考下面的说明。\n![创建Web和ftp服务器](http://7xr7kh.com1.z0.glb.clouddn.com/Win2008%E6%90%AD%E5%BB%BAWeb%E5%92%8CFtp%E6%9C%8D%E5%8A%A113.png)\n\n\n###打开外网防火墙\n打开外网防火墙的说明在之前博客中有介绍，这里就不在赘述，过程都是一样的，具体参考前面的博客[UCloud上LAMP小型网站搭建与测试](http://zone.gaospot.com/2016/03/30/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%95/)。\n\n\n\n*参考：[Windows server 2008 r2搭建FTP服务器](http://ce.sysu.edu.cn/hope/Item/91192.aspx)*\n\n\n\n\n","slug":"Win2008搭建Web和FTP服务","published":1,"updated":"2016-04-10T18:37:12.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6ym000zzskoz6xhgxs5"},{"title":"Unix网络编程unp.h问题以及Linux中的库","date":"2014-03-17T08:27:00.000Z","_content":"\nStevens的《UNIX网络编程 卷1：套接字连网API》是一本很著名的UNIX网络编程书籍。其中使用了一个unp.h的引用，如果没有设置相应的库的话，即使引入了头文件也是没用的。所以首先要配置相应的库。\n基础环境：\n操作系统 Debian\n开发环境 GCC，MAKE等，首先要有c编译器，make等基础的工具。如果没有的话，可以通过下面命令安装。这个命令会安装一个工具集，其中包含了很多linux C开发所需的工具。\n```shell\nsudo apt-get install build-essential  \n```\n\n（1）从网上下载unpv.13e.tar.gz。在网上一搜一大堆。unpv.12e.tar.gz版本的有问题，所以要避免使用。下载了安装包解压后就可以照着他的README文件指示安装了。解压的命令是\n```shell\ntar -xvf unpv.13e.tar.gz  \n```\n\n（2）现在可以cd到unpv13e目录。执行下面两个命令就可以在unpv13e目录下生成相应的库函数。\n```\ncd unpv13e  \n./configure  \ncd lib && make  \n```\n\n（3）返回unpv13e目录，将生成的libunp.a复制到相应的库文件目录下。相应的shell命令。\n```\ncd ..  \nsudo cp libunp.a /usr/lib    \nsudo cp libunp.a /usr/lib64  \n```\n\n（4）修改unp.h并将其和config.h拷贝到/usr/iinclude中\n```\ngedit lib/unp.h   //将unp.h中#include \"../config.h\"修改为#include \"config.h\"  \n```\n\n```\nsudo cp lib/unp.h /usr/include    \nsudo cp config.h /usr/include   \n```\n\n（5）编写一个小程序测试一下吧，在unpv13e的intro目录中包含了几个实例。可以用来测试一下。看能否生成相应的可执行文件。\n```\ncd ./intro    \ngcc daytimetcpcli.c -o daytimetcpcli -lunp   \n```\n\n附录：Linux中的库\n库是作为软件的一个组建存在的，其目的是提高软件的可重用性。库里面封装了数据和函数。库可以分为静态库和动态库两种。在Linux系统中，通常把库文件放在/usr/lib或/lib目录中。Linux库文件名由前缀lib、库名以及后缀组成，其中动态库的后缀为.so,而静态库的后缀为.a。\n\n在程序中使用静态库和动态库时，他们载入的顺序是不一样的。静态库的代码在编译是就拷贝到应用程序中，因此当多个应用程序同时引用一个静态库函数时，内存会有调用函数的多个副本。，这样的优点是可以节约编译是的时间。而动态库是在程序开始运行后调用库函数是才被载入的，被调函数在内存中只有一个副本，并且动态库是可以在程序运行期间释放动态库所占内存的。\n\n（1）静态库的创建和使用\n创建静态库的步骤如下：\n1)在一个头文件中声明静态库所导出的函数。\n2)在一个源文件中实现静态库函数所导出的函数。\n3)编译源文件，生成可执行代码。\n4)将可执行代码所在的目标文件加入到某个静态库中，并在静态库拷贝到系统默认的存放库文件的目录下。\n \n编译并添加静态库\n```\ngcc -o mylib.o -c mylib.c  \nar rcs libmylib.a mylib.o  \n```\n\n \nar命令可以创建和修改静态库。具体参见：man ar\n\n（2)动态库的创建和使用\n上面的配置过程创建的就是一个动态库。在编译包含动态库的函数是可以使用“-lunp”（包含上面所编译的库文件）选项。程序将调用动态链接库libunp.so中的函数。在-lunp中，-l为选项，unp为库名。unp是“libunp.so”的中间部分，linux中所以的库都以lib开始，在编译程序时无需带上前缀和后缀。\n \n编译并添加动态库\n```\ngcc -fPIC -o mylib.o -c mylib.c  \ngcc -shared -o libmylib.so mylib.o  \n```\n或\n```\ngcc -fPIC -shared -o libmylib.so mylib.c  \n```","source":"_posts/Unix网络编程unp.h问题以及Linux中的库.md","raw":"---\ntitle: Unix网络编程unp.h问题以及Linux中的库\ndate: 2014-03-17 16:27\ntags: 网络编程\n---\n\nStevens的《UNIX网络编程 卷1：套接字连网API》是一本很著名的UNIX网络编程书籍。其中使用了一个unp.h的引用，如果没有设置相应的库的话，即使引入了头文件也是没用的。所以首先要配置相应的库。\n基础环境：\n操作系统 Debian\n开发环境 GCC，MAKE等，首先要有c编译器，make等基础的工具。如果没有的话，可以通过下面命令安装。这个命令会安装一个工具集，其中包含了很多linux C开发所需的工具。\n```shell\nsudo apt-get install build-essential  \n```\n\n（1）从网上下载unpv.13e.tar.gz。在网上一搜一大堆。unpv.12e.tar.gz版本的有问题，所以要避免使用。下载了安装包解压后就可以照着他的README文件指示安装了。解压的命令是\n```shell\ntar -xvf unpv.13e.tar.gz  \n```\n\n（2）现在可以cd到unpv13e目录。执行下面两个命令就可以在unpv13e目录下生成相应的库函数。\n```\ncd unpv13e  \n./configure  \ncd lib && make  \n```\n\n（3）返回unpv13e目录，将生成的libunp.a复制到相应的库文件目录下。相应的shell命令。\n```\ncd ..  \nsudo cp libunp.a /usr/lib    \nsudo cp libunp.a /usr/lib64  \n```\n\n（4）修改unp.h并将其和config.h拷贝到/usr/iinclude中\n```\ngedit lib/unp.h   //将unp.h中#include \"../config.h\"修改为#include \"config.h\"  \n```\n\n```\nsudo cp lib/unp.h /usr/include    \nsudo cp config.h /usr/include   \n```\n\n（5）编写一个小程序测试一下吧，在unpv13e的intro目录中包含了几个实例。可以用来测试一下。看能否生成相应的可执行文件。\n```\ncd ./intro    \ngcc daytimetcpcli.c -o daytimetcpcli -lunp   \n```\n\n附录：Linux中的库\n库是作为软件的一个组建存在的，其目的是提高软件的可重用性。库里面封装了数据和函数。库可以分为静态库和动态库两种。在Linux系统中，通常把库文件放在/usr/lib或/lib目录中。Linux库文件名由前缀lib、库名以及后缀组成，其中动态库的后缀为.so,而静态库的后缀为.a。\n\n在程序中使用静态库和动态库时，他们载入的顺序是不一样的。静态库的代码在编译是就拷贝到应用程序中，因此当多个应用程序同时引用一个静态库函数时，内存会有调用函数的多个副本。，这样的优点是可以节约编译是的时间。而动态库是在程序开始运行后调用库函数是才被载入的，被调函数在内存中只有一个副本，并且动态库是可以在程序运行期间释放动态库所占内存的。\n\n（1）静态库的创建和使用\n创建静态库的步骤如下：\n1)在一个头文件中声明静态库所导出的函数。\n2)在一个源文件中实现静态库函数所导出的函数。\n3)编译源文件，生成可执行代码。\n4)将可执行代码所在的目标文件加入到某个静态库中，并在静态库拷贝到系统默认的存放库文件的目录下。\n \n编译并添加静态库\n```\ngcc -o mylib.o -c mylib.c  \nar rcs libmylib.a mylib.o  \n```\n\n \nar命令可以创建和修改静态库。具体参见：man ar\n\n（2)动态库的创建和使用\n上面的配置过程创建的就是一个动态库。在编译包含动态库的函数是可以使用“-lunp”（包含上面所编译的库文件）选项。程序将调用动态链接库libunp.so中的函数。在-lunp中，-l为选项，unp为库名。unp是“libunp.so”的中间部分，linux中所以的库都以lib开始，在编译程序时无需带上前缀和后缀。\n \n编译并添加动态库\n```\ngcc -fPIC -o mylib.o -c mylib.c  \ngcc -shared -o libmylib.so mylib.o  \n```\n或\n```\ngcc -fPIC -shared -o libmylib.so mylib.c  \n```","slug":"Unix网络编程unp.h问题以及Linux中的库","published":1,"updated":"2016-04-29T06:53:06.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6ym0011zskonh1qafko"},{"title":"UCloud上LNMP小型网站搭建","date":"2016-03-31T18:22:24.000Z","_content":"\n### 目录 ###\n 1. 介绍\n 2. LNMP环境搭建\n 3. 打开UCloud防火墙\n 4. Discuz!安装\n 5. 应用测试\n\n### 介绍 ###\n这篇博客是之前[UCloud上LAMP小型网站搭建与测试](http://zone.gaospot.com/2016/03/30/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%95/)的姐妹篇，重点在于通过介绍在UCloud云主机上安装Discuz!来介绍LNMP环境的搭建，这里Discuz!可以换成任何用户自己的应用，过程都是类似的。\n\n### LNMP环境搭建 ###\n关于主机的创建，登录和管理可以参考之前的那篇博客，这里直接就介绍在主机上安装NMP环境，安装步骤如下：\n\n1、Uhost环境\nCentOS-6.5 x86_64\n\n\n2、安装NMP\n\n```bash\n# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n# yum install -y nginx mysql-server php php-gd php-xml php-fpm php-mysql php-bcmath php-mbstring php-mcrypt\n```\n\n\n3、配置Nginx\n\n```bash\n# vim /etc/nginx/nginx.conf\n```\n\n修改如下内容：\n\n```\nuser nginx;\nworker_processes  1;\nerror_log /var/log/nginx/error.log;\npid /var/run/nginx.pid;\n\nevents {\n    use epoll;\n    worker_connections 1024;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    sendfile on;\n    tcp_nopush on;\n    keepalive_timeout 65;\n    gzip on;\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n\n添加虚拟主机\n\n```bash\n# vim/etc/nginx/conf.d/virtual.conf\n```\n\n```\nserver {\n    listen       80;\n    server_name  www.domain.com;\n    root /var/www/html;\n    index index.html index.htm index.php;\n    access_log  /var/log/nginx/domain-acess.log;\n\n    location ~ .*\\.php?$ {\n        include fastcgi.conf;\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        access_log off;\n    }\n\n    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|js|css)$ {\n        expires 15d;\n    }\n\n}\n```\n\n4、配置PHP\n\n```bash\n# sed -i 's#;date.timezone =#date.timezone = Asia/Shanghai#' /etc/php.ini\n# sed -n 's#user = apache#user = nginx#p' /etc/php-fpm.d/www.conf\n# sed -n 's#group = apache#group = nginx#p' /etc/php-fpm.d/www.conf\n```\n\n5、启动服务\n\n```bash\n# service nginx start\n# chkconfig nginx on\n# service php-fpm start\n# chkconfig nginx on\n# echo “<?php phpinfo();” > /var/www/html/phpinfo.php\n```\n\n打开浏览器，输入下面URL(记得解析DNS，或者修改hosts文件)\nhttp://www.domain.com/phpinfo.php\n\n\n6、启动MySQL\nMySQL默认有生成几个配置文件，可以根据自己的硬件情况把文件复制到/etc/my.cnf\n\n```bash\n# ls /usr/share/mysql/*.cnf\n# service mysqld start\n# chkconfig mysqld on\n```\n\n### 打开UCloud防火墙 ###\nUCloud平台防火墙的打开可以参考之前那篇博客[UCloud上LAMP小型网站搭建与测试](http://zone.gaospot.com/2016/03/30/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%95/)，上面有详细的说明。平台上面默认的防火墙是不允许修改规则的，所以要添加新的规则，需要新建防火墙。\n\n### Discuz!安装 ###\n1、下载Discuz，并解压。将upload 这个目录下面的所有文件拷贝到网站根目录，或者是其他二级目录也行。\n\n```bash\n# wget http://download.comsenz.com/DiscuzX/3.1/Discuz_X3.1_SC_UTF8.zip\n\n```\n\n2、文件成功解压到网站根目录后，通过在浏览器中运行安装向导来安装Discuz系统。然后一步步按提示向下安装。\n\n3、安装好后就可以在浏览器访问您的论坛了！\n\n参考：[Discuz!X3.1 全新安装图文教程 ](http://www.discuz.net/thread-3456887-1-1.html)\n\n### 应用测试 ###\n测试不是必要的过程，但为了更好的掌握应用的负载能力还是建议进行测试的，以对应用状况有比较好的了解。测试工具和测试方法网上有很多，可以自行Google，也可以参考上面一篇博客介绍的方法。最后说一点是没有完全正确的测试，测试只能模拟高并发是的情况，但与真实访问时候还是有差距的。\n\n\n","source":"_posts/UCloud上LNMP小型网站搭建.md","raw":"---\ntitle: UCloud上LNMP小型网站搭建\ndate: 2016-04-01 02:22:24\ntags: 系统运维\n---\n\n### 目录 ###\n 1. 介绍\n 2. LNMP环境搭建\n 3. 打开UCloud防火墙\n 4. Discuz!安装\n 5. 应用测试\n\n### 介绍 ###\n这篇博客是之前[UCloud上LAMP小型网站搭建与测试](http://zone.gaospot.com/2016/03/30/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%95/)的姐妹篇，重点在于通过介绍在UCloud云主机上安装Discuz!来介绍LNMP环境的搭建，这里Discuz!可以换成任何用户自己的应用，过程都是类似的。\n\n### LNMP环境搭建 ###\n关于主机的创建，登录和管理可以参考之前的那篇博客，这里直接就介绍在主机上安装NMP环境，安装步骤如下：\n\n1、Uhost环境\nCentOS-6.5 x86_64\n\n\n2、安装NMP\n\n```bash\n# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n# yum install -y nginx mysql-server php php-gd php-xml php-fpm php-mysql php-bcmath php-mbstring php-mcrypt\n```\n\n\n3、配置Nginx\n\n```bash\n# vim /etc/nginx/nginx.conf\n```\n\n修改如下内容：\n\n```\nuser nginx;\nworker_processes  1;\nerror_log /var/log/nginx/error.log;\npid /var/run/nginx.pid;\n\nevents {\n    use epoll;\n    worker_connections 1024;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    sendfile on;\n    tcp_nopush on;\n    keepalive_timeout 65;\n    gzip on;\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n\n添加虚拟主机\n\n```bash\n# vim/etc/nginx/conf.d/virtual.conf\n```\n\n```\nserver {\n    listen       80;\n    server_name  www.domain.com;\n    root /var/www/html;\n    index index.html index.htm index.php;\n    access_log  /var/log/nginx/domain-acess.log;\n\n    location ~ .*\\.php?$ {\n        include fastcgi.conf;\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        access_log off;\n    }\n\n    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|js|css)$ {\n        expires 15d;\n    }\n\n}\n```\n\n4、配置PHP\n\n```bash\n# sed -i 's#;date.timezone =#date.timezone = Asia/Shanghai#' /etc/php.ini\n# sed -n 's#user = apache#user = nginx#p' /etc/php-fpm.d/www.conf\n# sed -n 's#group = apache#group = nginx#p' /etc/php-fpm.d/www.conf\n```\n\n5、启动服务\n\n```bash\n# service nginx start\n# chkconfig nginx on\n# service php-fpm start\n# chkconfig nginx on\n# echo “<?php phpinfo();” > /var/www/html/phpinfo.php\n```\n\n打开浏览器，输入下面URL(记得解析DNS，或者修改hosts文件)\nhttp://www.domain.com/phpinfo.php\n\n\n6、启动MySQL\nMySQL默认有生成几个配置文件，可以根据自己的硬件情况把文件复制到/etc/my.cnf\n\n```bash\n# ls /usr/share/mysql/*.cnf\n# service mysqld start\n# chkconfig mysqld on\n```\n\n### 打开UCloud防火墙 ###\nUCloud平台防火墙的打开可以参考之前那篇博客[UCloud上LAMP小型网站搭建与测试](http://zone.gaospot.com/2016/03/30/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%95/)，上面有详细的说明。平台上面默认的防火墙是不允许修改规则的，所以要添加新的规则，需要新建防火墙。\n\n### Discuz!安装 ###\n1、下载Discuz，并解压。将upload 这个目录下面的所有文件拷贝到网站根目录，或者是其他二级目录也行。\n\n```bash\n# wget http://download.comsenz.com/DiscuzX/3.1/Discuz_X3.1_SC_UTF8.zip\n\n```\n\n2、文件成功解压到网站根目录后，通过在浏览器中运行安装向导来安装Discuz系统。然后一步步按提示向下安装。\n\n3、安装好后就可以在浏览器访问您的论坛了！\n\n参考：[Discuz!X3.1 全新安装图文教程 ](http://www.discuz.net/thread-3456887-1-1.html)\n\n### 应用测试 ###\n测试不是必要的过程，但为了更好的掌握应用的负载能力还是建议进行测试的，以对应用状况有比较好的了解。测试工具和测试方法网上有很多，可以自行Google，也可以参考上面一篇博客介绍的方法。最后说一点是没有完全正确的测试，测试只能模拟高并发是的情况，但与真实访问时候还是有差距的。\n\n\n","slug":"UCloud上LNMP小型网站搭建","published":1,"updated":"2016-04-02T10:49:01.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6z20014zskoao6ww9za"},{"title":"UCloud上LAMP小型网站搭建与测试","date":"2016-03-30T09:57:23.000Z","_content":"\n### 目录 ###\n 1. 介绍\n 2. LAMP环境搭建\n 3. 打开UCloud防火墙\n 4. WordPress安装\n 5. 应用测试\n \n### 介绍 ###\n本篇博客旨在通过介绍搭建一个WordPress博客的过程介绍在UCloud的云主机（UHOST）上搭建单机Web服务的过程。WordPress作为一个著名的CMS系统，有着广泛的应用。其作为博客也是非常常见的用法。所以这里使用WordPress作为示例软件来说明。在UHost上安装LAMP环境和在其他的linux下安装过程类似，但是要**注意UCloud平台提供的防火墙，记得开放相应端口**。\n\n\n\n### LAMP环境搭建 ###\n\n在UCloud上安装Linux主机，这里安装的是Centos6.5 x64系统。\n\n 1. 创建主机，根据您需要选择相应的机房，在相应的机房下创建主机。一开始只是测试用的话，可以选择按需付费，在决定使用后在改成月付或者年付，主机和网络的配置选默认配置。如下图所示：\n \n ![这里写图片描述](http://7xr7kh.com1.z0.glb.clouddn.com/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%951.png)\n \n \n 2. 是xshell登录管理云主机，xshell是一个ssh远程管理工具，针对个人用户是免费的。ssh工具还有其他的如，putty和secureCRT等，大家可以根据自己的需求和爱好选用。使用xshell的话，首先创建一个会话过程如下所示，在后面进行连接是，会提示保存证书，然后输入linux系统的账号和密码就可以连接到主机，然后通过ssh来管理主机了。\n ![这里写图片描述](http://7xr7kh.com1.z0.glb.clouddn.com/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%952.png)\n \n \n 3. 下面介绍安装AMP的过程，安装方法是通过在shell中执行下面的命令实现的。\n \n安装AMP\n``` shell\n# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n# yum install -y nginx mysql-server php php-gd php-xml php-mysql php-bcmath php-mbstring php-mcrypt\n```\n 修改PHP的时区\n``` shell\n# sed -i 's#;date.timezone =#date.timezone = Asia/Shanghai#' /etc/php.ini\n```\n配置Apache\n\n``` shell\n# rm -rf /etc/httpd/conf.d/README\n# rm -rf /etc/httpd/conf.d/welcome.conf\n# vim /etc/httpd/conf.d/vhost.conf\n添加如下内容：\n<VirtualHost *:80>\nServerName www.domain.com\nDocumentRoot /var/www/html/\n    ErrorLog /var/log/httpd/error.log\n    CustomLog /var/log/httpd/access.log common\n</VirtualHost>\n```\n启动Apache\n\n``` shell\n# service httpd restart\n# chkconfig httpd on\n# echo “<?php phpinfo();” > /var/www/html/phpinfo.php\n```\n打开浏览器，输入下面URL(记得解析DNS，或者修改hosts文件)\nhttp://www.domain.com/phpinfo.php\n\n启动MySQL\nMySQL默认有生成几个配置文件，可以根据自己的硬件情况把文件复制到/etc/my.cnf。当然也可以保留/etc/my.cnf，根据自己的需要进行配置。\n\n``` shell\n# ls /usr/share/mysql/*.cnf\n# service mysqld start\n# chkconfig mysqld on\n```\n\n### 打开UCloud防火墙 ###\nUCloud平台提供了一个防火墙，在控制台打开，初次使用的很容易忽略这个问题，导致业务无法再外网访问。基本的方法是创建一个新的防火墙，然后绑定到主机上。防火墙字网络UNET下，找到外网防火墙。点创建防火墙按钮，创建一个新的防火墙。\n![这里写图片描述](http://7xr7kh.com1.z0.glb.clouddn.com/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%953.png)\n\n创建防火墙规则\n![这里写图片描述](http://7xr7kh.com1.z0.glb.clouddn.com/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%954.png)\n\n在主机页面将新建的防火墙绑定到主机。\n![这里写图片描述](http://7xr7kh.com1.z0.glb.clouddn.com/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%955.png)\n\n\n### WordPress安装（[参考自WordPress官方文档](https://codex.wordpress.org/zh-cn:%E5%AE%89%E8%A3%85_WordPress)） ###\n\n1、下载并解压缩WordPress程序安装包。\n \n\n```shell\n# wget http://wordpress.org/latest.tar.gz\n# tar -xzvf latest.tar.gz\n```\n\n2、在你的网页服务器上为WordPress创建一个数据库, 并且也创建一个MySQL 拥有所有权限可以进入和修改的用户.\n\n```\n$ mysql -u adminusername -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 5340 to server version: 3.23.54\n \nType 'help;' or '\\h' for help. Type '\\c' to clear the buffer.\n \nmysql> CREATE DATABASE databasename;\nQuery OK, 1 row affected (0.00 sec)\n \nmysql> GRANT ALL PRIVILEGES ON databasename.* TO \"wordpressusername\"@\"hostname\"\n    -> IDENTIFIED BY \"password\";\nQuery OK, 0 rows affected (0.00 sec)\n  \nmysql> FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> EXIT\nBye\n$ \n```\n\n3、 重命名 wp-config-sample.php 文件为 wp-config.php.用你最喜欢的 文本编辑器 打开 wp-config.php ，填上你的数据库信息。\n \n\n```\n# mv wp-config-sample.php wp-config.php\n# vim wp-config.php\n```\n\n4、 把WordPress文件夹放在你服务器上想要放的地方:如果你想把通过顶级域名来访问你的WordPress博客 (例如 http://example.com/),移动或上传所有解压后的WordPress文件夹里面的文件(但不包括WordPress文件夹本身) 到你服务器的根目录下.\n\n5、 在你喜欢的浏览器中访问wp-admin/install.php 以便启动安装程序.如果你在根目录下安装WordPress,，你应该访问: http://example.com/wp-admin/install.php\n\n### Web性能测试 ###\nPS：网站性能压力测试是性能调优过程中必不可少的一环。只有让服务器处在高压情况下才能真正体现出各种设置所暴露的问题。Apache中有个自带的，名为ab的程序，可以对Apache或其它类型的服务器进行网站访问压力测试。\n\nApacheBench命令原理：\n\nab命令会创建很多的并发访问线程，模拟多个访问者同时对某一URL地址进行访问。它的测试目标是基于URL的，因此，既可以用来测试Apache的负载压力，也可以测试nginx、lighthttp、tomcat、IIS等其它Web服务器的压力。\n\nab命令对发出负载的计算机要求很低，既不会占用很高CPU，也不会占用很多内存，但却会给目标服务器造成巨大的负载，其原理类似CC攻击。自己测试使用也须注意，否则一次上太多的负载，可能造成目标服务器因资源耗完，严重时甚至导致死机。\n\nApacheBench用法详解：\n\n在Linux系统，一般安装好Apache后可以直接执行；\n\n```\n# ab -n 4000 -c 1000 http://www.ha97.com/\n```\n\n如果是Win系统下，打开cmd命令行窗口，cd到apache安装目录的bin目录下；\n\n-n后面的4000代表总共发出4000个请求；-c后面的1000表示采用1000个并发（模拟1000个人同时访问），后面的网址表示测试的目标URL。\n\n参考：[Web性能压力测试工具之ApacheBench（ab）详解](http://www.ha97.com/4617.html)","source":"_posts/UCloud上LAMP小型网站搭建与测试.md","raw":"---\ntitle: UCloud上LAMP小型网站搭建与测试\ndate: 2016-03-30 17:57:23\ntags: 系统运维\n---\n\n### 目录 ###\n 1. 介绍\n 2. LAMP环境搭建\n 3. 打开UCloud防火墙\n 4. WordPress安装\n 5. 应用测试\n \n### 介绍 ###\n本篇博客旨在通过介绍搭建一个WordPress博客的过程介绍在UCloud的云主机（UHOST）上搭建单机Web服务的过程。WordPress作为一个著名的CMS系统，有着广泛的应用。其作为博客也是非常常见的用法。所以这里使用WordPress作为示例软件来说明。在UHost上安装LAMP环境和在其他的linux下安装过程类似，但是要**注意UCloud平台提供的防火墙，记得开放相应端口**。\n\n\n\n### LAMP环境搭建 ###\n\n在UCloud上安装Linux主机，这里安装的是Centos6.5 x64系统。\n\n 1. 创建主机，根据您需要选择相应的机房，在相应的机房下创建主机。一开始只是测试用的话，可以选择按需付费，在决定使用后在改成月付或者年付，主机和网络的配置选默认配置。如下图所示：\n \n ![这里写图片描述](http://7xr7kh.com1.z0.glb.clouddn.com/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%951.png)\n \n \n 2. 是xshell登录管理云主机，xshell是一个ssh远程管理工具，针对个人用户是免费的。ssh工具还有其他的如，putty和secureCRT等，大家可以根据自己的需求和爱好选用。使用xshell的话，首先创建一个会话过程如下所示，在后面进行连接是，会提示保存证书，然后输入linux系统的账号和密码就可以连接到主机，然后通过ssh来管理主机了。\n ![这里写图片描述](http://7xr7kh.com1.z0.glb.clouddn.com/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%952.png)\n \n \n 3. 下面介绍安装AMP的过程，安装方法是通过在shell中执行下面的命令实现的。\n \n安装AMP\n``` shell\n# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n# yum install -y nginx mysql-server php php-gd php-xml php-mysql php-bcmath php-mbstring php-mcrypt\n```\n 修改PHP的时区\n``` shell\n# sed -i 's#;date.timezone =#date.timezone = Asia/Shanghai#' /etc/php.ini\n```\n配置Apache\n\n``` shell\n# rm -rf /etc/httpd/conf.d/README\n# rm -rf /etc/httpd/conf.d/welcome.conf\n# vim /etc/httpd/conf.d/vhost.conf\n添加如下内容：\n<VirtualHost *:80>\nServerName www.domain.com\nDocumentRoot /var/www/html/\n    ErrorLog /var/log/httpd/error.log\n    CustomLog /var/log/httpd/access.log common\n</VirtualHost>\n```\n启动Apache\n\n``` shell\n# service httpd restart\n# chkconfig httpd on\n# echo “<?php phpinfo();” > /var/www/html/phpinfo.php\n```\n打开浏览器，输入下面URL(记得解析DNS，或者修改hosts文件)\nhttp://www.domain.com/phpinfo.php\n\n启动MySQL\nMySQL默认有生成几个配置文件，可以根据自己的硬件情况把文件复制到/etc/my.cnf。当然也可以保留/etc/my.cnf，根据自己的需要进行配置。\n\n``` shell\n# ls /usr/share/mysql/*.cnf\n# service mysqld start\n# chkconfig mysqld on\n```\n\n### 打开UCloud防火墙 ###\nUCloud平台提供了一个防火墙，在控制台打开，初次使用的很容易忽略这个问题，导致业务无法再外网访问。基本的方法是创建一个新的防火墙，然后绑定到主机上。防火墙字网络UNET下，找到外网防火墙。点创建防火墙按钮，创建一个新的防火墙。\n![这里写图片描述](http://7xr7kh.com1.z0.glb.clouddn.com/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%953.png)\n\n创建防火墙规则\n![这里写图片描述](http://7xr7kh.com1.z0.glb.clouddn.com/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%954.png)\n\n在主机页面将新建的防火墙绑定到主机。\n![这里写图片描述](http://7xr7kh.com1.z0.glb.clouddn.com/UCloud%E4%B8%8ALAMP%E5%B0%8F%E5%9E%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%B5%8B%E8%AF%955.png)\n\n\n### WordPress安装（[参考自WordPress官方文档](https://codex.wordpress.org/zh-cn:%E5%AE%89%E8%A3%85_WordPress)） ###\n\n1、下载并解压缩WordPress程序安装包。\n \n\n```shell\n# wget http://wordpress.org/latest.tar.gz\n# tar -xzvf latest.tar.gz\n```\n\n2、在你的网页服务器上为WordPress创建一个数据库, 并且也创建一个MySQL 拥有所有权限可以进入和修改的用户.\n\n```\n$ mysql -u adminusername -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 5340 to server version: 3.23.54\n \nType 'help;' or '\\h' for help. Type '\\c' to clear the buffer.\n \nmysql> CREATE DATABASE databasename;\nQuery OK, 1 row affected (0.00 sec)\n \nmysql> GRANT ALL PRIVILEGES ON databasename.* TO \"wordpressusername\"@\"hostname\"\n    -> IDENTIFIED BY \"password\";\nQuery OK, 0 rows affected (0.00 sec)\n  \nmysql> FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> EXIT\nBye\n$ \n```\n\n3、 重命名 wp-config-sample.php 文件为 wp-config.php.用你最喜欢的 文本编辑器 打开 wp-config.php ，填上你的数据库信息。\n \n\n```\n# mv wp-config-sample.php wp-config.php\n# vim wp-config.php\n```\n\n4、 把WordPress文件夹放在你服务器上想要放的地方:如果你想把通过顶级域名来访问你的WordPress博客 (例如 http://example.com/),移动或上传所有解压后的WordPress文件夹里面的文件(但不包括WordPress文件夹本身) 到你服务器的根目录下.\n\n5、 在你喜欢的浏览器中访问wp-admin/install.php 以便启动安装程序.如果你在根目录下安装WordPress,，你应该访问: http://example.com/wp-admin/install.php\n\n### Web性能测试 ###\nPS：网站性能压力测试是性能调优过程中必不可少的一环。只有让服务器处在高压情况下才能真正体现出各种设置所暴露的问题。Apache中有个自带的，名为ab的程序，可以对Apache或其它类型的服务器进行网站访问压力测试。\n\nApacheBench命令原理：\n\nab命令会创建很多的并发访问线程，模拟多个访问者同时对某一URL地址进行访问。它的测试目标是基于URL的，因此，既可以用来测试Apache的负载压力，也可以测试nginx、lighthttp、tomcat、IIS等其它Web服务器的压力。\n\nab命令对发出负载的计算机要求很低，既不会占用很高CPU，也不会占用很多内存，但却会给目标服务器造成巨大的负载，其原理类似CC攻击。自己测试使用也须注意，否则一次上太多的负载，可能造成目标服务器因资源耗完，严重时甚至导致死机。\n\nApacheBench用法详解：\n\n在Linux系统，一般安装好Apache后可以直接执行；\n\n```\n# ab -n 4000 -c 1000 http://www.ha97.com/\n```\n\n如果是Win系统下，打开cmd命令行窗口，cd到apache安装目录的bin目录下；\n\n-n后面的4000代表总共发出4000个请求；-c后面的1000表示采用1000个并发（模拟1000个人同时访问），后面的网址表示测试的目标URL。\n\n参考：[Web性能压力测试工具之ApacheBench（ab）详解](http://www.ha97.com/4617.html)","slug":"UCloud上LAMP小型网站搭建与测试","published":1,"updated":"2016-05-30T15:30:45.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6z20016zsko9feq2zh0"},{"_content":"","source":"_posts/UCDN配置过程.md","raw":"","slug":"UCDN配置过程","published":1,"date":"2016-05-30T16:05:58.222Z","updated":"2016-05-30T16:05:45.777Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6z20018zskot43500f6"},{"title":"Redmine介绍","date":"2016-02-17T12:01:53.000Z","_content":"\n每天记Redmine是我现在的工作内容之一，之前一直没有深入的了解Redmine究竟是用来干嘛的的，直到最近看到有人分享了一篇[《最佳工程实践－基于Redmine的项目管理平台》](http://www.jianshu.com/p/cd7a12fa09bb)的文章，于是对Redmine这个东西又起了一些兴趣。\n\n> Redmine是一个基于web免费且开源的项目管理和问题追踪工具。它一些用户管理多个项目已经和他相关的子项目。它的特点包括每一个项目的wikis和论坛，时间追踪，和灵活的基于角色的访问控制。它包括日历和甘特图去对项目和他们的期限提供可视化视角。Redmine正好了多种版本控制系统并且包括了一个库浏览工具和diff查看器。——引用自Wikipedia\n\n通过《最佳工程实践－基于Redmine的项目管理平台》这篇文章，认识了一个叫做[bitnami](https://bitnami.com/stack/redmine) 的。这上面提供了一个安装Redmine的集成环境，并且还提供了已经安装好Redmine的VMware镜像。不知道什么时候会不会提供docker镜像：）。\n\nbitnami上提供了Redmine试用，bitnami会自动在aws上安装好Redmine，然后会提供给你一个连接，直接使用就可以了。如果想自己安装Redmine可以安装bitnami官方提供的教程。\n\n\n安装过程\n----\n\n下载Redmine安装包\n\n```bash\nwget https://downloads.bitnami.com/files/stacks/redmine/3.2.0-2/bitnami-redmine-3.2.0-2-linux-x64-installer.run\n\nchmod u+x bitnami-redmine-3.2.0-2-linux-x64-installer.run\n\n./bitnami-redmine-3.2.0-2-linux-x64-installer.run\n\n```\n\n依照上面的步骤一步一步下来就可以安装Redmine了。安装完之后可以安装插件，更新数据。也可以直接访问。\n\n访问\n--\n\n在服务器本地可以在http://127.0.0.1:80访问，如果是在公网环境下可以通过服务器的公网ip访问。","source":"_posts/Redmine介绍.md","raw":"---\ntitle: Redmine介绍\ndate: 2016-02-17 20:01:53\ntags: 系统运维\n---\n\n每天记Redmine是我现在的工作内容之一，之前一直没有深入的了解Redmine究竟是用来干嘛的的，直到最近看到有人分享了一篇[《最佳工程实践－基于Redmine的项目管理平台》](http://www.jianshu.com/p/cd7a12fa09bb)的文章，于是对Redmine这个东西又起了一些兴趣。\n\n> Redmine是一个基于web免费且开源的项目管理和问题追踪工具。它一些用户管理多个项目已经和他相关的子项目。它的特点包括每一个项目的wikis和论坛，时间追踪，和灵活的基于角色的访问控制。它包括日历和甘特图去对项目和他们的期限提供可视化视角。Redmine正好了多种版本控制系统并且包括了一个库浏览工具和diff查看器。——引用自Wikipedia\n\n通过《最佳工程实践－基于Redmine的项目管理平台》这篇文章，认识了一个叫做[bitnami](https://bitnami.com/stack/redmine) 的。这上面提供了一个安装Redmine的集成环境，并且还提供了已经安装好Redmine的VMware镜像。不知道什么时候会不会提供docker镜像：）。\n\nbitnami上提供了Redmine试用，bitnami会自动在aws上安装好Redmine，然后会提供给你一个连接，直接使用就可以了。如果想自己安装Redmine可以安装bitnami官方提供的教程。\n\n\n安装过程\n----\n\n下载Redmine安装包\n\n```bash\nwget https://downloads.bitnami.com/files/stacks/redmine/3.2.0-2/bitnami-redmine-3.2.0-2-linux-x64-installer.run\n\nchmod u+x bitnami-redmine-3.2.0-2-linux-x64-installer.run\n\n./bitnami-redmine-3.2.0-2-linux-x64-installer.run\n\n```\n\n依照上面的步骤一步一步下来就可以安装Redmine了。安装完之后可以安装插件，更新数据。也可以直接访问。\n\n访问\n--\n\n在服务器本地可以在http://127.0.0.1:80访问，如果是在公网环境下可以通过服务器的公网ip访问。","slug":"Redmine介绍","published":1,"updated":"2016-03-31T15:38:21.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6z20019zskozzx3mhcp"},{"title":"Mysql问题分析工具","date":"2016-05-19T08:55:00.000Z","_content":"\n### 常用工具 ###\ntop、iostat查看CPU/IO情况\n慢查询日志+explain\n获取数据库的各种运行状态，如”show  engine innodb status”， 查询information_schema库里的INNODB_TRX、PROCESSLIST等状态表\ntcpdump\nstrace\n\n```\n# top -d0.5 -c\n```\n\n以0.5秒频率刷新，查看mysql的CPU使用情况，主要是看下cpu占用率。\n\n```\n# iostat -txm 1\n```\n\n观察磁盘使用情况，util使用率越高，表示磁盘越繁忙\n\n### 慢查询 ###\n慢查询日志slowlog，使用mysqldumpslow可以统计分析出最消耗时间的TopN。\n得到具体语句后，使用explain进行分析，进而得到优化方法。\n\n### 数据库状态 ###\n查看所有连接的运行情况\n\n```\nmysql> show full processlist; \n```\n\n或者\n\n```\nmysql> select * from information_schema.processlist;\n```\n\n查看innodb的实时状态，关注cache命中率、读写次数、有无死锁等\n\n```\nmysql> show  engine innodb status \\G  \n```\n\n查看事务运行情况\n\n```\nmysql> select * from information_schema.innodb_trx;\n```\n\n### 网络及系统分析 ###\ntcpdump —— 抓取相关网络包\n例如：\n\n```\n# tcpdump host 10.4.12.8 and port 3306 -i eth0 -w 10.4.12.8.pcap\n```\n\nstrace —— 查看进程的系统调用\n例如：\n\n```\n# strace -p 12345    # 12345为目标进程pid\n```\n\n","source":"_posts/Mysql问题分析工具.md","raw":"---\ntitle: Mysql问题分析工具\ndate: 2016-5-19 16:55\ntags: 数据库管理\n---\n\n### 常用工具 ###\ntop、iostat查看CPU/IO情况\n慢查询日志+explain\n获取数据库的各种运行状态，如”show  engine innodb status”， 查询information_schema库里的INNODB_TRX、PROCESSLIST等状态表\ntcpdump\nstrace\n\n```\n# top -d0.5 -c\n```\n\n以0.5秒频率刷新，查看mysql的CPU使用情况，主要是看下cpu占用率。\n\n```\n# iostat -txm 1\n```\n\n观察磁盘使用情况，util使用率越高，表示磁盘越繁忙\n\n### 慢查询 ###\n慢查询日志slowlog，使用mysqldumpslow可以统计分析出最消耗时间的TopN。\n得到具体语句后，使用explain进行分析，进而得到优化方法。\n\n### 数据库状态 ###\n查看所有连接的运行情况\n\n```\nmysql> show full processlist; \n```\n\n或者\n\n```\nmysql> select * from information_schema.processlist;\n```\n\n查看innodb的实时状态，关注cache命中率、读写次数、有无死锁等\n\n```\nmysql> show  engine innodb status \\G  \n```\n\n查看事务运行情况\n\n```\nmysql> select * from information_schema.innodb_trx;\n```\n\n### 网络及系统分析 ###\ntcpdump —— 抓取相关网络包\n例如：\n\n```\n# tcpdump host 10.4.12.8 and port 3306 -i eth0 -w 10.4.12.8.pcap\n```\n\nstrace —— 查看进程的系统调用\n例如：\n\n```\n# strace -p 12345    # 12345为目标进程pid\n```\n\n","slug":"Mysql问题分析工具","published":1,"updated":"2016-05-19T08:56:24.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6z2001bzsko7g58ctig"},{"title":"Mysql慢查询分析与优化","date":"2016-05-18T10:57:00.000Z","_content":"\n### 概述（慢查询定义与危害） ###\n慢查询——顾名思义，耗时很长、响应很慢的查询\n\n危害——\n导致整个数据库响应变慢（过多消耗cpu或者io）\n短连接场景下还可能引起耗尽连接数\n\n\n### 慢查询日志相关参数（开启慢查询） ###\n以下参数均是是在Mysql的配置文件/etc/my.cnf中配置的，配置在[mysqld]下。\n\n参数名            |   \t含义\n---------------|------------------\nslow_query_log\t| 是否开启慢查询\nlong_query_time\t| 查询消耗超过多少时间认为是慢查询，单位秒\nlog_output\t|   日志的输出形式(FILE或者TABLE)\nslow-query-log-file |\t慢查询的保存文件\nlog-queries-not-using-indexes\t      |   记录没有使用索引的查询\n\n示例参数配置\n\n```\n# 慢查询相关\nslow_query_log = 1\nlong_query_time = 1\n\n# 日志的输出形式\nlog_output = FILE\nslow-query-log-file = /var/log/mysql/mysql-slow.log\n\n```\n\n修改参数之后记得重启mysqld服务，可以在mysql命令行验证修改是否生效。命令如下：\n\n```\nmysql> show global variables like 'slow%' ;\nmysql> show global variables like 'long%' ;\nmysql> show global variables like 'log%' ;\n```\n\n经过上面的配置mysql的慢日志就打开了，然后mysql就会记录各条查询相关信息了，下面是一个人为构造的演示例子。\n\n### 演示例子（自造慢查询：） ###\n下面是用来新建测试用的表和查询语句的sql命令。\n```\nmysql> use test;\nmysql> create table b (id int not null primary key, name varchar(100) not null);\nmysql> select sleep(1);\nmysql> select * from b where name = 'a';\nmysql> select * from b where name = 'b';\nmysql> select * from b where name = 'c';\n```\n\n我们可以直接看下mysql-slow.log中的内容，cat或vim都行，只是看一眼：）\n\n```\n# cat /var/log/mysql/mysql-slow.log\n```\n下面是文件中个参数意义的介绍：\n\nQuerytime: sql的请求执行时间\nLocktime: sql 等锁的时间\nRows_examined: sql处理过程中扫描的行数；通常，该值越大，对cpu/io消耗也就越大\n\n### 慢查询分析 ###\n首先是慢查询分析工具——mysqldumpslow，示例用法如下：\n\n```\n# mysqldumpslow -t 10 -s t /path/to/slow.log\n```\n参数说明：\n1. -t：返回前面多少条的数据，即top几；\n2. -s：排序方式。c , t , l , r 分别表示记录次数、时间、查询时间的多少、返回的记录数排序；ac , at , al , ar 表示相应的倒叙；\n\nTABLE类型慢日志处理\n直接做工具处理相对比较麻烦，但我们可以变相处理。\n处理思路：\n1. 将mysql.slow_log表的数据转成日志文件形式\n2. 然后再用mysqldumpslow进行分析\n\n这里提供一个工具(python脚本，需要先安装MySQL-python依赖库)，可以将mysql.slow_log表导出成日志格式\nhttps://gist.github.com/sennajox/fdff82cc02b161d0141d\n\n例如，要列出2016-5-1至2016-5-18期间的慢查询\n\n```\n# python slow_log_dump.py 10.6.29.129 3306 root 123456 '2016-5-1' '2016-5-18'\n```\n### 优化分析 ###\n记录slowlog仅仅是第一步，更重要的是找到慢查询的根源。\n而这里，我们可以利用explain命令，对慢查询sql执行explain得到对应的执行计划进行分析，从而确定如何优化。\n\n```\nmysql> explain select * from b where name = 'a';\n```\n各个参数说明\n关键列名\t     |          含义\n------------------| -------------------\ntype          |\t使用了什么查询方式，由好到差，依次为const > eq_ref > ref > range > index > ALL注意: index表示遍历索引；而ref表示使用非唯一的索引\nkey\t             |   最终使用到的索引\nref\t    |      使用了索引的那一列，可能为列名或者const\nrows  |   \t扫描的行数\nextra\t|  附加信息，比如”Using Where”、“Using Index”、“Using filesort”、“Using temporary”\n\n![explain示例1](http://7xr7kh.com1.z0.glb.clouddn.com/mysql%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%901.png)\n\n\n![explain示例2](http://7xr7kh.com1.z0.glb.clouddn.com/mysql%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%902.png)\n\n### 优化要点 ###\n\n1.严禁在MySQL执行复杂的计算，以免过多消耗CPU，把复杂的事情交给程序处理\n\n2.尽可能少用关联查询，如果不得不使用，最好不超过2个表，以免笛卡尔积过大，一方面增加读取磁盘几率，一方面有可能生成文件临时表，极大影响IO\n\n3.适当的使用索引，且仅对离散程度比较高的列使用，让索引的效果可以最大化；索引是牺牲了写性能来换取读性能，因此也不能过多\n\n4.控制单表的数据量，多作分库分表\n\n","source":"_posts/Mysql慢查询分析与优化.md","raw":"---\ntitle:  Mysql慢查询分析与优化\ndate: 2016-5-18 18:57\ntags: 数据库管理\n---\n\n### 概述（慢查询定义与危害） ###\n慢查询——顾名思义，耗时很长、响应很慢的查询\n\n危害——\n导致整个数据库响应变慢（过多消耗cpu或者io）\n短连接场景下还可能引起耗尽连接数\n\n\n### 慢查询日志相关参数（开启慢查询） ###\n以下参数均是是在Mysql的配置文件/etc/my.cnf中配置的，配置在[mysqld]下。\n\n参数名            |   \t含义\n---------------|------------------\nslow_query_log\t| 是否开启慢查询\nlong_query_time\t| 查询消耗超过多少时间认为是慢查询，单位秒\nlog_output\t|   日志的输出形式(FILE或者TABLE)\nslow-query-log-file |\t慢查询的保存文件\nlog-queries-not-using-indexes\t      |   记录没有使用索引的查询\n\n示例参数配置\n\n```\n# 慢查询相关\nslow_query_log = 1\nlong_query_time = 1\n\n# 日志的输出形式\nlog_output = FILE\nslow-query-log-file = /var/log/mysql/mysql-slow.log\n\n```\n\n修改参数之后记得重启mysqld服务，可以在mysql命令行验证修改是否生效。命令如下：\n\n```\nmysql> show global variables like 'slow%' ;\nmysql> show global variables like 'long%' ;\nmysql> show global variables like 'log%' ;\n```\n\n经过上面的配置mysql的慢日志就打开了，然后mysql就会记录各条查询相关信息了，下面是一个人为构造的演示例子。\n\n### 演示例子（自造慢查询：） ###\n下面是用来新建测试用的表和查询语句的sql命令。\n```\nmysql> use test;\nmysql> create table b (id int not null primary key, name varchar(100) not null);\nmysql> select sleep(1);\nmysql> select * from b where name = 'a';\nmysql> select * from b where name = 'b';\nmysql> select * from b where name = 'c';\n```\n\n我们可以直接看下mysql-slow.log中的内容，cat或vim都行，只是看一眼：）\n\n```\n# cat /var/log/mysql/mysql-slow.log\n```\n下面是文件中个参数意义的介绍：\n\nQuerytime: sql的请求执行时间\nLocktime: sql 等锁的时间\nRows_examined: sql处理过程中扫描的行数；通常，该值越大，对cpu/io消耗也就越大\n\n### 慢查询分析 ###\n首先是慢查询分析工具——mysqldumpslow，示例用法如下：\n\n```\n# mysqldumpslow -t 10 -s t /path/to/slow.log\n```\n参数说明：\n1. -t：返回前面多少条的数据，即top几；\n2. -s：排序方式。c , t , l , r 分别表示记录次数、时间、查询时间的多少、返回的记录数排序；ac , at , al , ar 表示相应的倒叙；\n\nTABLE类型慢日志处理\n直接做工具处理相对比较麻烦，但我们可以变相处理。\n处理思路：\n1. 将mysql.slow_log表的数据转成日志文件形式\n2. 然后再用mysqldumpslow进行分析\n\n这里提供一个工具(python脚本，需要先安装MySQL-python依赖库)，可以将mysql.slow_log表导出成日志格式\nhttps://gist.github.com/sennajox/fdff82cc02b161d0141d\n\n例如，要列出2016-5-1至2016-5-18期间的慢查询\n\n```\n# python slow_log_dump.py 10.6.29.129 3306 root 123456 '2016-5-1' '2016-5-18'\n```\n### 优化分析 ###\n记录slowlog仅仅是第一步，更重要的是找到慢查询的根源。\n而这里，我们可以利用explain命令，对慢查询sql执行explain得到对应的执行计划进行分析，从而确定如何优化。\n\n```\nmysql> explain select * from b where name = 'a';\n```\n各个参数说明\n关键列名\t     |          含义\n------------------| -------------------\ntype          |\t使用了什么查询方式，由好到差，依次为const > eq_ref > ref > range > index > ALL注意: index表示遍历索引；而ref表示使用非唯一的索引\nkey\t             |   最终使用到的索引\nref\t    |      使用了索引的那一列，可能为列名或者const\nrows  |   \t扫描的行数\nextra\t|  附加信息，比如”Using Where”、“Using Index”、“Using filesort”、“Using temporary”\n\n![explain示例1](http://7xr7kh.com1.z0.glb.clouddn.com/mysql%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%901.png)\n\n\n![explain示例2](http://7xr7kh.com1.z0.glb.clouddn.com/mysql%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%902.png)\n\n### 优化要点 ###\n\n1.严禁在MySQL执行复杂的计算，以免过多消耗CPU，把复杂的事情交给程序处理\n\n2.尽可能少用关联查询，如果不得不使用，最好不超过2个表，以免笛卡尔积过大，一方面增加读取磁盘几率，一方面有可能生成文件临时表，极大影响IO\n\n3.适当的使用索引，且仅对离散程度比较高的列使用，让索引的效果可以最大化；索引是牺牲了写性能来换取读性能，因此也不能过多\n\n4.控制单表的数据量，多作分库分表\n\n","slug":"Mysql慢查询分析与优化","published":1,"updated":"2016-05-18T10:57:16.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6z2001ezsko5eqg3luh"},{"title":"Mysql常见问题排查","date":"2016-05-04T03:35:00.000Z","_content":"\n解决UDB主从同步不一致\n1、: \"开启super权限：update mysql.user set super_priv = 'Y' where user = 'root'; flush privileges;\", \n2、: \"停止slave: stop slave;\", \n3、: \"设置跳过slave同步语句数： set global sql_slave_skip_counter = 1;\", \n4、: \"启动slave： start slave;\", \n5、: \"确认同步是否正确： show slave status G 确认\", \n6、: \"若同步还是出错重复第2-5步，若同步正确则结束\"\n\n\n数据库上可以在哪里查询最近执行较慢的sql？\n\n1、可以通过这个命令查看：select * from mysql.slow_log where start_time >= 'xxxx-xx-xx';\n2、如何查看MySQL数据库的死锁信息\n3、服务器运行一天后，就开始频繁报错：Deadlock found when trying to get to lock; try restarting transaction.\n4、使用终端或命令提示符登录到MySQL，输入命令：mysql -h xxxx.xxx.xxx -P 3306 -u username -p password\n5、在MySQL客户端下输入命令：show engine innodb status \\G;\n6、在打印出来的信息中找到“LATEST DETECTED DEADLOCK”一节内容\n7、分析其中的内容，我们就可以知道最近导致死锁的事务有哪些.\n\n\nMysql 5.6内存问题\n\nmysql5.6版本的，内存少于3G的，内存使用率100%一般是正常情况，可以尝试设置performance_schema=0，重启\n原因：\n5.6版本本来就比较消耗内存，用户的内存配置又低，可以尝试修改performance_schema=0，并降低缓冲池大小，或建议用户增大内存。\n5.6的启动内存大约就需要500M，缓冲区内存900M，当缓冲区填满以后内存就肯定在100%了，并且不会再下降 以后如果是mysql5.6，如果它的总内存在2G以内的，数据量超过900M的，都会引起内存使用超过100%并且不会再下降的情况。\n\n如果是这样，可以：1 减少缓冲池大小 2 禁用performance_schema=0 3 增大内存  \n\n三种方法 2-3G的内存一般会遇到\n","source":"_posts/Mysql常见问题排错.md","raw":"---\ntitle:  Mysql常见问题排查\ndate: 2016-5-4 11:35\ntags: 数据库管理\n---\n\n解决UDB主从同步不一致\n1、: \"开启super权限：update mysql.user set super_priv = 'Y' where user = 'root'; flush privileges;\", \n2、: \"停止slave: stop slave;\", \n3、: \"设置跳过slave同步语句数： set global sql_slave_skip_counter = 1;\", \n4、: \"启动slave： start slave;\", \n5、: \"确认同步是否正确： show slave status G 确认\", \n6、: \"若同步还是出错重复第2-5步，若同步正确则结束\"\n\n\n数据库上可以在哪里查询最近执行较慢的sql？\n\n1、可以通过这个命令查看：select * from mysql.slow_log where start_time >= 'xxxx-xx-xx';\n2、如何查看MySQL数据库的死锁信息\n3、服务器运行一天后，就开始频繁报错：Deadlock found when trying to get to lock; try restarting transaction.\n4、使用终端或命令提示符登录到MySQL，输入命令：mysql -h xxxx.xxx.xxx -P 3306 -u username -p password\n5、在MySQL客户端下输入命令：show engine innodb status \\G;\n6、在打印出来的信息中找到“LATEST DETECTED DEADLOCK”一节内容\n7、分析其中的内容，我们就可以知道最近导致死锁的事务有哪些.\n\n\nMysql 5.6内存问题\n\nmysql5.6版本的，内存少于3G的，内存使用率100%一般是正常情况，可以尝试设置performance_schema=0，重启\n原因：\n5.6版本本来就比较消耗内存，用户的内存配置又低，可以尝试修改performance_schema=0，并降低缓冲池大小，或建议用户增大内存。\n5.6的启动内存大约就需要500M，缓冲区内存900M，当缓冲区填满以后内存就肯定在100%了，并且不会再下降 以后如果是mysql5.6，如果它的总内存在2G以内的，数据量超过900M的，都会引起内存使用超过100%并且不会再下降的情况。\n\n如果是这样，可以：1 减少缓冲池大小 2 禁用performance_schema=0 3 增大内存  \n\n三种方法 2-3G的内存一般会遇到\n","slug":"Mysql常见问题排错","published":1,"updated":"2016-05-04T03:40:12.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6zk001gzskoyf9yub1n"},{"title":"Mysql备份与恢复","date":"2016-05-21T03:35:00.000Z","_content":"\n### 概述 ###\n这里主要介绍通过mysqldump来导出数据和通过binlog导入数据的Mysql导入导出问题。\n\n### 备份 ###\n常用工具：mysqldump,  xtrabackup\n\nmysqldump: 原生数据导出工具，以sql的形式导出保存\nxtrabackup: percona团队提供的备份工具，基于文件系统的备份\n\n#### 备份全库——最简单版本 ####\n\n```\nmysqldump -h10.6.29.129 -uroot -p --all-databases > 10.6.29.129.sql\n```\nmysqldump是直接屏幕输出，所以重定向后即可得到对应的备份文件。\n1. 这个备份命令很简单，但存在问题：\n2. 会锁全库，影响业务\n3. 有可能缺失常规表以外的内容，如存储过程\n4. 未记录binlog同步点，不能用于主从同步以及利用binlog增量恢复\n对于数据集较大的表，可能会吃掉server端大量内存\n\n#### 备份全库——进阶版 ####\n\n```\nmysqldump -h10.6.29.129 -uroot -p --all-databases --master-data=2 --routines --events --quick --single-transaction > 10.6.29.129.sql\n```\n\n- --master-data=2 表示需要记录导出数据当时主库的binlog位置\n- --routines 表示导出存储过程（可视实际库表决定是否使用）\n- --events 表示导出事件（可根据实际库表决定是否使用）\n- --quick 表示让服务端不将结果集一次发送，而是分批发送，可减轻压力。另外，加上--master-data后默认是锁库的，可确保数据一致性，即导出数据和binlog位置的一致。\n- --single-transaction 取消锁库并利用Innodb事务特性确保数据一致，但对MyISAM引擎不能确保一致性(即备份期间的写入，仍有可能被导出到备份文件中)\n\n#### 备份部分database ####\n\n```\nmysqldump -h10.6.29.129 -uroot -p --master-data=2 --routines –events --quick --single-transaction --databases db1 db2 db3 > 10.6.29.129.sql\n```\n\n(将需要导出的库名，依次填写在databases参数后)\n\n#### 备份指定database的部分表 ####\n\n```\nmysqldump -h10.6.29.129 -uroot –p --master-data=2 --routines –events --quick --single-transaction mydb table1 table2 > 10.6.29.129.sql\n```\n\n(先写明指定的database，然后紧跟需要备份的表名)\n\n### 数据恢复 ###\n直接利用mysqlclient以及冷备文件进行导入\n\n```\nmysql -h10.6.29.129 -uroot -p < 10.6.29.129.sql\n```\n（简单易行，但要确保导入的库表，不会同时有业务在写入）\n\n#### 借助binlog恢复数据库 ####\n在冷备数据的基础上，借助binlog可以恢复到冷备时间点至最新binlog之间的任意时刻。\n![利用binlog恢复到任意时间点](http://7xr7kh.com1.z0.glb.clouddn.com/binlog%E6%81%A2%E5%A4%8D.png)\n\n首先由于binlog二进制文件，要使用binlog必须先对binlog进行解析，解析的工具就是mysqlbinlog。\n使用mysqlbinlog工具，对binlog文件进行解析\n简单用法——\n\n```\nmysqlbinlog mysql.000004 > binlog.000004\n```\n使用mysqlbinlog工具，对binlog文件进行解析\n进阶用法——\n\n```\nmysqlbinlog mysql.000004 --start-position=549212174 --stop-datetime='2014-9-10 10:00' > binlog.000004.sql\n```\n--start-position 表示从binlog的那个位置开始解析，而这个起始点可以通过备份时的master-data参数得到\n--stop-datetime 表示只解析到哪个时间点的语句为止，可用于回档到某个指定时间点\n\n--start-datetime 从那个时间点开始，但通常还是尽量使用start-position，更为准确\n--verbose, -v 使用方式：-vv, -vvv，常用于ROW模式的详细输出\n\n恢复的具体操作方法，就是先通过冷备份将数据库还原到备份点，然后在通过binlog生成从冷备点恢复的sql。分别执行下两个sql文件就可以了。\n","source":"_posts/Mysql备份与恢复.md","raw":"---\ntitle:  Mysql备份与恢复\ndate: 2016-5-21 11:35\ntags: 数据库管理\n---\n\n### 概述 ###\n这里主要介绍通过mysqldump来导出数据和通过binlog导入数据的Mysql导入导出问题。\n\n### 备份 ###\n常用工具：mysqldump,  xtrabackup\n\nmysqldump: 原生数据导出工具，以sql的形式导出保存\nxtrabackup: percona团队提供的备份工具，基于文件系统的备份\n\n#### 备份全库——最简单版本 ####\n\n```\nmysqldump -h10.6.29.129 -uroot -p --all-databases > 10.6.29.129.sql\n```\nmysqldump是直接屏幕输出，所以重定向后即可得到对应的备份文件。\n1. 这个备份命令很简单，但存在问题：\n2. 会锁全库，影响业务\n3. 有可能缺失常规表以外的内容，如存储过程\n4. 未记录binlog同步点，不能用于主从同步以及利用binlog增量恢复\n对于数据集较大的表，可能会吃掉server端大量内存\n\n#### 备份全库——进阶版 ####\n\n```\nmysqldump -h10.6.29.129 -uroot -p --all-databases --master-data=2 --routines --events --quick --single-transaction > 10.6.29.129.sql\n```\n\n- --master-data=2 表示需要记录导出数据当时主库的binlog位置\n- --routines 表示导出存储过程（可视实际库表决定是否使用）\n- --events 表示导出事件（可根据实际库表决定是否使用）\n- --quick 表示让服务端不将结果集一次发送，而是分批发送，可减轻压力。另外，加上--master-data后默认是锁库的，可确保数据一致性，即导出数据和binlog位置的一致。\n- --single-transaction 取消锁库并利用Innodb事务特性确保数据一致，但对MyISAM引擎不能确保一致性(即备份期间的写入，仍有可能被导出到备份文件中)\n\n#### 备份部分database ####\n\n```\nmysqldump -h10.6.29.129 -uroot -p --master-data=2 --routines –events --quick --single-transaction --databases db1 db2 db3 > 10.6.29.129.sql\n```\n\n(将需要导出的库名，依次填写在databases参数后)\n\n#### 备份指定database的部分表 ####\n\n```\nmysqldump -h10.6.29.129 -uroot –p --master-data=2 --routines –events --quick --single-transaction mydb table1 table2 > 10.6.29.129.sql\n```\n\n(先写明指定的database，然后紧跟需要备份的表名)\n\n### 数据恢复 ###\n直接利用mysqlclient以及冷备文件进行导入\n\n```\nmysql -h10.6.29.129 -uroot -p < 10.6.29.129.sql\n```\n（简单易行，但要确保导入的库表，不会同时有业务在写入）\n\n#### 借助binlog恢复数据库 ####\n在冷备数据的基础上，借助binlog可以恢复到冷备时间点至最新binlog之间的任意时刻。\n![利用binlog恢复到任意时间点](http://7xr7kh.com1.z0.glb.clouddn.com/binlog%E6%81%A2%E5%A4%8D.png)\n\n首先由于binlog二进制文件，要使用binlog必须先对binlog进行解析，解析的工具就是mysqlbinlog。\n使用mysqlbinlog工具，对binlog文件进行解析\n简单用法——\n\n```\nmysqlbinlog mysql.000004 > binlog.000004\n```\n使用mysqlbinlog工具，对binlog文件进行解析\n进阶用法——\n\n```\nmysqlbinlog mysql.000004 --start-position=549212174 --stop-datetime='2014-9-10 10:00' > binlog.000004.sql\n```\n--start-position 表示从binlog的那个位置开始解析，而这个起始点可以通过备份时的master-data参数得到\n--stop-datetime 表示只解析到哪个时间点的语句为止，可用于回档到某个指定时间点\n\n--start-datetime 从那个时间点开始，但通常还是尽量使用start-position，更为准确\n--verbose, -v 使用方式：-vv, -vvv，常用于ROW模式的详细输出\n\n恢复的具体操作方法，就是先通过冷备份将数据库还原到备份点，然后在通过binlog生成从冷备点恢复的sql。分别执行下两个sql文件就可以了。\n","slug":"Mysql备份与恢复","published":1,"updated":"2016-05-21T04:57:00.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6zn001izskoltfs1z02"},{"title":"Mysql初始安装与配置","date":"2016-05-17T14:10:00.000Z","_content":"\n\n\n### 概述 ###\n这里是同事分享的mysql课程的笔记，中间加入了一些自己网上找来的东西，按照自己的想法弄了这篇博客。\n\n### 环境 ###\n系统环境：centos6.5 ``` cat /etc/centos-relese```\n数据库版本：mysql5.5(通过remi源安装）\n\n### 安装 ###\nCentOS6.5(试验环境）\n```\nyum install mysql-server --enablerepo=remi\n```\nUbuntu（默认版本为5.5)\n```\napt-get install mysql-server\n```\n源码安装\n官方下载链接\nhttp://dev.mysql.com/downloads/mysql/5.5.html#downloads\n```\n./configure  #进入到下载的源文件中，首先要解压缩\nmake && make install\n```\n\n### 修改配置文件 ###\n默认的配置文件位置在/etc/my.cnf，默认配置文件过于简单在实际使用中先对其进行一定的修改。\n参数名                 | 含义\n--------            | ---\nbind-address               |\t 监听ip\nport\t                            |  监听端口\ncharacter_set_server\t| 默认字符集(建议utf8)\nmax_connect_errors\t| 最大允许错误次数(并非指密码错误，而是访问协议不正确之类的，如果某个IP错误次数达到该阈值，则被屏蔽)\nmax_connections\t       | 最大连接数(能同时访问server的连接个数，如果达到该阈值，则不能再连接到server)\ndatadir\t          | 数据保存目录\nlog-error\t\t| \t错误日志保存路径\nskip_name_resolve         |\t跳过域名解析(可加快client连接速度)\nback_log            |\t创建TCP连接时，允许的最大同时未完成的连接个数(主要适用于短连接场景)\nlog-bin\t             | Binlog的保存路径\nbinlog-format\t      |Binlog写入格式，共有ROW/STATEMENT/MIXED三种可选。一般使用MIXED。\nexpire_logs_days\t    |Binlog保留时间(单位:天)\n\n\n这里采用的配置文件（在mysqld下添加如下内容）\n```\nbind-address = 10.19.96.184\nport = 3306\ncharacter_set_server = utf8\nmax_connect_errors = 1000000\nmax_connections = 500\ndatadir = /data/mysql\nlog-error = /var/log/mysql/mysql-error.log\nskip_name_resolve\nback_log = 2000\nlog-bin = /data/mysql\nbinlog-format = MIXED\nexpire_logs_days = 3\n\n```\n如果datadir/log-error/log-bin等对应目录需要确保已创建，并且权限为mysql所有。例如，\n```\nmkdir -p /data/mysql && chown -R mysql.mysql /data/mysql\nmkdir -p /var/log/mysql && chown -R mysql.mysql /var/log/mysql\n```\n配置完成，启动mysql: \n```\n/etc/init.d/mysqld start\n或者\nservice mysqld start\n```\n\n### 权限设置 ###\n执行select * from mysql.user; 可以查看到当前的所有用户。\n\n结果集中的几个关键字段：\nHost——对应的允许访问域(%表示全域，192.168.%.%表示对应账号对该段均可访问，192.168.8.100表示对应账号仅这台机器可访问)\nUser——用户名\nPassword——密码加密串\nxxx_priv——各种权限\n\n\n用户权限管理\n``` bash\nmysql -u root -p # 1、以管理员身份登录mysql\n\nuse mysql # 2、选择mysql数据库\n\ncreate user 'testuser'@'localhost' identified by 'testpassword' #3、创建用户并设定密码\n\nflush privileges #4、使操作生效\n\ncreate database testdb #5、为用户创建数据库\n\ngrant all privileges on testdb.* to test@localhost identified  by '1234' #6、为用户赋予操作数据库testdb的所有权限\n\nflush privileges #7、使操作生效\n\nmysql -u test -p #8、用新用户登录\n```\n\n如果当前账号拥有所有权限，可用最简单的新增用户并授权：\n\n``` grant all on *.* to `root`@`%` identified by '123456' with grant option; ```\n\n其中with grant option表示新增的该账号是否有grant权限，即是否可以通过其创建新账号。\n非常不建议给用户开放全部权限，最好给新用户仅开放所需要的相关权限\n\n\n### 导入测试用数据库 ###\n```bash\nwget https://launchpadlibrarian.net/24493586/employees_db-full-1.0.6.tar.bz2\n\ntar -xjf employees_db-full-1.0.6.tar.bz2 \n\ncd employees_db\n\nmysql -u root -p < employees.sql\n\n```\n\n### 练习 ### \n设置权限, 要求如下：\n1. root账号仅能从本地以及特定机器访问\n2. 创建一个test账号，允许所有机器访问\n\n\n```mysql> grant all on *.* to `root`@`localhost` identified by '123456' with grant option; ```\n\n\n```mysql> grant all on *.* to `test`@`%` identified by '123456' with grant option; ```\n","source":"_posts/Mysql初始安装及配置.md","raw":"---\ntitle:  Mysql初始安装与配置\ndate: 2016-05-17 22:10\ntags: 数据库管理\n---\n\n\n\n### 概述 ###\n这里是同事分享的mysql课程的笔记，中间加入了一些自己网上找来的东西，按照自己的想法弄了这篇博客。\n\n### 环境 ###\n系统环境：centos6.5 ``` cat /etc/centos-relese```\n数据库版本：mysql5.5(通过remi源安装）\n\n### 安装 ###\nCentOS6.5(试验环境）\n```\nyum install mysql-server --enablerepo=remi\n```\nUbuntu（默认版本为5.5)\n```\napt-get install mysql-server\n```\n源码安装\n官方下载链接\nhttp://dev.mysql.com/downloads/mysql/5.5.html#downloads\n```\n./configure  #进入到下载的源文件中，首先要解压缩\nmake && make install\n```\n\n### 修改配置文件 ###\n默认的配置文件位置在/etc/my.cnf，默认配置文件过于简单在实际使用中先对其进行一定的修改。\n参数名                 | 含义\n--------            | ---\nbind-address               |\t 监听ip\nport\t                            |  监听端口\ncharacter_set_server\t| 默认字符集(建议utf8)\nmax_connect_errors\t| 最大允许错误次数(并非指密码错误，而是访问协议不正确之类的，如果某个IP错误次数达到该阈值，则被屏蔽)\nmax_connections\t       | 最大连接数(能同时访问server的连接个数，如果达到该阈值，则不能再连接到server)\ndatadir\t          | 数据保存目录\nlog-error\t\t| \t错误日志保存路径\nskip_name_resolve         |\t跳过域名解析(可加快client连接速度)\nback_log            |\t创建TCP连接时，允许的最大同时未完成的连接个数(主要适用于短连接场景)\nlog-bin\t             | Binlog的保存路径\nbinlog-format\t      |Binlog写入格式，共有ROW/STATEMENT/MIXED三种可选。一般使用MIXED。\nexpire_logs_days\t    |Binlog保留时间(单位:天)\n\n\n这里采用的配置文件（在mysqld下添加如下内容）\n```\nbind-address = 10.19.96.184\nport = 3306\ncharacter_set_server = utf8\nmax_connect_errors = 1000000\nmax_connections = 500\ndatadir = /data/mysql\nlog-error = /var/log/mysql/mysql-error.log\nskip_name_resolve\nback_log = 2000\nlog-bin = /data/mysql\nbinlog-format = MIXED\nexpire_logs_days = 3\n\n```\n如果datadir/log-error/log-bin等对应目录需要确保已创建，并且权限为mysql所有。例如，\n```\nmkdir -p /data/mysql && chown -R mysql.mysql /data/mysql\nmkdir -p /var/log/mysql && chown -R mysql.mysql /var/log/mysql\n```\n配置完成，启动mysql: \n```\n/etc/init.d/mysqld start\n或者\nservice mysqld start\n```\n\n### 权限设置 ###\n执行select * from mysql.user; 可以查看到当前的所有用户。\n\n结果集中的几个关键字段：\nHost——对应的允许访问域(%表示全域，192.168.%.%表示对应账号对该段均可访问，192.168.8.100表示对应账号仅这台机器可访问)\nUser——用户名\nPassword——密码加密串\nxxx_priv——各种权限\n\n\n用户权限管理\n``` bash\nmysql -u root -p # 1、以管理员身份登录mysql\n\nuse mysql # 2、选择mysql数据库\n\ncreate user 'testuser'@'localhost' identified by 'testpassword' #3、创建用户并设定密码\n\nflush privileges #4、使操作生效\n\ncreate database testdb #5、为用户创建数据库\n\ngrant all privileges on testdb.* to test@localhost identified  by '1234' #6、为用户赋予操作数据库testdb的所有权限\n\nflush privileges #7、使操作生效\n\nmysql -u test -p #8、用新用户登录\n```\n\n如果当前账号拥有所有权限，可用最简单的新增用户并授权：\n\n``` grant all on *.* to `root`@`%` identified by '123456' with grant option; ```\n\n其中with grant option表示新增的该账号是否有grant权限，即是否可以通过其创建新账号。\n非常不建议给用户开放全部权限，最好给新用户仅开放所需要的相关权限\n\n\n### 导入测试用数据库 ###\n```bash\nwget https://launchpadlibrarian.net/24493586/employees_db-full-1.0.6.tar.bz2\n\ntar -xjf employees_db-full-1.0.6.tar.bz2 \n\ncd employees_db\n\nmysql -u root -p < employees.sql\n\n```\n\n### 练习 ### \n设置权限, 要求如下：\n1. root账号仅能从本地以及特定机器访问\n2. 创建一个test账号，允许所有机器访问\n\n\n```mysql> grant all on *.* to `root`@`localhost` identified by '123456' with grant option; ```\n\n\n```mysql> grant all on *.* to `test`@`%` identified by '123456' with grant option; ```\n","slug":"Mysql初始安装及配置","published":1,"updated":"2016-05-18T10:58:41.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6zo001kzsko6ot1cr82"},{"title":"Mysql主从配置","date":"2016-05-17T15:36:00.000Z","_content":"\n\n### 常见mysql主从架构 ###\n1.Master-Slave\n2.级联\n3.双Master互为主备\n\n### 主从同步原理 ###\n下面的图说明了主从库之间是如何进行数据同步的，概括来讲就是主库通过把他的binlog推送给从库，从库通过binlog构建数据库来实现的，下面附上一张原理图：\n![主从同步原理](http://7xr7kh.com1.z0.glb.clouddn.com/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86.PNG)\n\n所以要求主库必须要打开binlog\n集群的所有MySQL必须配置server-id参数，并确保唯一\n\n### Master-Slave 配置 ###\n准备要做的就是配置server-id参数，这个参数是在mysql的配置文件中配置的，在这里是/etc/my.cnf。这里假设Master的server-id设置为1，Slave的server-id设置为2。\n\n```\n# vim /etc/my.cnf\n```\n\n首先，主库要创建好专门用于同步的账号，例如：\n```\nmysql> grant replication slave, replication client on *.* to  replication@'%' identified by '123456';\n```\n\n然后，利用mysqldump从主库导出数据，例如：\n\n```\n# mysqldump -h10.6.29.129 -uroot -p --all-databases --master-data=2 --routines --events --quick> 10.6.29.129.sql\n```\n--master-data=2 表示需要记录导出数据当时主库的binlog位置\n--routines 表示导出存储过程（可视实际库表决定是否使用）\n--events 表示导出事件（可根据实际库表决定是否使用）\n--quick 表示让服务端不将结果集一次发送，而是分批发送，可减轻压力\n另外，加上--master-data后默认是锁库的，可确保数据一致性，即导出数据和binlog位置的一致。\n对于Innodb引擎，可增加--single-transaction取消锁库并利用Innodb事务特性确保数据一致\n\n将备份sql从主库传到从库来，这里也可以直接在主库所在主机上操作，如果不在主库所在主机操作的话，可以使用scp传下。将导出的数据灌入到从库，例如：\n\n```\n# mysql -uroot < 10.6.29.129.sql \n```\n从导出的数据文件的开头位置找到同步点\n\n```\n# vim 10.6.29.129.sql\n```\n找到类似下面的一段内容\n\n```\n-- CHANGE MASTER TO MASTER_LOG_FILE='mysql.000003', MASTER_LOG_POS=600；\n```\n依据上面的语句构造sql语句，使用有SUPER权限的账号登陆到从库，设置同步信息，例如下：\n\n```\nmysql> CHANGE MASTER TO MASTER_LOG_FILE='mysql.000003', MASTER_LOG_POS=600, master_host='10.6.29.129', master_port=3306, master_user='replication', master_password='123456';\n```\n` mysql> show slave status \\G `  检查同步信息是否正确，这里主要是检查Master相关的一些配置，如Master_Host等等，主要是检查我们上面执行命令是否生效。如果配置和我们执行的命令一致，则说明修改生效。\n\n执行`mysql> start slave; ` 启动同步，并检查同步状态。我在这里的时候遇到了一个错误，报错内容如下：\n\n```\nERROR 1200 (HY000): The server is not configured as slave; fix in config file or with CHANGE MASTER TO\n```\n网上搜了下，google到了一篇大神的文章，文章上将出现这个报错的原因一般是server-id的设置有问题，文章总结了解决这个问题的三个步骤：\n第一，` show slave status \\G` 检查下从库的状态，对应我们上面的，看看change master to的修改是否生效了。\n\n第二，` SHOW VARIABLES LIKE 'server_id'` server_id是否是0或者1，1是默认值，作为从库无效的，改成其他的吧。我在执行这一步得时候就发现我的server_id是1。。。后来想想修改配置之后我们重启mysqld可能是这个导致的，我赶紧重启了下，好了。\n\n第三，主从都看下server_id的值，看看是否是一样的，是一样的也会导致问题，作者建议将server_id的值改为ip地址的最后几位，这样便于记忆而且不会重复。\n\n经过排查解决了上面的问题之后在`start slave;` 没有报错了。最后在` show slave status \\G` 。这里主要是检查Slave_IO_Running和Slave_SQL_Running的情况，Slave_IO_Running/Slave_SQL_Running均为Yes，表示同步成功。\n\n### 级联架构 ###\n每个作为Slave的MySQLDB只需要根据其对应主库设置同步信息即可，步骤与上一小节相同。\n\n但需要注意的是，默认情况下，从库执行relay-log中的SQL语句不会记录到BINLOG。\n所以，处于中间层的MySQL配置项需要额外开启log_slave_updates=1。\n\n级联架构的示意图如下：\n![级联架构图](http://7xr7kh.com1.z0.glb.clouddn.com/%E7%BA%A7%E8%81%94%E5%8E%9F%E7%90%86.PNG)\n\n### Master-Master ###\n首先，按普通的主从配置步骤将MasterB配置成MasterA的从库；然后，确保MasterB没有写入，通过show master status命令在MasterB上得到其同步点，再将MasterA配置成MasterB的从库。\n\n通常，为了简化逻辑，其中一个Master会设置为只读，正常只通过另外一个Master进行读写。\n若要两边都写，为了避免自增id冲突，一般会设置奇偶错开，即一台的自增ID均为奇数，另一台均为偶数。这个要在业务中通过设置表属性设置的。\n\n\n\n\n","source":"_posts/Mysql主从配置.md","raw":"---\ntitle:  Mysql主从配置\ndate: 2016-05-17 23:36\ntags: 数据库管理\n---\n\n\n### 常见mysql主从架构 ###\n1.Master-Slave\n2.级联\n3.双Master互为主备\n\n### 主从同步原理 ###\n下面的图说明了主从库之间是如何进行数据同步的，概括来讲就是主库通过把他的binlog推送给从库，从库通过binlog构建数据库来实现的，下面附上一张原理图：\n![主从同步原理](http://7xr7kh.com1.z0.glb.clouddn.com/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86.PNG)\n\n所以要求主库必须要打开binlog\n集群的所有MySQL必须配置server-id参数，并确保唯一\n\n### Master-Slave 配置 ###\n准备要做的就是配置server-id参数，这个参数是在mysql的配置文件中配置的，在这里是/etc/my.cnf。这里假设Master的server-id设置为1，Slave的server-id设置为2。\n\n```\n# vim /etc/my.cnf\n```\n\n首先，主库要创建好专门用于同步的账号，例如：\n```\nmysql> grant replication slave, replication client on *.* to  replication@'%' identified by '123456';\n```\n\n然后，利用mysqldump从主库导出数据，例如：\n\n```\n# mysqldump -h10.6.29.129 -uroot -p --all-databases --master-data=2 --routines --events --quick> 10.6.29.129.sql\n```\n--master-data=2 表示需要记录导出数据当时主库的binlog位置\n--routines 表示导出存储过程（可视实际库表决定是否使用）\n--events 表示导出事件（可根据实际库表决定是否使用）\n--quick 表示让服务端不将结果集一次发送，而是分批发送，可减轻压力\n另外，加上--master-data后默认是锁库的，可确保数据一致性，即导出数据和binlog位置的一致。\n对于Innodb引擎，可增加--single-transaction取消锁库并利用Innodb事务特性确保数据一致\n\n将备份sql从主库传到从库来，这里也可以直接在主库所在主机上操作，如果不在主库所在主机操作的话，可以使用scp传下。将导出的数据灌入到从库，例如：\n\n```\n# mysql -uroot < 10.6.29.129.sql \n```\n从导出的数据文件的开头位置找到同步点\n\n```\n# vim 10.6.29.129.sql\n```\n找到类似下面的一段内容\n\n```\n-- CHANGE MASTER TO MASTER_LOG_FILE='mysql.000003', MASTER_LOG_POS=600；\n```\n依据上面的语句构造sql语句，使用有SUPER权限的账号登陆到从库，设置同步信息，例如下：\n\n```\nmysql> CHANGE MASTER TO MASTER_LOG_FILE='mysql.000003', MASTER_LOG_POS=600, master_host='10.6.29.129', master_port=3306, master_user='replication', master_password='123456';\n```\n` mysql> show slave status \\G `  检查同步信息是否正确，这里主要是检查Master相关的一些配置，如Master_Host等等，主要是检查我们上面执行命令是否生效。如果配置和我们执行的命令一致，则说明修改生效。\n\n执行`mysql> start slave; ` 启动同步，并检查同步状态。我在这里的时候遇到了一个错误，报错内容如下：\n\n```\nERROR 1200 (HY000): The server is not configured as slave; fix in config file or with CHANGE MASTER TO\n```\n网上搜了下，google到了一篇大神的文章，文章上将出现这个报错的原因一般是server-id的设置有问题，文章总结了解决这个问题的三个步骤：\n第一，` show slave status \\G` 检查下从库的状态，对应我们上面的，看看change master to的修改是否生效了。\n\n第二，` SHOW VARIABLES LIKE 'server_id'` server_id是否是0或者1，1是默认值，作为从库无效的，改成其他的吧。我在执行这一步得时候就发现我的server_id是1。。。后来想想修改配置之后我们重启mysqld可能是这个导致的，我赶紧重启了下，好了。\n\n第三，主从都看下server_id的值，看看是否是一样的，是一样的也会导致问题，作者建议将server_id的值改为ip地址的最后几位，这样便于记忆而且不会重复。\n\n经过排查解决了上面的问题之后在`start slave;` 没有报错了。最后在` show slave status \\G` 。这里主要是检查Slave_IO_Running和Slave_SQL_Running的情况，Slave_IO_Running/Slave_SQL_Running均为Yes，表示同步成功。\n\n### 级联架构 ###\n每个作为Slave的MySQLDB只需要根据其对应主库设置同步信息即可，步骤与上一小节相同。\n\n但需要注意的是，默认情况下，从库执行relay-log中的SQL语句不会记录到BINLOG。\n所以，处于中间层的MySQL配置项需要额外开启log_slave_updates=1。\n\n级联架构的示意图如下：\n![级联架构图](http://7xr7kh.com1.z0.glb.clouddn.com/%E7%BA%A7%E8%81%94%E5%8E%9F%E7%90%86.PNG)\n\n### Master-Master ###\n首先，按普通的主从配置步骤将MasterB配置成MasterA的从库；然后，确保MasterB没有写入，通过show master status命令在MasterB上得到其同步点，再将MasterA配置成MasterB的从库。\n\n通常，为了简化逻辑，其中一个Master会设置为只读，正常只通过另外一个Master进行读写。\n若要两边都写，为了避免自增id冲突，一般会设置奇偶错开，即一台的自增ID均为奇数，另一台均为偶数。这个要在业务中通过设置表属性设置的。\n\n\n\n\n","slug":"Mysql主从配置","published":1,"updated":"2016-05-18T10:58:38.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6zo001mzskot11movmb"},{"title":"Linux磁盘管理","date":"2016-04-20T23:30:57.000Z","_content":"\n这篇博客是在系统的层次对Linux下磁盘做一个说明的，磁盘是计算机系统中非常基础的一个硬件，对于磁盘的管理和使用，操作系统完成了管理的大部分工作，而使用部分由于每个人操作磁盘的目的不同，那么使用方法也就自然不同。文章中的大部分内容来自于鸟哥的Linux私房菜，在参考部分给出了这篇文章的连接。\n### EXT2文件系统 ###\n文件系统可以认为是操作系统安装在磁盘上用来对磁盘进行管理的软件，**文件系统是会占用磁盘空间的。** EXT2文件系统已经是一个比较古老的文件系统了，现在比较常用的已经是EXT4文件系统了，包括最新版的centos和ubunt使用的都是EXT4文件系统了。EXT4文件系统是在EXT2文件系统的基础上进化出来的。EXT2文件系统上的概念在EXT4上也是通用的。比如说data block, inode table, superblock在EXT4上也是存在的。\n\n### 磁盘管理 ###\n硬盘需要分区，格式化并挂载后方能使用，Linux 下硬盘上的每个分区表示为一个设备文件。在Linux系统中这三个步骤分别对应fdisk，mkfs和mount。一块新的硬盘被加到系统中。必需要经过上面的这3步操作系统才能使用磁盘（指使用磁盘进行读取和写入操作），但其中第一个分区不是必需。物理磁盘在接入到计算机系统中之后其实只要进行格式化和挂载就能使用。\n\n####分区 ####\n分区使用命令fdisk来实现，分区其实不是必需的，linux下分区的概念和Windows中把一块磁盘分成C，D，E...各个分区是一个概念。分区的目的是为了将一块完整的磁盘划分出多个独立的分区来，每一个分区相当于是一块新的磁盘。这样的好处就是我们可以在每个磁盘中安装不同的系统。在我们这里应用的时候不要安装其他系统在磁盘上，分区其实就可以省略了，整个磁盘就当做一块磁盘来用这样没有任何问题，例子中就使用了这种方式来使用我们新的磁盘。一般来说在linux下的分区工具就是fdisk，下面是fdisk常见使用方法的说明，在不同系统下用法可能不同。如有不同以使用系统版本的文档为准。\n列出当前系统下的磁盘和其分区：\n\n```shell\nfdisk -l\n```\n对某块磁盘进行分区操作：\n\n```\nfdisk /dev/vdb\n```\n输入上面命令会使我们进入到fdisk的操作界面，fdisk分区的使用方法还是非常简单的。它会自动打印出命令的说明，跟进自身需求，执行上面的命令就可以了。\n\n#### 格式化 ####\nlinux系统支持众多的文件系统，不同的系统版本默认使用的文件系统可能也不一样，比如说centos6默认使用的ext4文件系统，而centos7默认使用的则是xfs。磁盘必须经过格式化才能使用，格式化的过程就相当于是将文件系统安装到磁盘中的过程。\n常用的格式化命令示例如下：\n\n```shell\nmkfs -t ext4 /dev/vdb #将vdb文件系统格式化为ext4\nmkfs.xfs /dev/vdb #将vdb文件系统格式化为xfs\n```\n\n#### 挂载 ####\n格式化好之后文件系统还不能在linux中使用，要使用的话必须要经过挂载才行。linux的文件系统是树状的文件系统，每个目录相当于是树枝的一个分叉点。我们必须把经过格式化的磁盘挂载在现有的文件系统下才能使用。文件系统的挂载使用mount命令，这个命令接受两个参数，磁盘和挂载点，挂载点是进入新磁盘的入口，要使用新磁盘必须在挂载点之下才可以。也就是说只有在挂载点目录之下新建文件，文件占用的才是新挂载上了的磁盘空间。挂载还有和他相对的一个操作卸载，有一些磁盘操作需要对磁盘进行卸载之后才能进行，下面是这两条命令的示例：\n\n```shell\nmount /dev/vdb /data  #将vdb挂载到/data\numount /dev/vdb       #卸载vdb\n```\n\n#### 显示磁盘空间占用情况 ####\n在 Linux 和 AIX 系统上，都提供了一个 df 命令。df 的功能是检查文件系统的磁盘空间占用情况以及可用性，通常还包挂载点。管理员能利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。 下面是df常见几个用法的例子：\n\n```\ndf -ihT #i表示inode信息，h已阅读友好的方式显示，T文件系统类型\n```\n\n还有一个用来显示文件占用大小的命令du，带 -a 选项的 du 命令将从当前目录开始沿着目录结构向下直到列出所有目录和文件的容量为止。du可用于找出当前文件系统中占用磁盘空间最多的文件，或者说找出大文件。\n\n#### 例子：新加入一块磁盘到linux系统中 ####\n\n```shell\nmkfs -t ext4 /dev/vdb #将vdb的文件系统格式化为ext4\nmount /dev/vdb /data/ #将vdb挂载到/data目录下\nvim /etc/fstab #编辑fstab将下面的语句写入fstab中\n/dev/vdb   /data  ext4  defaults,noatime 0 0\n```\n\n### 最后补充一个在UCloud平台升级磁盘大小的说明 ###\n\n在平台完成升级磁盘操作后，并不能直接在系统中使用。因为磁盘扩容的操作相当于是对物理硬盘进行了扩展，由于是在物理硬件层次的扩展，新增加的磁盘其实是没有进行格式化的，通过前面的说明我们可以知道没有进行格式化的磁盘在操作系统中是无法使用的，因此我们需要在系统中对扩容的磁盘进行一个格式化的操作才能使用。格式化操作一般是会丢失数据的，我们这里使用的resize2fs命令相当于是在不影响之前部分的前提下对新的磁盘空间进行格式化。\n在Linux的主机上进行扩容大概步骤如下：\n\n 1. 查看文件系统类型\n 2. 卸载文件系统\n 3. 运行磁盘检查程序\n 4. 格式化扩容的分区\n\n\n命令如下\n\n```shell\ndf -ihT #查看文件系统分区类型\numount /dev/vdb #卸载vdb分区\ne2fsck -f /dev/vdb #磁盘检查，后一条命令以这条命令为前提\nresize2fs /dev/vdb #格式化扩展的分区\nmount /dev/vdb #挂载分区\n```\n\n \n\n参考\n[Linux 磁盘与文件系统管理](http://vbird.dic.ksu.edu.tw/linux_basic/0230filesystem.php)\n[Unix/Linux 系统自动化管理: 磁盘管理篇（上）](http://www.ibm.com/developerworks/cn/aix/library/0907_unixdisk_litt/)\n","source":"_posts/Linux磁盘管理.md","raw":"---\ntitle: Linux磁盘管理\ndate: 2016-04-21 07:30:57\ntags: 系统运维\n---\n\n这篇博客是在系统的层次对Linux下磁盘做一个说明的，磁盘是计算机系统中非常基础的一个硬件，对于磁盘的管理和使用，操作系统完成了管理的大部分工作，而使用部分由于每个人操作磁盘的目的不同，那么使用方法也就自然不同。文章中的大部分内容来自于鸟哥的Linux私房菜，在参考部分给出了这篇文章的连接。\n### EXT2文件系统 ###\n文件系统可以认为是操作系统安装在磁盘上用来对磁盘进行管理的软件，**文件系统是会占用磁盘空间的。** EXT2文件系统已经是一个比较古老的文件系统了，现在比较常用的已经是EXT4文件系统了，包括最新版的centos和ubunt使用的都是EXT4文件系统了。EXT4文件系统是在EXT2文件系统的基础上进化出来的。EXT2文件系统上的概念在EXT4上也是通用的。比如说data block, inode table, superblock在EXT4上也是存在的。\n\n### 磁盘管理 ###\n硬盘需要分区，格式化并挂载后方能使用，Linux 下硬盘上的每个分区表示为一个设备文件。在Linux系统中这三个步骤分别对应fdisk，mkfs和mount。一块新的硬盘被加到系统中。必需要经过上面的这3步操作系统才能使用磁盘（指使用磁盘进行读取和写入操作），但其中第一个分区不是必需。物理磁盘在接入到计算机系统中之后其实只要进行格式化和挂载就能使用。\n\n####分区 ####\n分区使用命令fdisk来实现，分区其实不是必需的，linux下分区的概念和Windows中把一块磁盘分成C，D，E...各个分区是一个概念。分区的目的是为了将一块完整的磁盘划分出多个独立的分区来，每一个分区相当于是一块新的磁盘。这样的好处就是我们可以在每个磁盘中安装不同的系统。在我们这里应用的时候不要安装其他系统在磁盘上，分区其实就可以省略了，整个磁盘就当做一块磁盘来用这样没有任何问题，例子中就使用了这种方式来使用我们新的磁盘。一般来说在linux下的分区工具就是fdisk，下面是fdisk常见使用方法的说明，在不同系统下用法可能不同。如有不同以使用系统版本的文档为准。\n列出当前系统下的磁盘和其分区：\n\n```shell\nfdisk -l\n```\n对某块磁盘进行分区操作：\n\n```\nfdisk /dev/vdb\n```\n输入上面命令会使我们进入到fdisk的操作界面，fdisk分区的使用方法还是非常简单的。它会自动打印出命令的说明，跟进自身需求，执行上面的命令就可以了。\n\n#### 格式化 ####\nlinux系统支持众多的文件系统，不同的系统版本默认使用的文件系统可能也不一样，比如说centos6默认使用的ext4文件系统，而centos7默认使用的则是xfs。磁盘必须经过格式化才能使用，格式化的过程就相当于是将文件系统安装到磁盘中的过程。\n常用的格式化命令示例如下：\n\n```shell\nmkfs -t ext4 /dev/vdb #将vdb文件系统格式化为ext4\nmkfs.xfs /dev/vdb #将vdb文件系统格式化为xfs\n```\n\n#### 挂载 ####\n格式化好之后文件系统还不能在linux中使用，要使用的话必须要经过挂载才行。linux的文件系统是树状的文件系统，每个目录相当于是树枝的一个分叉点。我们必须把经过格式化的磁盘挂载在现有的文件系统下才能使用。文件系统的挂载使用mount命令，这个命令接受两个参数，磁盘和挂载点，挂载点是进入新磁盘的入口，要使用新磁盘必须在挂载点之下才可以。也就是说只有在挂载点目录之下新建文件，文件占用的才是新挂载上了的磁盘空间。挂载还有和他相对的一个操作卸载，有一些磁盘操作需要对磁盘进行卸载之后才能进行，下面是这两条命令的示例：\n\n```shell\nmount /dev/vdb /data  #将vdb挂载到/data\numount /dev/vdb       #卸载vdb\n```\n\n#### 显示磁盘空间占用情况 ####\n在 Linux 和 AIX 系统上，都提供了一个 df 命令。df 的功能是检查文件系统的磁盘空间占用情况以及可用性，通常还包挂载点。管理员能利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。 下面是df常见几个用法的例子：\n\n```\ndf -ihT #i表示inode信息，h已阅读友好的方式显示，T文件系统类型\n```\n\n还有一个用来显示文件占用大小的命令du，带 -a 选项的 du 命令将从当前目录开始沿着目录结构向下直到列出所有目录和文件的容量为止。du可用于找出当前文件系统中占用磁盘空间最多的文件，或者说找出大文件。\n\n#### 例子：新加入一块磁盘到linux系统中 ####\n\n```shell\nmkfs -t ext4 /dev/vdb #将vdb的文件系统格式化为ext4\nmount /dev/vdb /data/ #将vdb挂载到/data目录下\nvim /etc/fstab #编辑fstab将下面的语句写入fstab中\n/dev/vdb   /data  ext4  defaults,noatime 0 0\n```\n\n### 最后补充一个在UCloud平台升级磁盘大小的说明 ###\n\n在平台完成升级磁盘操作后，并不能直接在系统中使用。因为磁盘扩容的操作相当于是对物理硬盘进行了扩展，由于是在物理硬件层次的扩展，新增加的磁盘其实是没有进行格式化的，通过前面的说明我们可以知道没有进行格式化的磁盘在操作系统中是无法使用的，因此我们需要在系统中对扩容的磁盘进行一个格式化的操作才能使用。格式化操作一般是会丢失数据的，我们这里使用的resize2fs命令相当于是在不影响之前部分的前提下对新的磁盘空间进行格式化。\n在Linux的主机上进行扩容大概步骤如下：\n\n 1. 查看文件系统类型\n 2. 卸载文件系统\n 3. 运行磁盘检查程序\n 4. 格式化扩容的分区\n\n\n命令如下\n\n```shell\ndf -ihT #查看文件系统分区类型\numount /dev/vdb #卸载vdb分区\ne2fsck -f /dev/vdb #磁盘检查，后一条命令以这条命令为前提\nresize2fs /dev/vdb #格式化扩展的分区\nmount /dev/vdb #挂载分区\n```\n\n \n\n参考\n[Linux 磁盘与文件系统管理](http://vbird.dic.ksu.edu.tw/linux_basic/0230filesystem.php)\n[Unix/Linux 系统自动化管理: 磁盘管理篇（上）](http://www.ibm.com/developerworks/cn/aix/library/0907_unixdisk_litt/)\n","slug":"Linux磁盘管理","published":1,"updated":"2016-04-20T23:32:32.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6zo001ozskoaoecpd3u"},{"title":"Linux学习过程中的问题","date":"2014-01-08T09:46:00.000Z","_content":"\n自己学Linux也有一些时间了，因为自己学Linux完全是出于自己的爱好，没有评价的方法，学的怎样只能靠自己的感觉。学习的过程也完全是随自己的想法，正是因为如此，所以造成自己学习的过程中在方法方面的一些问题，也只能凭感觉。所以把他们总结出来，以警示自己，希望可以加以改正，以后不要再犯。\n \n1、太过盲目，没有目的，在一开始的时候只是随便的学习一些东西，看到网上有帖子说什么，觉得好玩，自己就跟着做着玩，正是在这玩的过程中，浪费了很多时间，但是学到的东西却十分的有限。虽然说这样也扩展了自己在各个方面的视野，增加了对Linux的兴趣，对于处于入门阶段不知用Linux来做什么，而茫然无措的自己来说是有一定帮助的，但这个过程极易造成追本逐末的后果。慢慢的对Linux有了一些初步的认识以后就可以彻底抛弃这个了，比如说如果自己对Linux作服务器感兴趣，就重点学习Linux系统管理方面的知识，如果对它的内核感兴趣，那就深入的学习他的内核机制，这样有了明确的目标，学起来一定会高效一些。\n \n2、只是简单的模仿，思考的太少。一开始只是因为不知从何下手而随便找一些帖子来看。后来遇到问题总是要从网上找的，但是网上的方法又不一定是有效的。所以大多数时候只是抱着试一试的心态，又是照着帖子做，而不去想太多，最后问题能解决，那只是运气，问题解决了自己并不明白这是为什么，下一次再遇到还是一样需要到网上找。在这方面，一开始我觉得是因为能力有限造成的，不理解，导致记不住。可是慢慢的当自己知道的东西多了一点以后，还是出现这样的情况就完全是因为自己的懒惰了，不愿去想，也不愿去记。\n \n3、在看书学习的时候，太过走马观花了，很多的时候只是追求速度。且忘了应有的理解，最后看完一无所得的时候也有，还有就是有时候看懂了却懒于实践，最终也不知道自己所理解的正确与否。\n \n4、最后最严重的一个问题是，过多的追求一些华而不实的东西，比如说设置一些3D桌面，修改开机启动时候的主题了等等。这些东西知道就可以了，不必太过醉心于此，不懂其原理，随便搞上一套也没有太多的用处。还容易给系统带来这样那样的问题。比如，有一次装3D桌面的时候，莫名其妙的就没有了图标，系统也因此无法使用，因为不知道怎么解决，就只能重装系统了。还有一次编译内核之后无法启动，本来自己编译的内核有点问题是很正常的，但是那一次。在安装完自己编译的内核之后不光自己编译的内核有问题，而且以前的内核也有问题。又不知如何解决，就只能重装了。虽然原因不知道，但我觉得大概和之前安装的grub的主题有关。\n \n记录下自己的反思，作为激励。","source":"_posts/Linux学习过程中的问题.md","raw":"---\ntitle: Linux学习过程中的问题\ndate: 2014-01-08 17:46\ntags: 个人总结\n---\n\n自己学Linux也有一些时间了，因为自己学Linux完全是出于自己的爱好，没有评价的方法，学的怎样只能靠自己的感觉。学习的过程也完全是随自己的想法，正是因为如此，所以造成自己学习的过程中在方法方面的一些问题，也只能凭感觉。所以把他们总结出来，以警示自己，希望可以加以改正，以后不要再犯。\n \n1、太过盲目，没有目的，在一开始的时候只是随便的学习一些东西，看到网上有帖子说什么，觉得好玩，自己就跟着做着玩，正是在这玩的过程中，浪费了很多时间，但是学到的东西却十分的有限。虽然说这样也扩展了自己在各个方面的视野，增加了对Linux的兴趣，对于处于入门阶段不知用Linux来做什么，而茫然无措的自己来说是有一定帮助的，但这个过程极易造成追本逐末的后果。慢慢的对Linux有了一些初步的认识以后就可以彻底抛弃这个了，比如说如果自己对Linux作服务器感兴趣，就重点学习Linux系统管理方面的知识，如果对它的内核感兴趣，那就深入的学习他的内核机制，这样有了明确的目标，学起来一定会高效一些。\n \n2、只是简单的模仿，思考的太少。一开始只是因为不知从何下手而随便找一些帖子来看。后来遇到问题总是要从网上找的，但是网上的方法又不一定是有效的。所以大多数时候只是抱着试一试的心态，又是照着帖子做，而不去想太多，最后问题能解决，那只是运气，问题解决了自己并不明白这是为什么，下一次再遇到还是一样需要到网上找。在这方面，一开始我觉得是因为能力有限造成的，不理解，导致记不住。可是慢慢的当自己知道的东西多了一点以后，还是出现这样的情况就完全是因为自己的懒惰了，不愿去想，也不愿去记。\n \n3、在看书学习的时候，太过走马观花了，很多的时候只是追求速度。且忘了应有的理解，最后看完一无所得的时候也有，还有就是有时候看懂了却懒于实践，最终也不知道自己所理解的正确与否。\n \n4、最后最严重的一个问题是，过多的追求一些华而不实的东西，比如说设置一些3D桌面，修改开机启动时候的主题了等等。这些东西知道就可以了，不必太过醉心于此，不懂其原理，随便搞上一套也没有太多的用处。还容易给系统带来这样那样的问题。比如，有一次装3D桌面的时候，莫名其妙的就没有了图标，系统也因此无法使用，因为不知道怎么解决，就只能重装系统了。还有一次编译内核之后无法启动，本来自己编译的内核有点问题是很正常的，但是那一次。在安装完自己编译的内核之后不光自己编译的内核有问题，而且以前的内核也有问题。又不知如何解决，就只能重装了。虽然原因不知道，但我觉得大概和之前安装的grub的主题有关。\n \n记录下自己的反思，作为激励。","slug":"Linux学习过程中的问题","published":1,"updated":"2016-04-29T06:23:24.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6zo001qzskoaxl1kck1"},{"title":"Linux和Android启动过程","date":"2014-10-15T11:36:00.000Z","_content":"\nX86架构的PC机的启动过程\n按下电源按钮的直到欢迎页出来之后，linux总共做的事可以分为五步来完成。\n　　1、  BIOS加电自检：\n　　加电自检，检测硬件设备。然后按照cmos上面的顺序来搜索处在活动状态下的可以引导的设备。可以是光驱、软盘、USB等。\n　　2、  加载主引导加载程序（MBR）：\n　　主引导程序是一个512字节的映像。包含一点机器码还有一个小的分区。\n　　主引导程序的任务就是查找并且加载处在硬盘分区上的次引导程序。通过分区表查找活动分区，并将处在活动分区的次引导加载程序读取到内存里面运行。\n　　3、  加载次引导记载程序（GRUB）\n　　次引导加载程序只要就是加载linux内核。\n　　上一阶段结束之后次引导加载程序就会在内存里面跑起来。就会出现GRUB图形界面，让用户选择加载什么样的内核。\n　　4、  linux内核映像：\n　　用户选择要加载的内核之后，次引导加载程序（GRUB）就会根据/boot/grub.conf配置文件中所设置的信息，从/boot/所在的分区上读取Linux内核映像，然后把内核映像加载到内存中并把控制权交给Linux内核。\n　　linux内核获得控制权之后开始干自己的事\n　　1、  检测硬件\n　　2、  解压缩自己并安装必要驱动\n　　3、  初始化与文件系统相关的虚拟设备，LVM或RAID\n　　4、  装载根文件系统，挂在根目录下面\n　　5、  完成之后，linux在进程空间里面加载init程序，下面轮到init干活\n　　5、  init进程\n　　init是所有进程的发起者和控制者，所有的进程都由此衍生。\n　　init进程获得控制权之后，它会执行/etc/rc.d/rc.sysinit脚本，根据里面的代码设置环境变量、网络、启动swap、检查并挂载文件系统、执行其他初始化工作。\n \n　　至此，linux启动完成。\n\nARM架构的Android启动过程\n当按下开机键后，Android的启动过程可以大致分为以下四步。\n1、引导ROM加载第一级引导加载程序：\n位于引导ROM（read-only-memory）中的的特定代码会找到第一级的引导加载程序（即主引导加载程序），并将其加载到存储器中。引导ROM是一个ASIC芯片，其中含有固化在芯片中的代码。\n\n2、第一级引导加载程序利用存储器初始化程序启动第二级引导加载程序：\n引导加载程序会检查安全标记是否开启（S-ON）。如果已经开启，那么引导程序只会加载被标记（官方）内核。如果安全标记是关闭的（S-OFF），那么引导加载程序就不在检查标记了。将安全标记设置为S-\n\n3、引导加载程序将Linux内核和定制化内容加载到存储器\n引导加载程序将对硬件的控制权转给了Linux内核。Linux内核以及定制的软件和固件通常都打包在一起。这就是我们刷机的时候说的ROM。但其实刷入的地方（NAND存储器）并非是只读的。\n\n 4、最后一步是初始化（INIT）进程。INIT进程是设备上运行的其他所有进程的前提。他会初始化基础硬件房屋i设备功能所需的所有进程。他还会启动用来执行大多数应用程序的Dalvik虚拟机。\n\n总结：Linux和Android启动的区别\n整个的来看Android的启动过程和Linux的启动过程大同小异，比毕竟他们大体上是一样的只是运行在不同架构的硬件上而已吧。\n\n补充:Recovery程序\nRecovery程序是一段独立代码，它存在于一个引导分区中（正常的启动过程并不会启动到Recovery程序，我的理解），用来更新Android和维护设备。几乎所有的Android设备都有一个用来引导的Recovery程序。Recovery程序可以做很多有用的事情，比如讲设备恢复为出厂、清楚数据缓存以及安装Android操作系统的官方更新。\n","source":"_posts/Linux和Android启动过程.md","raw":"---\ntitle: Linux和Android启动过程\ndate: 2014-10-15 19:36\ntags: Linux学习\n---\n\nX86架构的PC机的启动过程\n按下电源按钮的直到欢迎页出来之后，linux总共做的事可以分为五步来完成。\n　　1、  BIOS加电自检：\n　　加电自检，检测硬件设备。然后按照cmos上面的顺序来搜索处在活动状态下的可以引导的设备。可以是光驱、软盘、USB等。\n　　2、  加载主引导加载程序（MBR）：\n　　主引导程序是一个512字节的映像。包含一点机器码还有一个小的分区。\n　　主引导程序的任务就是查找并且加载处在硬盘分区上的次引导程序。通过分区表查找活动分区，并将处在活动分区的次引导加载程序读取到内存里面运行。\n　　3、  加载次引导记载程序（GRUB）\n　　次引导加载程序只要就是加载linux内核。\n　　上一阶段结束之后次引导加载程序就会在内存里面跑起来。就会出现GRUB图形界面，让用户选择加载什么样的内核。\n　　4、  linux内核映像：\n　　用户选择要加载的内核之后，次引导加载程序（GRUB）就会根据/boot/grub.conf配置文件中所设置的信息，从/boot/所在的分区上读取Linux内核映像，然后把内核映像加载到内存中并把控制权交给Linux内核。\n　　linux内核获得控制权之后开始干自己的事\n　　1、  检测硬件\n　　2、  解压缩自己并安装必要驱动\n　　3、  初始化与文件系统相关的虚拟设备，LVM或RAID\n　　4、  装载根文件系统，挂在根目录下面\n　　5、  完成之后，linux在进程空间里面加载init程序，下面轮到init干活\n　　5、  init进程\n　　init是所有进程的发起者和控制者，所有的进程都由此衍生。\n　　init进程获得控制权之后，它会执行/etc/rc.d/rc.sysinit脚本，根据里面的代码设置环境变量、网络、启动swap、检查并挂载文件系统、执行其他初始化工作。\n \n　　至此，linux启动完成。\n\nARM架构的Android启动过程\n当按下开机键后，Android的启动过程可以大致分为以下四步。\n1、引导ROM加载第一级引导加载程序：\n位于引导ROM（read-only-memory）中的的特定代码会找到第一级的引导加载程序（即主引导加载程序），并将其加载到存储器中。引导ROM是一个ASIC芯片，其中含有固化在芯片中的代码。\n\n2、第一级引导加载程序利用存储器初始化程序启动第二级引导加载程序：\n引导加载程序会检查安全标记是否开启（S-ON）。如果已经开启，那么引导程序只会加载被标记（官方）内核。如果安全标记是关闭的（S-OFF），那么引导加载程序就不在检查标记了。将安全标记设置为S-\n\n3、引导加载程序将Linux内核和定制化内容加载到存储器\n引导加载程序将对硬件的控制权转给了Linux内核。Linux内核以及定制的软件和固件通常都打包在一起。这就是我们刷机的时候说的ROM。但其实刷入的地方（NAND存储器）并非是只读的。\n\n 4、最后一步是初始化（INIT）进程。INIT进程是设备上运行的其他所有进程的前提。他会初始化基础硬件房屋i设备功能所需的所有进程。他还会启动用来执行大多数应用程序的Dalvik虚拟机。\n\n总结：Linux和Android启动的区别\n整个的来看Android的启动过程和Linux的启动过程大同小异，比毕竟他们大体上是一样的只是运行在不同架构的硬件上而已吧。\n\n补充:Recovery程序\nRecovery程序是一段独立代码，它存在于一个引导分区中（正常的启动过程并不会启动到Recovery程序，我的理解），用来更新Android和维护设备。几乎所有的Android设备都有一个用来引导的Recovery程序。Recovery程序可以做很多有用的事情，比如讲设备恢复为出厂、清楚数据缓存以及安装Android操作系统的官方更新。\n","slug":"Linux和Android启动过程","published":1,"updated":"2016-04-29T07:28:15.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t6zo001szskotn3tpxxp"},{"title":"Linux下的局域网小工具","date":"2014-10-06T07:36:00.000Z","_content":"\n1、Sniffer工作原理\n在本地网卡设置成“混杂”模式时，网卡会接收所有在网络中的所有的帧，这就构成了监听。如果局域网中的某一台主机被设置成了这种监听模式，它就成了一个Sniffer。根据Sniffer的原理，如果一个帧没有被发送到指定的网卡上，那么就无法监听到该帧。所以Sniffer所能监听的信息仅限于同一个物理网络内传输的数据。\n\n2、Sniffit的安装\n在Debian可以使用软件源安装。命令如下：\n```shell\nsudo aptitude install sniffit\n```\n当然也可以下载源文件进行编译安装。\n```shell\nsudo tar -zxvf sniffit.version.tar.gz\ncd sniffti.version\n./configure && make\n./sniffit\n```\n3、TcpDump\n安装过程类似于上面安装sniffit的过程。\n不添加任何参数直接运行TcpDump，系统将监视网络中所有流过的数据包，这是TcpDump最简单的应用。\n\ntcpdump/libpcap的包过滤规则也支持更多通用分组表达式，在这些表达式中，包中的任意字节范围都可以使用关系或二进制操作符进行检查。对于字节范围表达，你可以使用以下格式：\n```\nproto [ expr : size ]  \n```\n\n“proto”可以是熟知的协议之一（如ip，arp，tcp，udp，icmp，ipv6），“expr”表示与指定的协议头开头相关的字节偏移量。有我们熟知的直接偏移量如tcpflags，也有取值常量如tcp-syn，tcp-ack或者tcp-fin。“size”是可选的，表示从字节偏移量开始检查的字节数量。\n\n只捕获TCP SYN包：\n```\n# tcpdump -i <interface> \"tcp[tcpflags] & (tcp-syn) != 0\"  \n```\n\n\n\n\n4、EtherApe\n安装过程也类似于上面可以采用软件源安装和源码安装两种方式。\nEtherApe是一个图形化的网络嗅探器。主要是用在验证主机与主机之间的连接，EtherApe能够图形化的显示网络目前所处的状态，且使用不同颜色的线来表示位于不同主机之间的连接，二通过连线的粗细可以判断主机数据量的大小。\n\n\n5、netstat\nnetstat是系统只带的工具，可以用于显示于IP，TCP，UDP和ICMP协议相关的统计数据，一般用于检验本地2计算机各端口的网络连接情况。\n","source":"_posts/Linux下的局域网小工具.md","raw":"---\ntitle: Linux下的局域网小工具\ndate: 2014-10-06 15:36\ntags: 计算机网络\n---\n\n1、Sniffer工作原理\n在本地网卡设置成“混杂”模式时，网卡会接收所有在网络中的所有的帧，这就构成了监听。如果局域网中的某一台主机被设置成了这种监听模式，它就成了一个Sniffer。根据Sniffer的原理，如果一个帧没有被发送到指定的网卡上，那么就无法监听到该帧。所以Sniffer所能监听的信息仅限于同一个物理网络内传输的数据。\n\n2、Sniffit的安装\n在Debian可以使用软件源安装。命令如下：\n```shell\nsudo aptitude install sniffit\n```\n当然也可以下载源文件进行编译安装。\n```shell\nsudo tar -zxvf sniffit.version.tar.gz\ncd sniffti.version\n./configure && make\n./sniffit\n```\n3、TcpDump\n安装过程类似于上面安装sniffit的过程。\n不添加任何参数直接运行TcpDump，系统将监视网络中所有流过的数据包，这是TcpDump最简单的应用。\n\ntcpdump/libpcap的包过滤规则也支持更多通用分组表达式，在这些表达式中，包中的任意字节范围都可以使用关系或二进制操作符进行检查。对于字节范围表达，你可以使用以下格式：\n```\nproto [ expr : size ]  \n```\n\n“proto”可以是熟知的协议之一（如ip，arp，tcp，udp，icmp，ipv6），“expr”表示与指定的协议头开头相关的字节偏移量。有我们熟知的直接偏移量如tcpflags，也有取值常量如tcp-syn，tcp-ack或者tcp-fin。“size”是可选的，表示从字节偏移量开始检查的字节数量。\n\n只捕获TCP SYN包：\n```\n# tcpdump -i <interface> \"tcp[tcpflags] & (tcp-syn) != 0\"  \n```\n\n\n\n\n4、EtherApe\n安装过程也类似于上面可以采用软件源安装和源码安装两种方式。\nEtherApe是一个图形化的网络嗅探器。主要是用在验证主机与主机之间的连接，EtherApe能够图形化的显示网络目前所处的状态，且使用不同颜色的线来表示位于不同主机之间的连接，二通过连线的粗细可以判断主机数据量的大小。\n\n\n5、netstat\nnetstat是系统只带的工具，可以用于显示于IP，TCP，UDP和ICMP协议相关的统计数据，一般用于检验本地2计算机各端口的网络连接情况。\n","slug":"Linux下的局域网小工具","published":1,"updated":"2016-04-29T07:15:52.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t704001vzsko62tqf0rm"},{"title":"Java中的String与StringBuffer","date":"2013-12-11T03:32:00.000Z","_content":"\n以前学java的时候竟然不知道有一个StringBuffer，终于有一天需要用函数来改变String的值得时候。才找到一些资料提到StringBuffer，这是前言。\nString是使用java.lang包中的String类来创建的，因此字符串变量是类类型的，是一个对象。字符串常量是对象，因此可以把字符串常量的引用付给一个字符串变量。所以：\n```java\nString s；\ns=\"How are you\";\ns=\"How do you do\";\n```\n执行结果打印：s=\"How do you do\";\n但是s[3]=a;这样的赋值方式是错误的。\n```java\npublic class TestFun2 {\n   public static void testStr(String str){\n   str=\"hello\";//型参指向字符串 “hello” \n} \npublic static void main(String[] args) {\n   String s=\"1\" ; \n   TestFun2.testStr(s);\n   System.out.println(\"s=\"+s); //实参s引用没变，值也不变 \n   }\n}\n```\n执行结果打印：s=1\n前面的例子表明String类创建的字符串对象是不可修改的。也就是说String字符串不能修改。删除或替换字符串中的某个字符，即String对象一旦创建，实体是不可再发生变化的，但StringBuffer类可以。该类能创建可修改的字符串序列，即该对象的实体的内存是可以自动改变大小的。\n例如，StringBuffer有append()方法。又如上例如果传入的参数是StringBuffer类型的则其内容是可修改，可返回的。\n ","source":"_posts/Java中的String与StringBuffer.md","raw":"---\ntitle: Java中的String与StringBuffer \ndate: 2013-12-11 11:32\ntags:  Java编程学习\n---\n\n以前学java的时候竟然不知道有一个StringBuffer，终于有一天需要用函数来改变String的值得时候。才找到一些资料提到StringBuffer，这是前言。\nString是使用java.lang包中的String类来创建的，因此字符串变量是类类型的，是一个对象。字符串常量是对象，因此可以把字符串常量的引用付给一个字符串变量。所以：\n```java\nString s；\ns=\"How are you\";\ns=\"How do you do\";\n```\n执行结果打印：s=\"How do you do\";\n但是s[3]=a;这样的赋值方式是错误的。\n```java\npublic class TestFun2 {\n   public static void testStr(String str){\n   str=\"hello\";//型参指向字符串 “hello” \n} \npublic static void main(String[] args) {\n   String s=\"1\" ; \n   TestFun2.testStr(s);\n   System.out.println(\"s=\"+s); //实参s引用没变，值也不变 \n   }\n}\n```\n执行结果打印：s=1\n前面的例子表明String类创建的字符串对象是不可修改的。也就是说String字符串不能修改。删除或替换字符串中的某个字符，即String对象一旦创建，实体是不可再发生变化的，但StringBuffer类可以。该类能创建可修改的字符串序列，即该对象的实体的内存是可以自动改变大小的。\n例如，StringBuffer有append()方法。又如上例如果传入的参数是StringBuffer类型的则其内容是可修改，可返回的。\n ","slug":"Java中的String与StringBuffer","published":1,"updated":"2016-04-29T09:05:45.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t704001yzskooprqibh7"},{"title":"Hello Hexo —— 我的个人博客搭建记录","date":"2016-01-15T09:49:42.000Z","_content":"[Hexo](http://hexo.io/)是一个Node编写的，可以根据Markdown语法生成静态文件的博客系统，这篇博客是根据网上教程，使用Hexo + Github搭建个人博客过程的记录。Hexo搭建过程非常简单，官方文档写的非常清楚。这篇 博客的写作原因仅仅在于记录自己的安装过程。作为一个记录。\n\n### 前提条件\n\nHexo的安装过程依赖Node.js和Git，所以安装Hexo前需要先安装着两个软件。他们的下载地址可以参考下面的链接。\n\n[Node.js](https://nodejs.org)\n[Git](git-scm.com)\n\n安装过程非常简单，也就是下载两个软件包安装就可以了。其中node.js的安装，可以先安装nvm，通过nvm来安装node.js。\n\n### Hexo的安装\n\nhexo安装可以在命令行下完成。通过借助使用git bash来执行下列命令，git bash的启动在任意一个目录中右键，找到git bash点击就可运行。这个方法在使用github管理代码的时候，生成本地证书的时候还会用到。\n\n``` bash\n$ npm install -g hexo-cli\n```\n\n### 使用Hexo建站\n\n首先创建好需要存放站点的目录，在这里是<folder>。通过下面命令可以在<folder>目录下生成建站所需的文件\n\n``` bash\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\n### 使用git管理代码\n\n修改<folder>目录下的_config.yml文件，添加下面行，表示使用git来管理代码，并把代码托管在github上。当然首先需要您在github上创建yourname.github.io项目。这里的托管方式借鉴网上一些方法，使用master分支来管理静态网站。code分支来管理生成静态文件的代码。\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:yourname/yourname.github.io.git\n  branch: master\n```\n\n### 把代码部署到github\n\n运行下面命令就可以将代码部署到github了。\n\n``` bash\n$ hexo generate\n$ hexo deploy\n```\n### 访问yourname.github.io观察效果\n\n参考：[hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n","source":"_posts/Hello Hexo —— 我的个人博客搭建记录.md","raw":"---\ntitle: Hello Hexo —— 我的个人博客搭建记录\ndate: 2016-01-15 17:49:42\ntags: 个人总结\n---\n[Hexo](http://hexo.io/)是一个Node编写的，可以根据Markdown语法生成静态文件的博客系统，这篇博客是根据网上教程，使用Hexo + Github搭建个人博客过程的记录。Hexo搭建过程非常简单，官方文档写的非常清楚。这篇 博客的写作原因仅仅在于记录自己的安装过程。作为一个记录。\n\n### 前提条件\n\nHexo的安装过程依赖Node.js和Git，所以安装Hexo前需要先安装着两个软件。他们的下载地址可以参考下面的链接。\n\n[Node.js](https://nodejs.org)\n[Git](git-scm.com)\n\n安装过程非常简单，也就是下载两个软件包安装就可以了。其中node.js的安装，可以先安装nvm，通过nvm来安装node.js。\n\n### Hexo的安装\n\nhexo安装可以在命令行下完成。通过借助使用git bash来执行下列命令，git bash的启动在任意一个目录中右键，找到git bash点击就可运行。这个方法在使用github管理代码的时候，生成本地证书的时候还会用到。\n\n``` bash\n$ npm install -g hexo-cli\n```\n\n### 使用Hexo建站\n\n首先创建好需要存放站点的目录，在这里是<folder>。通过下面命令可以在<folder>目录下生成建站所需的文件\n\n``` bash\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\n### 使用git管理代码\n\n修改<folder>目录下的_config.yml文件，添加下面行，表示使用git来管理代码，并把代码托管在github上。当然首先需要您在github上创建yourname.github.io项目。这里的托管方式借鉴网上一些方法，使用master分支来管理静态网站。code分支来管理生成静态文件的代码。\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:yourname/yourname.github.io.git\n  branch: master\n```\n\n### 把代码部署到github\n\n运行下面命令就可以将代码部署到github了。\n\n``` bash\n$ hexo generate\n$ hexo deploy\n```\n### 访问yourname.github.io观察效果\n\n参考：[hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n","slug":"Hello Hexo —— 我的个人博客搭建记录","published":1,"updated":"2016-05-05T12:14:31.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t7040020zsko5mfxfdq1"},{"title":"HTML标签总结","date":"2013-11-18T09:46:00.000Z","_content":"学了HTML感觉有一些标签还不是很熟悉，所以总结一下，做个备忘同时加强记忆：\n标签：\n```\n<head></head>\n```\n常把js的内容定义在这里面，和<body>是同一级的标签。\n```\n<body></body>\n```\n定义整个文档的主体内容。\n```\n<h1><h1>\n```\n定义标题，其中1可以替换为其他的数字，最大为1，最小为6，标题标签并不适合用来加粗，个人觉得可能是以后用css来设置属性的时候会造成不便。\n```\n<a></a>\n```\n定义一个链接，或者定义一个锚点。最常用的就是用来给显示的文字定义一个可点击的连接。其跳转的范围可以是本网页或者是一个外部网页。\n``` \n<hr />\n```\n页面中创建水平线\n```\n<br />\n```\n换行\n我觉得这俩个标签有点像，首先他们都是自封闭的，然后又只有一个字母的差别。据说他们在xhtml中都不提倡。\n```\n<form></form>\n```\n表单标签，用来提交数据可以用method属性加提交方法，有两种post和get。post可以用来提交比较大的数据，而get是提交比较小的数据，且get的方式会在浏览器的地址栏显示出来。\n```\n<input />\n```\n用于输入的标签，默认为输入框，除此还有很多其他的类型可以选择，通过type属性指定，常见的有text，checkbox，radio等，但是同样用来提交数据多行文本域是用来另一个标签。\n```\n<textarea></textara>\n```\n```\n<b></b>加粗\n<i></i>斜体\n```\n ","source":"_posts/HTML标签总结.md","raw":"---\ntitle: HTML标签总结\ndate: 2013-11-18 17:46\ntags: Web基础\n---\n学了HTML感觉有一些标签还不是很熟悉，所以总结一下，做个备忘同时加强记忆：\n标签：\n```\n<head></head>\n```\n常把js的内容定义在这里面，和<body>是同一级的标签。\n```\n<body></body>\n```\n定义整个文档的主体内容。\n```\n<h1><h1>\n```\n定义标题，其中1可以替换为其他的数字，最大为1，最小为6，标题标签并不适合用来加粗，个人觉得可能是以后用css来设置属性的时候会造成不便。\n```\n<a></a>\n```\n定义一个链接，或者定义一个锚点。最常用的就是用来给显示的文字定义一个可点击的连接。其跳转的范围可以是本网页或者是一个外部网页。\n``` \n<hr />\n```\n页面中创建水平线\n```\n<br />\n```\n换行\n我觉得这俩个标签有点像，首先他们都是自封闭的，然后又只有一个字母的差别。据说他们在xhtml中都不提倡。\n```\n<form></form>\n```\n表单标签，用来提交数据可以用method属性加提交方法，有两种post和get。post可以用来提交比较大的数据，而get是提交比较小的数据，且get的方式会在浏览器的地址栏显示出来。\n```\n<input />\n```\n用于输入的标签，默认为输入框，除此还有很多其他的类型可以选择，通过type属性指定，常见的有text，checkbox，radio等，但是同样用来提交数据多行文本域是用来另一个标签。\n```\n<textarea></textara>\n```\n```\n<b></b>加粗\n<i></i>斜体\n```\n ","slug":"HTML标签总结","published":1,"updated":"2016-04-29T09:32:33.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t7040022zskorqw2ixwf"},{"title":"Docker镜像创建","date":"2016-05-11T00:29:00.000Z","_content":"\n### 1、创建Docker镜像的一些说明 ###\n这里通过创建一个Shadowsocks的docker镜像来说明创建一个docker镜像的过程，Docker镜像创建是Docker一个非常基础重要的功能，这里介绍的这个例子当然也可以通过一个shell脚本来做，通过shell的问题还是那个老生常谈的话题，环境不好控制，遇到不一样的环境可能出错，docker在创建镜像的时候就自行创建了环境，因此避免了这个问题。下面的是复制的 别人的关于命令的总结（http://blog.csdn.net/qinyushuang/article/details/43342553）：\n（1）FROM（指定基础image）\n构建指令，必须指定且需要在Dockerfile其他指令的前面。后续的指令都依赖于该指令指定的image。FROM指令指定的基础image可以是官方远程仓库中的，也可以位于本地仓库。\n该指令有两种格式：\n```\nFROM <image>  \n```\n指定基础image为该image的最后修改的版本。或者：\n```\nFROM <image>:<tag>  \n```\n指定基础image为该image的一个tag版本。\n\n（2）MAINTAINER（用来指定镜像创建者信息）\n构建指令，用于将image的制作者相关的信息写入到image中。当我们对该image执行docker inspect命令时，输出中有相应的字段记录该信息。\n格式：\n```\nMAINTAINER <name>  \n```\n\n（3）RUN（安装软件用）\n构建指令，RUN可以运行任何被基础image支持的命令。如基础image选择了ubuntu，那么软件管理部分只能使用ubuntu的命令。\n该指令有两种格式：\n```\nRUN <command> (the command is run in a shell - `/bin/sh -c`)  \nRUN [\"executable\", \"param1\", \"param2\" ... ]  (exec form)  \n```\n\n（4）CMD（设置container启动时执行的操作）\n设置指令，用于container启动时指定的操作。该操作可以是执行自定义脚本，也可以是执行系统命令。该指令只能在文件中存在一次，如果有多个，则只执行最后一条。\n该指令有三种格式：\n```\nCMD [\"executable\",\"param1\",\"param2\"] (like an exec, this is the preferred form)  \nCMD command param1 param2 (as a shell)  \n```\n当Dockerfile指定了ENTRYPOINT，那么使用下面的格式：\n```\nCMD [\"param1\",\"param2\"] (as default parameters to ENTRYPOINT)  \n```\nENTRYPOINT指定的是一个可执行的脚本或者程序的路径，该指定的脚本或者程序将会以param1和param2作为参数执行。所以如果CMD指令使用上面的形式，那么Dockerfile中必须要有配套的ENTRYPOINT。\n\n（5）ENTRYPOINT（设置container启动时执行的操作）\n设置指令，指定容器启动时执行的命令，可以多次设置，但是只有最后一个有效。\n两种格式:\n```\nENTRYPOINT [\"executable\", \"param1\", \"param2\"] (like an exec, the preferred form)  \n\nENTRYPOINT command param1 param2 (as a shell) \n```\n\n该指令的使用分为两种情况，一种是独自使用，另一种和CMD指令配合使用。\n当独自使用时，如果你还使用了CMD命令且CMD是一个完整的可执行的命令，那么CMD指令和ENTRYPOINT会互相覆盖只有最后一个CMD或者ENTRYPOINT有效。\n```\n# CMD指令将不会被执行，只有ENTRYPOINT指令被执行  \nCMD echo “Hello, World!”  \nENTRYPOINT ls -l \n```\n\n另一种用法和CMD指令配合使用来指定ENTRYPOINT的默认参数，这时CMD指令不是一个完整的可执行命令，仅仅是参数部分；ENTRYPOINT指令只能使用JSON方式指定执行命令，而不能指定参数。\n```\nFROM ubuntu  \nCMD [\"-l\"]  \nENTRYPOINT [\"/usr/bin/ls\"]  \n```\n\n（6）USER（设置container容器的用户）\n设置指令，设置启动容器的用户，默认是root用户。\n```\n# 指定memcached的运行用户  \nENTRYPOINT [\"memcached\"]  \nUSER daemon  \n或  \nENTRYPOINT [\"memcached\", \"-u\", \"daemon\"]  \n```\n\n（7）EXPOSE（指定容器需要映射到宿主机器的端口）\n设置指令，该指令会将容器中的端口映射成宿主机器中的某个端口。当你需要访问容器的时候，可以不是用容器的IP地址而是使用宿主机器的IP地址和映射后的端口。要完成整个操作需要两个步骤，首先在Dockerfile使用EXPOSE设置需要映射的容器端口，然后在运行容器的时候指定-p选项加上EXPOSE设置的端口，这样EXPOSE设置的端口号会被随机映射成宿主机器中的一个端口号。也可以指定需要映射到宿主机器的那个端口，这时要确保宿主机器上的端口号没有被使用。EXPOSE指令可以一次设置多个端口号，相应的运行容器的时候，可以配套的多次使用-p选项。\n格式:\n```\nEXPOSE <port> [<port>...]  \n\n\n# 映射一个端口  \nEXPOSE port1  \n# 相应的运行容器使用的命令  \ndocker run -p port1 image  \n  \n# 映射多个端口  \nEXPOSE port1 port2 port3  \n# 相应的运行容器使用的命令  \ndocker run -p port1 -p port2 -p port3 image  \n# 还可以指定需要映射到宿主机器上的某个端口号  \ndocker run -p host_port1:port1 -p host_port2:port2 -p host_port3:port3 image  \n```\n\n端口映射是docker比较重要的一个功能，原因在于我们每次运行容器的时候容器的IP地址不能指定而是在桥接网卡的地址范围内随机生成的。宿主机器的IP地址是固定的，我们可以将容器的端口的映射到宿主机器上的一个端口，免去每次访问容器中的某个服务时都要查看容器的IP的地址。对于一个运行的容器，可以使用docker port加上容器中需要映射的端口和容器的ID来查看该端口号在宿主机器上的映射端口。\n\n（8）ENV（用于设置环境变量）\n构建指令，在image中设置一个环境变量。\n格式:\n```\nENV <key> <value>\n```\n\n设置了后，后续的RUN命令都可以使用，container启动后，可以通过docker inspect查看这个环境变量，也可以通过在docker run --env key=value时设置或修改环境变量。\n假如你安装了JAVA程序，需要设置JAVA_HOME，那么可以在Dockerfile中这样写：\nENV JAVA_HOME /path/to/java/dirent\n\n（9）ADD（从src复制文件到container的dest路径）\n构建指令，所有拷贝到container中的文件和文件夹权限为0755，uid和gid为0；如果是一个目录，那么会将该目录下的所有文件添加到container中，不包括目录；如果文件是可识别的压缩格式，则docker会帮忙解压缩（注意压缩格式）；如果<src>是文件且<dest>中不使用斜杠结束，则会将<dest>视为文件，<src>的内容会写入<dest>；如果<src>是文件且<dest>中使用斜杠结束，则会<src>文件拷贝到<dest>目录下。\n格式:\n```\nADD <src> <dest>  \n```\n\n<src> 是相对被构建的源目录的相对路径，可以是文件或目录的路径，也可以是一个远程的文件url;\n<dest> 是container中的绝对路径\n\n（10）VOLUME（指定挂载点)）\n设置指令，使容器中的一个目录具有持久化存储数据的功能，该目录可以被容器本身使用，也可以共享给其他容器使用。我们知道容器使用的是AUFS，这种文件系统不能持久化数据，当容器关闭后，所有的更改都会丢失。当容器中的应用有持久化数据的需求时可以在Dockerfile中使用该指令。\n格式:\n```\nVOLUME [\"<mountpoint>\"]  \n```\n\n```\nFROM base  \nVOLUME [\"/tmp/data\"]  \n```\n\n运行通过该Dockerfile生成image的容器，/tmp/data目录中的数据在容器关闭后，里面的数据还存在。例如另一个容器也有持久化数据的需求，且想使用上面容器共享的/tmp/data目录，那么可以运行下面的命令启动一个容器：\n```\ndocker run -t -i -rm -volumes-from container1 image2 bash  \n```\n\ncontainer1为第一个容器的ID，image2为第二个容器运行image的名字。\n\n（11）WORKDIR（切换目录）\n设置指令，可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效。\n格式:\n```\nWORKDIR /path/to/workdir  \n\n\n# 在 /p1/p2 下执行 vim a.txt  \nWORKDIR /p1 WORKDIR p2 RUN vim a.txt  \n```\n\n（12）ONBUILD（在子镜像中执行）\n```\nONBUILD <Dockerfile关键字>  \n```\n\nONBUILD 指定的命令在构建镜像时并不执行，而是在它的子镜像中执行。\n详细资料可参考https://www.dockboard.org/docker-quicktip-3-onbuild\n\n\n### 2、创建Dockerfile，构建shadowsocks环境 ###\n\nDockerfile文件\n```\n# Version: 0.0.1\n\n# Pull base image\nFROM centos:6\n\nMAINTAINER Gao Xiong \"growdane@gmail.com\"\n\n# Install openssl-devel\nRUN yum -y install openssl-devel\n\n# Install make and another devople tools\nRUN yum -y install gcc gcc-c++ automake autoconf libtool make\n\n# Install git \nRUN yum -y install git\n\n# Pull shadowsocks and install\nRUN cd /root && git clone https://github.com/madeye/shadowsocks-libev.git\nRUN cd /root/shadowsocks-libev && ./configure && make && make install\n\n# Expose ports\nEXPOSE 8388\n\n# Define default command\nENTRYPOINT cd /root/shadowsocks-libev && ss-server -p 8388 -k fuckgfw10086\n```\n\n### 3、构建镜像 ###\nDockerfile写好了，就可以在宿主的命令行中构建这个镜像了，构建命令如下：\n```\n# docker build -t growdane/shadowsocks .\n# docker run -d -p 8388:8388 growdane/shadowsocks\n```\n执行完上面的命令就可以直接在需要shadowsock的地方连接他了，密码就是ENTRYPOINT中，-k参数设置的。\n\n### 4、镜像上传 ###\n镜像上传有多种办法，第一种是通过docker直接在命令行将生成好的镜像上传到 docker.io这种方法会稍微慢一点，还有种方法是将dockerfile上传到github，然后通过自动构建来在docker.io上生成镜像。两种方法的shell命令如下：\n```\n# docker login\n# docker push growdane/shadowsocks\n```\n\n第二种方法\n这种方法不好用命令来说明，直接在用文字来说吧，现在github上创建一个新得Repository，然后将Dockerfile上传到github上就可以了。上面的这个Dockerfile我已经上传到https://github.com/hsiun/dockerfile-shadowsocks。\n\n### 5、镜像拉取 ###\n现在镜像已经创建成功了，如果需要的话可以通过下面的命令来拉取\n```\n# docker pull growdane/shadowsocks\n```\n\n","source":"_posts/Docker镜像创建.md","raw":"---\ntitle: Docker镜像创建\ndate: 2016-05-11 08:29:00\ntags: 系统运维\n---\n\n### 1、创建Docker镜像的一些说明 ###\n这里通过创建一个Shadowsocks的docker镜像来说明创建一个docker镜像的过程，Docker镜像创建是Docker一个非常基础重要的功能，这里介绍的这个例子当然也可以通过一个shell脚本来做，通过shell的问题还是那个老生常谈的话题，环境不好控制，遇到不一样的环境可能出错，docker在创建镜像的时候就自行创建了环境，因此避免了这个问题。下面的是复制的 别人的关于命令的总结（http://blog.csdn.net/qinyushuang/article/details/43342553）：\n（1）FROM（指定基础image）\n构建指令，必须指定且需要在Dockerfile其他指令的前面。后续的指令都依赖于该指令指定的image。FROM指令指定的基础image可以是官方远程仓库中的，也可以位于本地仓库。\n该指令有两种格式：\n```\nFROM <image>  \n```\n指定基础image为该image的最后修改的版本。或者：\n```\nFROM <image>:<tag>  \n```\n指定基础image为该image的一个tag版本。\n\n（2）MAINTAINER（用来指定镜像创建者信息）\n构建指令，用于将image的制作者相关的信息写入到image中。当我们对该image执行docker inspect命令时，输出中有相应的字段记录该信息。\n格式：\n```\nMAINTAINER <name>  \n```\n\n（3）RUN（安装软件用）\n构建指令，RUN可以运行任何被基础image支持的命令。如基础image选择了ubuntu，那么软件管理部分只能使用ubuntu的命令。\n该指令有两种格式：\n```\nRUN <command> (the command is run in a shell - `/bin/sh -c`)  \nRUN [\"executable\", \"param1\", \"param2\" ... ]  (exec form)  \n```\n\n（4）CMD（设置container启动时执行的操作）\n设置指令，用于container启动时指定的操作。该操作可以是执行自定义脚本，也可以是执行系统命令。该指令只能在文件中存在一次，如果有多个，则只执行最后一条。\n该指令有三种格式：\n```\nCMD [\"executable\",\"param1\",\"param2\"] (like an exec, this is the preferred form)  \nCMD command param1 param2 (as a shell)  \n```\n当Dockerfile指定了ENTRYPOINT，那么使用下面的格式：\n```\nCMD [\"param1\",\"param2\"] (as default parameters to ENTRYPOINT)  \n```\nENTRYPOINT指定的是一个可执行的脚本或者程序的路径，该指定的脚本或者程序将会以param1和param2作为参数执行。所以如果CMD指令使用上面的形式，那么Dockerfile中必须要有配套的ENTRYPOINT。\n\n（5）ENTRYPOINT（设置container启动时执行的操作）\n设置指令，指定容器启动时执行的命令，可以多次设置，但是只有最后一个有效。\n两种格式:\n```\nENTRYPOINT [\"executable\", \"param1\", \"param2\"] (like an exec, the preferred form)  \n\nENTRYPOINT command param1 param2 (as a shell) \n```\n\n该指令的使用分为两种情况，一种是独自使用，另一种和CMD指令配合使用。\n当独自使用时，如果你还使用了CMD命令且CMD是一个完整的可执行的命令，那么CMD指令和ENTRYPOINT会互相覆盖只有最后一个CMD或者ENTRYPOINT有效。\n```\n# CMD指令将不会被执行，只有ENTRYPOINT指令被执行  \nCMD echo “Hello, World!”  \nENTRYPOINT ls -l \n```\n\n另一种用法和CMD指令配合使用来指定ENTRYPOINT的默认参数，这时CMD指令不是一个完整的可执行命令，仅仅是参数部分；ENTRYPOINT指令只能使用JSON方式指定执行命令，而不能指定参数。\n```\nFROM ubuntu  \nCMD [\"-l\"]  \nENTRYPOINT [\"/usr/bin/ls\"]  \n```\n\n（6）USER（设置container容器的用户）\n设置指令，设置启动容器的用户，默认是root用户。\n```\n# 指定memcached的运行用户  \nENTRYPOINT [\"memcached\"]  \nUSER daemon  \n或  \nENTRYPOINT [\"memcached\", \"-u\", \"daemon\"]  \n```\n\n（7）EXPOSE（指定容器需要映射到宿主机器的端口）\n设置指令，该指令会将容器中的端口映射成宿主机器中的某个端口。当你需要访问容器的时候，可以不是用容器的IP地址而是使用宿主机器的IP地址和映射后的端口。要完成整个操作需要两个步骤，首先在Dockerfile使用EXPOSE设置需要映射的容器端口，然后在运行容器的时候指定-p选项加上EXPOSE设置的端口，这样EXPOSE设置的端口号会被随机映射成宿主机器中的一个端口号。也可以指定需要映射到宿主机器的那个端口，这时要确保宿主机器上的端口号没有被使用。EXPOSE指令可以一次设置多个端口号，相应的运行容器的时候，可以配套的多次使用-p选项。\n格式:\n```\nEXPOSE <port> [<port>...]  \n\n\n# 映射一个端口  \nEXPOSE port1  \n# 相应的运行容器使用的命令  \ndocker run -p port1 image  \n  \n# 映射多个端口  \nEXPOSE port1 port2 port3  \n# 相应的运行容器使用的命令  \ndocker run -p port1 -p port2 -p port3 image  \n# 还可以指定需要映射到宿主机器上的某个端口号  \ndocker run -p host_port1:port1 -p host_port2:port2 -p host_port3:port3 image  \n```\n\n端口映射是docker比较重要的一个功能，原因在于我们每次运行容器的时候容器的IP地址不能指定而是在桥接网卡的地址范围内随机生成的。宿主机器的IP地址是固定的，我们可以将容器的端口的映射到宿主机器上的一个端口，免去每次访问容器中的某个服务时都要查看容器的IP的地址。对于一个运行的容器，可以使用docker port加上容器中需要映射的端口和容器的ID来查看该端口号在宿主机器上的映射端口。\n\n（8）ENV（用于设置环境变量）\n构建指令，在image中设置一个环境变量。\n格式:\n```\nENV <key> <value>\n```\n\n设置了后，后续的RUN命令都可以使用，container启动后，可以通过docker inspect查看这个环境变量，也可以通过在docker run --env key=value时设置或修改环境变量。\n假如你安装了JAVA程序，需要设置JAVA_HOME，那么可以在Dockerfile中这样写：\nENV JAVA_HOME /path/to/java/dirent\n\n（9）ADD（从src复制文件到container的dest路径）\n构建指令，所有拷贝到container中的文件和文件夹权限为0755，uid和gid为0；如果是一个目录，那么会将该目录下的所有文件添加到container中，不包括目录；如果文件是可识别的压缩格式，则docker会帮忙解压缩（注意压缩格式）；如果<src>是文件且<dest>中不使用斜杠结束，则会将<dest>视为文件，<src>的内容会写入<dest>；如果<src>是文件且<dest>中使用斜杠结束，则会<src>文件拷贝到<dest>目录下。\n格式:\n```\nADD <src> <dest>  \n```\n\n<src> 是相对被构建的源目录的相对路径，可以是文件或目录的路径，也可以是一个远程的文件url;\n<dest> 是container中的绝对路径\n\n（10）VOLUME（指定挂载点)）\n设置指令，使容器中的一个目录具有持久化存储数据的功能，该目录可以被容器本身使用，也可以共享给其他容器使用。我们知道容器使用的是AUFS，这种文件系统不能持久化数据，当容器关闭后，所有的更改都会丢失。当容器中的应用有持久化数据的需求时可以在Dockerfile中使用该指令。\n格式:\n```\nVOLUME [\"<mountpoint>\"]  \n```\n\n```\nFROM base  \nVOLUME [\"/tmp/data\"]  \n```\n\n运行通过该Dockerfile生成image的容器，/tmp/data目录中的数据在容器关闭后，里面的数据还存在。例如另一个容器也有持久化数据的需求，且想使用上面容器共享的/tmp/data目录，那么可以运行下面的命令启动一个容器：\n```\ndocker run -t -i -rm -volumes-from container1 image2 bash  \n```\n\ncontainer1为第一个容器的ID，image2为第二个容器运行image的名字。\n\n（11）WORKDIR（切换目录）\n设置指令，可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效。\n格式:\n```\nWORKDIR /path/to/workdir  \n\n\n# 在 /p1/p2 下执行 vim a.txt  \nWORKDIR /p1 WORKDIR p2 RUN vim a.txt  \n```\n\n（12）ONBUILD（在子镜像中执行）\n```\nONBUILD <Dockerfile关键字>  \n```\n\nONBUILD 指定的命令在构建镜像时并不执行，而是在它的子镜像中执行。\n详细资料可参考https://www.dockboard.org/docker-quicktip-3-onbuild\n\n\n### 2、创建Dockerfile，构建shadowsocks环境 ###\n\nDockerfile文件\n```\n# Version: 0.0.1\n\n# Pull base image\nFROM centos:6\n\nMAINTAINER Gao Xiong \"growdane@gmail.com\"\n\n# Install openssl-devel\nRUN yum -y install openssl-devel\n\n# Install make and another devople tools\nRUN yum -y install gcc gcc-c++ automake autoconf libtool make\n\n# Install git \nRUN yum -y install git\n\n# Pull shadowsocks and install\nRUN cd /root && git clone https://github.com/madeye/shadowsocks-libev.git\nRUN cd /root/shadowsocks-libev && ./configure && make && make install\n\n# Expose ports\nEXPOSE 8388\n\n# Define default command\nENTRYPOINT cd /root/shadowsocks-libev && ss-server -p 8388 -k fuckgfw10086\n```\n\n### 3、构建镜像 ###\nDockerfile写好了，就可以在宿主的命令行中构建这个镜像了，构建命令如下：\n```\n# docker build -t growdane/shadowsocks .\n# docker run -d -p 8388:8388 growdane/shadowsocks\n```\n执行完上面的命令就可以直接在需要shadowsock的地方连接他了，密码就是ENTRYPOINT中，-k参数设置的。\n\n### 4、镜像上传 ###\n镜像上传有多种办法，第一种是通过docker直接在命令行将生成好的镜像上传到 docker.io这种方法会稍微慢一点，还有种方法是将dockerfile上传到github，然后通过自动构建来在docker.io上生成镜像。两种方法的shell命令如下：\n```\n# docker login\n# docker push growdane/shadowsocks\n```\n\n第二种方法\n这种方法不好用命令来说明，直接在用文字来说吧，现在github上创建一个新得Repository，然后将Dockerfile上传到github上就可以了。上面的这个Dockerfile我已经上传到https://github.com/hsiun/dockerfile-shadowsocks。\n\n### 5、镜像拉取 ###\n现在镜像已经创建成功了，如果需要的话可以通过下面的命令来拉取\n```\n# docker pull growdane/shadowsocks\n```\n\n","slug":"Docker镜像创建","published":1,"updated":"2016-05-11T01:53:23.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t7040024zskoax5tp4km"},{"title":"Docker安装","date":"2016-04-24T09:11:00.000Z","_content":"\n记录在我的云主机上安装Docker的过程，安装过程是通过软件包管理器来安装的，所有安装过程比较简单，过程参考了Docker官方文档和其他一些内容。\n\n### 前提条件 ###\n由于Docker对操作系统的一些底层功能有依赖，所有并不是所有的Linux发行版都可以用来安装Docker的，我这里选择的是Ubuntu14.04 64bit，因为Ubuntu本身使用用户量比较大，而且也是我自己常用的系统。具体要求在列表中给出：\n\n 1. 必须是64位系统，不论是AMD还是X86_64，总之一定要是64位的；\n 2. 内核版本最起码是3.10，小版本最低的3.10都行；\n\n\n### 更新APT源 ###\n为了安装最新的docker版本，这里并没有使用ubuntu官方的源来安装docker，而是使用了其他的源，添加过程如下所示：\n\n```shell\n$ sudo apt-get update\n$ sudo apt-get install apt-transport-https ca-certificates\n$ sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n$ vim /etc/apt/sources.list.d/docker.list #添加下面的内容，因为我是14.04的\n\ndeb https://apt.dockerproject.org/repo ubuntu-trusty main\n```\n其他版本的添加的源如下：\n在Ubuntu Precise 12.04 (LTS)中，添加下面的源\n\ndeb https://apt.dockerproject.org/repo ubuntu-precise main\n在Ubuntu Trusty 14.04 (LTS)中，添加下面的源\n\ndeb https://apt.dockerproject.org/repo ubuntu-trusty main\nUbuntu Wily 15.10\n\ndeb https://apt.dockerproject.org/repo ubuntu-wily main\nUbuntu Xenial 16.04 (LTS)\n\ndeb https://apt.dockerproject.org/repo ubuntu-xenial main\n\n保存并退出之后更新本地源缓存，我记得apt好像是有缓存：）。\n\n```shell\n$ sudo apt-get update\n```\n### 安装 ###\n\n在进行完上面的准备工作之后就可安装了，安装过程非常简单就是一条apt命令，安装之后对docker做一个简单检查。还有ufw的问题，ufw是Ubuntu下的防火墙，类似Centos下iptables，在我的主机上，这个防火墙是关闭的，所有可以不用担心它。\n\n```shell\n$ sudo apt-get install docker-engine\n```\n\n安装之后启动服务\n\n```\n$ sudo service docker start\n```\n\n通过运行一个Docker容器，检查Docker是否正常安装\n\n```\n$ sudo docker run hello-world\n```\n\n查看Docker信息\n\n```\n$ sudo docker info\n```\n\n上面就是我安装过程的一个记录，安装好Docker之后可以尽情的折腾了，遇到问题解决不了的话，直接重装系统吧：）。然后又可以愉快的玩耍了。有问题可以参考官方文档，链接在下面，官方文档说的特别详细，考虑了很多方面，我这里针对我本地需要和本地环境做了一些简化。哈哈，小偷了一下懒。不过也没什么影响，总的来说Docker安装过程还是非常简单的。\n\n参考：[Installation on Ubuntu](https://docs.docker.com/engine/installation/linux/ubuntulinux/)\n","source":"_posts/Docker安装.md","raw":"---\ntitle: Docker安装\ndate: 2016-04-24 17:11:00\ntags: 系统运维\n---\n\n记录在我的云主机上安装Docker的过程，安装过程是通过软件包管理器来安装的，所有安装过程比较简单，过程参考了Docker官方文档和其他一些内容。\n\n### 前提条件 ###\n由于Docker对操作系统的一些底层功能有依赖，所有并不是所有的Linux发行版都可以用来安装Docker的，我这里选择的是Ubuntu14.04 64bit，因为Ubuntu本身使用用户量比较大，而且也是我自己常用的系统。具体要求在列表中给出：\n\n 1. 必须是64位系统，不论是AMD还是X86_64，总之一定要是64位的；\n 2. 内核版本最起码是3.10，小版本最低的3.10都行；\n\n\n### 更新APT源 ###\n为了安装最新的docker版本，这里并没有使用ubuntu官方的源来安装docker，而是使用了其他的源，添加过程如下所示：\n\n```shell\n$ sudo apt-get update\n$ sudo apt-get install apt-transport-https ca-certificates\n$ sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n$ vim /etc/apt/sources.list.d/docker.list #添加下面的内容，因为我是14.04的\n\ndeb https://apt.dockerproject.org/repo ubuntu-trusty main\n```\n其他版本的添加的源如下：\n在Ubuntu Precise 12.04 (LTS)中，添加下面的源\n\ndeb https://apt.dockerproject.org/repo ubuntu-precise main\n在Ubuntu Trusty 14.04 (LTS)中，添加下面的源\n\ndeb https://apt.dockerproject.org/repo ubuntu-trusty main\nUbuntu Wily 15.10\n\ndeb https://apt.dockerproject.org/repo ubuntu-wily main\nUbuntu Xenial 16.04 (LTS)\n\ndeb https://apt.dockerproject.org/repo ubuntu-xenial main\n\n保存并退出之后更新本地源缓存，我记得apt好像是有缓存：）。\n\n```shell\n$ sudo apt-get update\n```\n### 安装 ###\n\n在进行完上面的准备工作之后就可安装了，安装过程非常简单就是一条apt命令，安装之后对docker做一个简单检查。还有ufw的问题，ufw是Ubuntu下的防火墙，类似Centos下iptables，在我的主机上，这个防火墙是关闭的，所有可以不用担心它。\n\n```shell\n$ sudo apt-get install docker-engine\n```\n\n安装之后启动服务\n\n```\n$ sudo service docker start\n```\n\n通过运行一个Docker容器，检查Docker是否正常安装\n\n```\n$ sudo docker run hello-world\n```\n\n查看Docker信息\n\n```\n$ sudo docker info\n```\n\n上面就是我安装过程的一个记录，安装好Docker之后可以尽情的折腾了，遇到问题解决不了的话，直接重装系统吧：）。然后又可以愉快的玩耍了。有问题可以参考官方文档，链接在下面，官方文档说的特别详细，考虑了很多方面，我这里针对我本地需要和本地环境做了一些简化。哈哈，小偷了一下懒。不过也没什么影响，总的来说Docker安装过程还是非常简单的。\n\n参考：[Installation on Ubuntu](https://docs.docker.com/engine/installation/linux/ubuntulinux/)\n","slug":"Docker安装","published":1,"updated":"2016-04-24T09:12:34.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t70j0026zsko6fvjudbw"},{"title":"Debian一些软件的安装","date":"2014-04-14T08:42:00.000Z","_content":"\n以下是自己的Debian系统在使用时安装一些软件和进行一些配置的过程，以此做个记录，以备将来查用。\n系统信息是：Debian 7.2\n\n1、sudo的配置，Debian默认sudo是不能使用的，但是已经习惯了使用sudo怎么办呢，可以通过相关的配置文件来启用这个命令。如下所示：\n编辑/etc/sudoers文件，将username    ALL=(ALL) ALL加入其中，其中username时要使用sudo命令的用户的用户名。\n\n2、配置Debian的软件源，以获取更新。\n通过下面的shell命令，备份原来的软件源，并打开配置文件。\n```\nsudo cp /etc/apt/sources.list /etc/apt/sources.list_bak #备份一下软件源  \nsudo vi /etc/apt/sources.list  \n```\n\n将下面的内容复制到sources.list文件中\n```\n# 网易163更新服务器：  \ndeb http://mirrors.163.com/debian/ squeeze main non-free contrib  \ndeb http://mirrors.163.com/debian/ squeeze-proposed-updates main non-free contrib  \ndeb-src http://mirrors.163.com/debian/ squeeze main non-free contrib  \ndeb-src http://mirrors.163.com/debian/ squeeze-proposed-updates main non-free contrib  \n```\n\n3、安装软件开发工具包，里面包含了常用的用于软件开发的工具，如gcc，make等。\n```\nsudo apt-get install build-essential   \nsudo apt-get install gdb   \nsudo apt-get install g++  \n```\n\n4、安装一个截屏软件scrot,使用scrot -s命令可以截取一个区域的图片。\n```\nsudo apt-get install scrot  \n```\n\n\n5、在使用Debian的同时还装了一个Windwos是很正常的事情，如果遇到了问题要重装Debian到没什么问题，但是如果是重装Windows问题就出来了，一般重装后，启动是有问题的，具体说就是启动不了。这是可以使用下面的方法。\n使用一张支持Ext4文件系统的Ubuntu live CD(9.04+)，从光盘启动进入体验模式。\n```\nsudo apt-get install grub  \n```\n\n假设Ubuntu在(hd0,2)，其实输入root之后，可以Tab出详细信息。\n```\nroot (hd0,2)  \nsetup (hd0)  \nquit  \n```\n\n重启机器\n","source":"_posts/Debian一些软件的安装.md","raw":"---\ntitle: Debian一些软件的安装\ndate: 2014-04-14 16:42\ntags: 个人总结\n---\n\n以下是自己的Debian系统在使用时安装一些软件和进行一些配置的过程，以此做个记录，以备将来查用。\n系统信息是：Debian 7.2\n\n1、sudo的配置，Debian默认sudo是不能使用的，但是已经习惯了使用sudo怎么办呢，可以通过相关的配置文件来启用这个命令。如下所示：\n编辑/etc/sudoers文件，将username    ALL=(ALL) ALL加入其中，其中username时要使用sudo命令的用户的用户名。\n\n2、配置Debian的软件源，以获取更新。\n通过下面的shell命令，备份原来的软件源，并打开配置文件。\n```\nsudo cp /etc/apt/sources.list /etc/apt/sources.list_bak #备份一下软件源  \nsudo vi /etc/apt/sources.list  \n```\n\n将下面的内容复制到sources.list文件中\n```\n# 网易163更新服务器：  \ndeb http://mirrors.163.com/debian/ squeeze main non-free contrib  \ndeb http://mirrors.163.com/debian/ squeeze-proposed-updates main non-free contrib  \ndeb-src http://mirrors.163.com/debian/ squeeze main non-free contrib  \ndeb-src http://mirrors.163.com/debian/ squeeze-proposed-updates main non-free contrib  \n```\n\n3、安装软件开发工具包，里面包含了常用的用于软件开发的工具，如gcc，make等。\n```\nsudo apt-get install build-essential   \nsudo apt-get install gdb   \nsudo apt-get install g++  \n```\n\n4、安装一个截屏软件scrot,使用scrot -s命令可以截取一个区域的图片。\n```\nsudo apt-get install scrot  \n```\n\n\n5、在使用Debian的同时还装了一个Windwos是很正常的事情，如果遇到了问题要重装Debian到没什么问题，但是如果是重装Windows问题就出来了，一般重装后，启动是有问题的，具体说就是启动不了。这是可以使用下面的方法。\n使用一张支持Ext4文件系统的Ubuntu live CD(9.04+)，从光盘启动进入体验模式。\n```\nsudo apt-get install grub  \n```\n\n假设Ubuntu在(hd0,2)，其实输入root之后，可以Tab出详细信息。\n```\nroot (hd0,2)  \nsetup (hd0)  \nquit  \n```\n\n重启机器\n","slug":"Debian一些软件的安装","published":1,"updated":"2016-04-29T06:56:22.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t70j0028zskoe98caurg"},{"title":"C语言可变参数函数","date":"2014-01-11T15:43:00.000Z","_content":"\nC语言有一种实现可变参数的函数的方法就是使用占位符,使用的方法就是采用如下的方式定义函数void frees(int size, ...)。其余的地方和一般的函数定义是一样的只是第二个参数上使用了三个点，而没用采用一般的变量类型变量名的方式。只要采用这样的定义方式，便可以使用这个函数来处理可变变量。但是光有这个定义还是不够的，还需要借助如下俩个函数一个类型定义，实际上这些函数是通过宏来实现的。\n \nva_list\nva_start();\nva_arg();\n \nva_list，这是个类型定义，我们可以把它理解成一个指针，它指向第一个参数的地址。如果，我们这样定义： va_list ap;则ap就是这样一种变量，它是指向所有参数中的第一个参数的。它不同于一般的指针变量，它是个复合变量。就是说可以通过这个变量找到，在调用这个函数是传入的其他变量。但是我们不可以直接通过移动这个指针来指向下一个变量。剩下的工作就要通过下面的两个方法了。\n \nva_start(ap,size)，那么ap就指向第一个参数size了，并且可得到size的类型int。这时候如果有下一个参数，就需要使ap指向下一个参数，并且得到它的类型。\n \nva_arg(ap,类型)，这样ap就指向一个参数，并且可以得到那个参数的类型了。注意！类型非常重要，学过指针的都应该清楚，指针的类型如果弄错的话，位置正确，取出来的数可能也是乱七八糟的。\n \n下面是使用C语言的这个特征来编写的一个可以释放一系列内存空间的函数：\n\n```C\nvoid frees(int size, ...){  \n    va_list ap;  \n    int i=0;  \n    va_start(ap, size);  \n    for(i=0; i<size; i++){  \n        void* ptr = va_arg(ap, void*);  \n        free2(ptr);  \n    }  \n}  \n```\n在使用的时候只需指明需要释放的空间的指针的个数，以及他们的值，就可以了。","source":"_posts/C语言可变参数函数.md","raw":"---\ntitle: C语言可变参数函数\ndate: 2014-01-11 23:43\ntags: C语言学习\n---\n\nC语言有一种实现可变参数的函数的方法就是使用占位符,使用的方法就是采用如下的方式定义函数void frees(int size, ...)。其余的地方和一般的函数定义是一样的只是第二个参数上使用了三个点，而没用采用一般的变量类型变量名的方式。只要采用这样的定义方式，便可以使用这个函数来处理可变变量。但是光有这个定义还是不够的，还需要借助如下俩个函数一个类型定义，实际上这些函数是通过宏来实现的。\n \nva_list\nva_start();\nva_arg();\n \nva_list，这是个类型定义，我们可以把它理解成一个指针，它指向第一个参数的地址。如果，我们这样定义： va_list ap;则ap就是这样一种变量，它是指向所有参数中的第一个参数的。它不同于一般的指针变量，它是个复合变量。就是说可以通过这个变量找到，在调用这个函数是传入的其他变量。但是我们不可以直接通过移动这个指针来指向下一个变量。剩下的工作就要通过下面的两个方法了。\n \nva_start(ap,size)，那么ap就指向第一个参数size了，并且可得到size的类型int。这时候如果有下一个参数，就需要使ap指向下一个参数，并且得到它的类型。\n \nva_arg(ap,类型)，这样ap就指向一个参数，并且可以得到那个参数的类型了。注意！类型非常重要，学过指针的都应该清楚，指针的类型如果弄错的话，位置正确，取出来的数可能也是乱七八糟的。\n \n下面是使用C语言的这个特征来编写的一个可以释放一系列内存空间的函数：\n\n```C\nvoid frees(int size, ...){  \n    va_list ap;  \n    int i=0;  \n    va_start(ap, size);  \n    for(i=0; i<size; i++){  \n        void* ptr = va_arg(ap, void*);  \n        free2(ptr);  \n    }  \n}  \n```\n在使用的时候只需指明需要释放的空间的指针的个数，以及他们的值，就可以了。","slug":"C语言可变参数函数","published":1,"updated":"2016-04-29T06:17:21.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t70j002azskoqaxzpqy1"},{"title":"C语言中的位域","date":"2014-01-28T16:03:00.000Z","_content":"\n 在内存中存取数据的最小单位一般是字节，但是有时候并不需要一个字节来存储。例如对于只有真假两个值得一个变量来说，就只须一位就可以了。有比如说在某些情况下内存是极其宝贵的资源，比如说一些嵌入式设备，因此要格外的注意节约。C语言可以在一个结构体中以位来存储数据，这种用位为单位的成员称为位域或位段。\n\n ```C\n struct bit_data  \n{  \n  int a:2;  \n  char c:3;  \n};  \n ```\n 虽然位域的机制提供了一种使用非字节数内存的方法，但是位域在使用的时候还是要注意一些问题的，比如说，位域成员的长度不能超过其自身声明类型的长度char不能超过8，下面是两个比较主要的问题：\n（1）成员值的问题\n声明一个位域如下\n\n```C\nstruct bool  \n{  \n  int a:1;  \n};  \n```\n\n希望声明一个这样的位域用他来充当bool型，但是实际的情况却和想象的不一样。赋1，输出得到的切实-1。这是因为在二进制补码中，最高有效位也称为符号位，当被设置为1时，表示负数，而当被设置为0时，值为非负。这里只有一位，那么他自身就是最高有效位，那么赋1他就是负数，在这里是-1，而0则是0这个非负数。下面是一个完整的测试程序。\n\n```C\n#include <stdio.h>  \n#include <stdlib.h>  \n  \nint main()  \n{  \n  struct inti{  \n    int a:2;  \n  };  \n  struct inti data;  \n  int i;  \n  for (i = 0; i < 4; i++)  \n  {  \n    data.a = i;  \n    printf(\"%2d \",data.a);  \n    printf(\"%u\\n\",data.a);  \n  }  \n  return 0;  \n}  \n```\n\n输出如下：\n 0 0\n 1 1\n-2 4294967294\n-1 4294967295\n 所赋数值的表示\n赋的数值\t二进制表示\t内存中值（32bit）\t有符号数值\t无符号数值\n0\t00\t0x00000000\t0\t0\n1\t01\t0x00000001\t1\t1\n2\t10\t0xFFFFFFFE\t-2\t4294967294\n3\t11\t0xFFFFFFFF\t-1\t4294967295\n 把他们的二进制表示的值按照有符号数的补码对应的值计算出来就是有符号数值。这应该就是输出中第一列的原因，第二列的输出应该还和分配的内存有关。\n（2）内存分配与对齐\n    1、只包含一种基本类型的。按位域中说声明的基本类型对齐，比如在32位机（机器字长）上的char，分配1byte。int分配4byte等。不超过一个基本类型长度的，分配一个基本类型长度，超过的取其基本长度的N倍，N与位域实际长度的差不大于一个基本长度。\n```\nstruct bit1{  \n    int a:2;  \n    int b:2;  \n};  \n```\nsizeof(struct bit1)返回4；\n\n```\nstruct bit2{  \n    int a:18;  \n    int b:18;  \n};  \n```\n\nsizeof(struct bit2)返回8；   \n2、包含多种基本类型的。按位域中声明的最长基本类型的长度对其，比如说一个包含char和int两种基本类型的位域，按int的长度对齐。会进行拼凑以节约内存。比如：\n\n```\nstruct bit3{  \n    int e:2;  \n    long long d:36;  \n    int a:32;  \n    int b:32;  \n    char c:7;  \n};  \n```\nsizeof(struct bit3)返回20。\n总结（普通32位pc)\n（1）用位域来实现bool型变量与用一个int型来实现其实是一样的。并不能起到节约内存的作用，所以想要使用单个的位域时并不会节约内存，如果声明一个位域的数组就是另一种情况了。\n（2）编译器为优化内存结构，会进行对齐，这个过程也不是节约内存的。在内存足够的情况下，编译器更注重访问速度，而不是节约内存。\n","source":"_posts/C语言中的位域.md","raw":"---\ntitle: C语言中的位域\ndate: 2014-01-29 00:03\ntags: C语言学习\n---\n\n 在内存中存取数据的最小单位一般是字节，但是有时候并不需要一个字节来存储。例如对于只有真假两个值得一个变量来说，就只须一位就可以了。有比如说在某些情况下内存是极其宝贵的资源，比如说一些嵌入式设备，因此要格外的注意节约。C语言可以在一个结构体中以位来存储数据，这种用位为单位的成员称为位域或位段。\n\n ```C\n struct bit_data  \n{  \n  int a:2;  \n  char c:3;  \n};  \n ```\n 虽然位域的机制提供了一种使用非字节数内存的方法，但是位域在使用的时候还是要注意一些问题的，比如说，位域成员的长度不能超过其自身声明类型的长度char不能超过8，下面是两个比较主要的问题：\n（1）成员值的问题\n声明一个位域如下\n\n```C\nstruct bool  \n{  \n  int a:1;  \n};  \n```\n\n希望声明一个这样的位域用他来充当bool型，但是实际的情况却和想象的不一样。赋1，输出得到的切实-1。这是因为在二进制补码中，最高有效位也称为符号位，当被设置为1时，表示负数，而当被设置为0时，值为非负。这里只有一位，那么他自身就是最高有效位，那么赋1他就是负数，在这里是-1，而0则是0这个非负数。下面是一个完整的测试程序。\n\n```C\n#include <stdio.h>  \n#include <stdlib.h>  \n  \nint main()  \n{  \n  struct inti{  \n    int a:2;  \n  };  \n  struct inti data;  \n  int i;  \n  for (i = 0; i < 4; i++)  \n  {  \n    data.a = i;  \n    printf(\"%2d \",data.a);  \n    printf(\"%u\\n\",data.a);  \n  }  \n  return 0;  \n}  \n```\n\n输出如下：\n 0 0\n 1 1\n-2 4294967294\n-1 4294967295\n 所赋数值的表示\n赋的数值\t二进制表示\t内存中值（32bit）\t有符号数值\t无符号数值\n0\t00\t0x00000000\t0\t0\n1\t01\t0x00000001\t1\t1\n2\t10\t0xFFFFFFFE\t-2\t4294967294\n3\t11\t0xFFFFFFFF\t-1\t4294967295\n 把他们的二进制表示的值按照有符号数的补码对应的值计算出来就是有符号数值。这应该就是输出中第一列的原因，第二列的输出应该还和分配的内存有关。\n（2）内存分配与对齐\n    1、只包含一种基本类型的。按位域中说声明的基本类型对齐，比如在32位机（机器字长）上的char，分配1byte。int分配4byte等。不超过一个基本类型长度的，分配一个基本类型长度，超过的取其基本长度的N倍，N与位域实际长度的差不大于一个基本长度。\n```\nstruct bit1{  \n    int a:2;  \n    int b:2;  \n};  \n```\nsizeof(struct bit1)返回4；\n\n```\nstruct bit2{  \n    int a:18;  \n    int b:18;  \n};  \n```\n\nsizeof(struct bit2)返回8；   \n2、包含多种基本类型的。按位域中声明的最长基本类型的长度对其，比如说一个包含char和int两种基本类型的位域，按int的长度对齐。会进行拼凑以节约内存。比如：\n\n```\nstruct bit3{  \n    int e:2;  \n    long long d:36;  \n    int a:32;  \n    int b:32;  \n    char c:7;  \n};  \n```\nsizeof(struct bit3)返回20。\n总结（普通32位pc)\n（1）用位域来实现bool型变量与用一个int型来实现其实是一样的。并不能起到节约内存的作用，所以想要使用单个的位域时并不会节约内存，如果声明一个位域的数组就是另一种情况了。\n（2）编译器为优化内存结构，会进行对齐，这个过程也不是节约内存的。在内存足够的情况下，编译器更注重访问速度，而不是节约内存。\n","slug":"C语言中的位域","published":1,"updated":"2016-04-29T06:42:06.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t70j002czskojm6rickn"},{"title":"C语言中strcpy和memcpy","date":"2014-04-22T00:31:00.000Z","_content":"strcpy和memcpy都是标准C库函数，且都可用于字符串复制。\n\nstrcpy提供了字符串的复制。即strcpy只用于字符串复制，并且它不仅复制字符串内容之外，还会复制字符串的结束符。strcpy的复制正是在遇到字符串的结束符时终止的。\nmemcpy提供了一般内存的复制。即memcpy对于需要复制的内容没有限制，因此用途更广。其结束以参数n的大小为准。\n\n其所包含的头文件，和函数声明如下       \n```\n#include <string.h>  \n  \nchar *strcpy(char *dest, const char *src);  \nchar *strncpy(char *dest, const char *src, size_t n);  \n```\n\n```\n#include <string.h>  \n  \nvoid *memcpy(void *dest, const void *src, size_t n);  \n```\n\n\n\nstrcpy和memcpy主要有以下3方面的区别。\n1、复制的内容不同。strcpy只能复制字符串，而memcpy可以复制任意内容，例如字符数组、整型、结构体、类等。\n2、复制的方法不同。strcpy不需要指定长度，它遇到被复制字符的串结束符\"\\0\"才结束，所以容易溢出。memcpy则是根据其第3个参数决定复制的长度。\n3、用途不同。通常在复制字符串时用strcpy，而需要复制其他类型数据时则一般用memcpy","source":"_posts/C语言中strcpy和memcpy.md","raw":"---\ntitle: C语言中strcpy和memcpy\ndate: 2014-04-22 08:31\ntags: C语言学习\n---\nstrcpy和memcpy都是标准C库函数，且都可用于字符串复制。\n\nstrcpy提供了字符串的复制。即strcpy只用于字符串复制，并且它不仅复制字符串内容之外，还会复制字符串的结束符。strcpy的复制正是在遇到字符串的结束符时终止的。\nmemcpy提供了一般内存的复制。即memcpy对于需要复制的内容没有限制，因此用途更广。其结束以参数n的大小为准。\n\n其所包含的头文件，和函数声明如下       \n```\n#include <string.h>  \n  \nchar *strcpy(char *dest, const char *src);  \nchar *strncpy(char *dest, const char *src, size_t n);  \n```\n\n```\n#include <string.h>  \n  \nvoid *memcpy(void *dest, const void *src, size_t n);  \n```\n\n\n\nstrcpy和memcpy主要有以下3方面的区别。\n1、复制的内容不同。strcpy只能复制字符串，而memcpy可以复制任意内容，例如字符数组、整型、结构体、类等。\n2、复制的方法不同。strcpy不需要指定长度，它遇到被复制字符的串结束符\"\\0\"才结束，所以容易溢出。memcpy则是根据其第3个参数决定复制的长度。\n3、用途不同。通常在复制字符串时用strcpy，而需要复制其他类型数据时则一般用memcpy","slug":"C语言中strcpy和memcpy","published":1,"updated":"2016-04-29T07:03:31.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t70z002ezskoootm6htu"},{"title":"Centos6.5安装mysql5.6","date":"2015-11-18T22:41:00.000Z","_content":"centos6.5源默认的MySQL好像是5.1。如果需要安装其他版本的mysql可以通过下载mysql相应版本的rpm包来实现。这篇博客记录的就是使用yum在Centos6.5版本的系统上安装MySQL5.6。安装包是”架构相关的”因此应用需要32位（i386）或者64位（x86_64）的操作系统。\n\n操作时具体的环境\n操作系统：Centos6.5\n架构：X86_64\n\n依照下面的步骤可以安装Mysql5.6\n第一步：登入到服务器中，并且下载yum的rpm包。（URL：http://dev.mysql.com/downloads/repo/）\n```\nyum install wget  \nwget http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm  \n```\n\n\n第二步：安装下载的rpm包\n```\nrpm -ivh mysql-community-release-el6-5.noarch.rpm  \n```\n\n\n第三步：在命令行中安装mysql5.6，使用yum的方式安装，依赖的软件包会一并安装。\n```\nyum install mysql-server  \n```\n\n第四步：安装完mysql服务器之后使用命令把服务启动起来\n```\n/etc/init.d/mysqld start  \n或者\n\nservice mysqld start  \n```\n\n第五步：因为mysql服务器默认安装时没有密码的，必须从新设置mysql的密码\n可以使用下面的命令来完成一系列的安全设置\n```\nmysql_secure_installation  \n也可以使用下面的方法\n\nmysql -u root  \n\nmysql> use mysql;  \nmysql> update user set password=PASSWORD(\"GIVE-NEW-ROOT-PASSWORD\") where User='root';  \nmysql> flush privileges;  \nmysql> quit  \n```\n\n\n自此，mysql便安装完成了。过程还是非常简单的，做个记录供以后回顾。下面是mysql的一些基础知识。\n\n\n首先一点要说的是数据库和数据库实例的区别，他们两者之间的区别让我想到了程序和进程之间的区别，其实他们之间的区别是一样的。数据库就是指静态的在文件系统上存在的文件，而数据库实例指的则是运行在内存中的数据库后台线程和数据的内存区。这就像程序一般我们是讲静态的程序文件，而进程则是讲程序在内存中运行的状态。关于数据库和实例的定义这里借用《MySQL技术内幕》这本书中的相关说明：\n\n数据库：物理操作系统文件或其他形式文件类型的集合。在Mysql数据库中，数据库文件可以是frm，MYD，MYI，ibd结尾的文件。当使用NDB引擎时，数据库的文件可能不是操作系统上的文件，而是存放于内存之中的文件，但是定义仍然不变。 \n实例：Mysql数据库由后台线程以及一个共享内存区组成。共享内存可以被运行的后台线程所共享。需要牢记的是，数据库才是真正操作数据库文件的。\n\nMysql进程：mysql被设计为一个但进程多线程架构的数据库。在linux系统中，创建进程所需的花销要远大于创建线程。进程的创建需要复制整个进程的所有数据，而新建线程的数据如文件描述符等是共享的。mysql在linux系统只会有一个进程，可以使用ps命令确认。\n\nps -ef | grep mysqld\n1\n1\n配置文件：当Mysql启动时，会去配置文件，然后根据配置文件中的参数来启动数据库，Mysql有系列的配置文件，他会根据一定的顺序依次读取。后面读取的配置后覆盖前面相同的配置。可以使用下面的命令确认。\n\nmysql --help | grep my.cnf\n1\n1\n数据文件：在配置文件中有数据所在位置的参数，具体参数名叫做datadir的。在linux中默认是/usr/local/mysql/data。这个参数是可以修改的，默认是一个链接。可以使用下面命令验证，在mysql命令行中使用bash命令，可以通过在命令前加system关键字的方式实现。\n\nSHOW VARIABLES LIKE 'datadir'\\G;\n1\n1\n其他http://dev.mysql.com/doc/","source":"_posts/Centos6.5安装mysql5.6.md","raw":"---\ntitle:  Centos6.5安装mysql5.6\ndate: 2015-11-19 06:41\ntags: 数据库管理\n---\ncentos6.5源默认的MySQL好像是5.1。如果需要安装其他版本的mysql可以通过下载mysql相应版本的rpm包来实现。这篇博客记录的就是使用yum在Centos6.5版本的系统上安装MySQL5.6。安装包是”架构相关的”因此应用需要32位（i386）或者64位（x86_64）的操作系统。\n\n操作时具体的环境\n操作系统：Centos6.5\n架构：X86_64\n\n依照下面的步骤可以安装Mysql5.6\n第一步：登入到服务器中，并且下载yum的rpm包。（URL：http://dev.mysql.com/downloads/repo/）\n```\nyum install wget  \nwget http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm  \n```\n\n\n第二步：安装下载的rpm包\n```\nrpm -ivh mysql-community-release-el6-5.noarch.rpm  \n```\n\n\n第三步：在命令行中安装mysql5.6，使用yum的方式安装，依赖的软件包会一并安装。\n```\nyum install mysql-server  \n```\n\n第四步：安装完mysql服务器之后使用命令把服务启动起来\n```\n/etc/init.d/mysqld start  \n或者\n\nservice mysqld start  \n```\n\n第五步：因为mysql服务器默认安装时没有密码的，必须从新设置mysql的密码\n可以使用下面的命令来完成一系列的安全设置\n```\nmysql_secure_installation  \n也可以使用下面的方法\n\nmysql -u root  \n\nmysql> use mysql;  \nmysql> update user set password=PASSWORD(\"GIVE-NEW-ROOT-PASSWORD\") where User='root';  \nmysql> flush privileges;  \nmysql> quit  \n```\n\n\n自此，mysql便安装完成了。过程还是非常简单的，做个记录供以后回顾。下面是mysql的一些基础知识。\n\n\n首先一点要说的是数据库和数据库实例的区别，他们两者之间的区别让我想到了程序和进程之间的区别，其实他们之间的区别是一样的。数据库就是指静态的在文件系统上存在的文件，而数据库实例指的则是运行在内存中的数据库后台线程和数据的内存区。这就像程序一般我们是讲静态的程序文件，而进程则是讲程序在内存中运行的状态。关于数据库和实例的定义这里借用《MySQL技术内幕》这本书中的相关说明：\n\n数据库：物理操作系统文件或其他形式文件类型的集合。在Mysql数据库中，数据库文件可以是frm，MYD，MYI，ibd结尾的文件。当使用NDB引擎时，数据库的文件可能不是操作系统上的文件，而是存放于内存之中的文件，但是定义仍然不变。 \n实例：Mysql数据库由后台线程以及一个共享内存区组成。共享内存可以被运行的后台线程所共享。需要牢记的是，数据库才是真正操作数据库文件的。\n\nMysql进程：mysql被设计为一个但进程多线程架构的数据库。在linux系统中，创建进程所需的花销要远大于创建线程。进程的创建需要复制整个进程的所有数据，而新建线程的数据如文件描述符等是共享的。mysql在linux系统只会有一个进程，可以使用ps命令确认。\n\nps -ef | grep mysqld\n1\n1\n配置文件：当Mysql启动时，会去配置文件，然后根据配置文件中的参数来启动数据库，Mysql有系列的配置文件，他会根据一定的顺序依次读取。后面读取的配置后覆盖前面相同的配置。可以使用下面的命令确认。\n\nmysql --help | grep my.cnf\n1\n1\n数据文件：在配置文件中有数据所在位置的参数，具体参数名叫做datadir的。在linux中默认是/usr/local/mysql/data。这个参数是可以修改的，默认是一个链接。可以使用下面命令验证，在mysql命令行中使用bash命令，可以通过在命令前加system关键字的方式实现。\n\nSHOW VARIABLES LIKE 'datadir'\\G;\n1\n1\n其他http://dev.mysql.com/doc/","slug":"Centos6.5安装mysql5.6","published":1,"updated":"2016-04-29T07:32:08.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou8t70z002gzskoerhv4yf0"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciou8t6xc0002zskolbhfgsxh","tag_id":"ciou8t6xc0003zskoykmc3o7c","_id":"ciou8t6xc0004zskoex4ngavq"},{"post_id":"ciou8t6xr0005zskoqatb4kds","tag_id":"ciou8t6xr0006zskoyqio9njp","_id":"ciou8t6xr0007zsko5ivvwxx4"},{"post_id":"ciou8t6y70008zskogz8ejapu","tag_id":"ciou8t6xr0006zskoyqio9njp","_id":"ciou8t6y70009zskoybyfmbvw"},{"post_id":"ciou8t6y7000azskoq5flcaet","tag_id":"ciou8t6y7000bzskothlq572x","_id":"ciou8t6y7000czskotlu1yqlx"},{"post_id":"ciou8t6y7000dzskok5qtqv9u","tag_id":"ciou8t6y7000ezskomjljyq4f","_id":"ciou8t6y7000fzskowildh9yw"},{"post_id":"ciou8t6y7000gzskox5b3gdfn","tag_id":"ciou8t6y7000bzskothlq572x","_id":"ciou8t6y7000hzskocycamuma"},{"post_id":"ciou8t6y7000izskodfdnu14x","tag_id":"ciou8t6y7000jzskooxhx3bxf","_id":"ciou8t6y7000kzskohrwn87dd"},{"post_id":"ciou8t6y7000lzsko9n80jrav","tag_id":"ciou8t6xr0006zskoyqio9njp","_id":"ciou8t6y7000mzskopx0f4ei4"},{"post_id":"ciou8t6y7000nzsko93at7ayf","tag_id":"ciou8t6ym000ozskoabavcw3i","_id":"ciou8t6ym000pzskoi0fkvj8e"},{"post_id":"ciou8t6ym000qzskog0i3f6gc","tag_id":"ciou8t6ym000ozskoabavcw3i","_id":"ciou8t6ym000rzskoegv14byh"},{"post_id":"ciou8t6ym000szskooawtpoyj","tag_id":"ciou8t6ym000tzsko6njuoc67","_id":"ciou8t6ym000uzskoc76aylyk"},{"post_id":"ciou8t6ym000vzskorw0z6dpf","tag_id":"ciou8t6ym000ozskoabavcw3i","_id":"ciou8t6ym000wzskoonw27e8i"},{"post_id":"ciou8t6ym000xzsko2ov6kol0","tag_id":"ciou8t6y7000jzskooxhx3bxf","_id":"ciou8t6ym000yzskooq9vlqh5"},{"post_id":"ciou8t6ym000zzskoz6xhgxs5","tag_id":"ciou8t6y7000bzskothlq572x","_id":"ciou8t6ym0010zskogwud4hmh"},{"post_id":"ciou8t6ym0011zskonh1qafko","tag_id":"ciou8t6z20012zsko6jnnd0mj","_id":"ciou8t6z20013zskoh14psm7b"},{"post_id":"ciou8t6z20014zskoao6ww9za","tag_id":"ciou8t6y7000bzskothlq572x","_id":"ciou8t6z20015zskocfsmz0ik"},{"post_id":"ciou8t6z20016zsko9feq2zh0","tag_id":"ciou8t6y7000bzskothlq572x","_id":"ciou8t6z20017zsko1vo8gwok"},{"post_id":"ciou8t6z20019zskozzx3mhcp","tag_id":"ciou8t6y7000bzskothlq572x","_id":"ciou8t6z2001azskoy2co7oiy"},{"post_id":"ciou8t6z2001bzsko7g58ctig","tag_id":"ciou8t6z2001czskofrynffdh","_id":"ciou8t6z2001dzskoh6om4cpi"},{"post_id":"ciou8t6z2001ezsko5eqg3luh","tag_id":"ciou8t6z2001czskofrynffdh","_id":"ciou8t6z2001fzskogasrjkkj"},{"post_id":"ciou8t6zk001gzskoyf9yub1n","tag_id":"ciou8t6z2001czskofrynffdh","_id":"ciou8t6zm001hzskoop5ozufo"},{"post_id":"ciou8t6zn001izskoltfs1z02","tag_id":"ciou8t6z2001czskofrynffdh","_id":"ciou8t6zn001jzskotzn4yys3"},{"post_id":"ciou8t6zo001kzsko6ot1cr82","tag_id":"ciou8t6z2001czskofrynffdh","_id":"ciou8t6zo001lzskosl5fokom"},{"post_id":"ciou8t6zo001mzskot11movmb","tag_id":"ciou8t6z2001czskofrynffdh","_id":"ciou8t6zo001nzskoy5q101sz"},{"post_id":"ciou8t6zo001ozskoaoecpd3u","tag_id":"ciou8t6y7000bzskothlq572x","_id":"ciou8t6zo001pzsko0efmr4du"},{"post_id":"ciou8t6zo001qzskoaxl1kck1","tag_id":"ciou8t6y7000ezskomjljyq4f","_id":"ciou8t6zo001rzsko7cs0olek"},{"post_id":"ciou8t6zo001szskotn3tpxxp","tag_id":"ciou8t6zo001tzsko4m933j9h","_id":"ciou8t704001uzskoemw5xwgo"},{"post_id":"ciou8t704001vzsko62tqf0rm","tag_id":"ciou8t704001wzsko3byqyuui","_id":"ciou8t704001xzskoibu0sab6"},{"post_id":"ciou8t704001yzskooprqibh7","tag_id":"ciou8t6xc0003zskoykmc3o7c","_id":"ciou8t704001zzskor7yl8in5"},{"post_id":"ciou8t7040020zsko5mfxfdq1","tag_id":"ciou8t6y7000ezskomjljyq4f","_id":"ciou8t7040021zskoafweisb2"},{"post_id":"ciou8t7040022zskorqw2ixwf","tag_id":"ciou8t6ym000ozskoabavcw3i","_id":"ciou8t7040023zskore0gfd7r"},{"post_id":"ciou8t7040024zskoax5tp4km","tag_id":"ciou8t6y7000bzskothlq572x","_id":"ciou8t70j0025zskofrnze90y"},{"post_id":"ciou8t70j0026zsko6fvjudbw","tag_id":"ciou8t6y7000bzskothlq572x","_id":"ciou8t70j0027zskodvu0sdgf"},{"post_id":"ciou8t70j0028zskoe98caurg","tag_id":"ciou8t6y7000ezskomjljyq4f","_id":"ciou8t70j0029zskoef0485ej"},{"post_id":"ciou8t70j002azskoqaxzpqy1","tag_id":"ciou8t6ym000tzsko6njuoc67","_id":"ciou8t70j002bzskopmdtfibm"},{"post_id":"ciou8t70j002czskojm6rickn","tag_id":"ciou8t6ym000tzsko6njuoc67","_id":"ciou8t70j002dzskoujq3c7iq"},{"post_id":"ciou8t70z002ezskoootm6htu","tag_id":"ciou8t6ym000tzsko6njuoc67","_id":"ciou8t70z002fzsko5r70ftr8"},{"post_id":"ciou8t70z002gzskoerhv4yf0","tag_id":"ciou8t6z2001czskofrynffdh","_id":"ciou8t70z002hzsko7iypod77"}],"Tag":[{"name":"Java编程学习","_id":"ciou8t6xc0003zskoykmc3o7c"},{"name":"产品说明","_id":"ciou8t6xr0006zskoyqio9njp"},{"name":"系统运维","_id":"ciou8t6y7000bzskothlq572x"},{"name":"个人总结","_id":"ciou8t6y7000ezskomjljyq4f"},{"name":"开发工具","_id":"ciou8t6y7000jzskooxhx3bxf"},{"name":"Web基础","_id":"ciou8t6ym000ozskoabavcw3i"},{"name":"C语言学习","_id":"ciou8t6ym000tzsko6njuoc67"},{"name":"网络编程","_id":"ciou8t6z20012zsko6jnnd0mj"},{"name":"数据库管理","_id":"ciou8t6z2001czskofrynffdh"},{"name":"Linux学习","_id":"ciou8t6zo001tzsko4m933j9h"},{"name":"计算机网络","_id":"ciou8t704001wzsko3byqyuui"}]}}